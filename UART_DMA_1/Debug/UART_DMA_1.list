
UART_DMA_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001e00  08001e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e60  08001e60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e60  08001e60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e60  08001e60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e60  08001e60  00011e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e64  08001e64  00011e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08001e74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08001e74  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f3d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a6d  00000000  00000000  00029f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  0002b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  0002c020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f6c7  00000000  00000000  0002c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007bc1  00000000  00000000  0003bce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005aacf  00000000  00000000  000438a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009e377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef4  00000000  00000000  0009e3f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003a7b  00000000  00000000  0009f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001de8 	.word	0x08001de8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001de8 	.word	0x08001de8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000244:	b500      	push	{lr}
 8000246:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000248:	4a09      	ldr	r2, [pc, #36]	; (8000270 <MX_DMA_Init+0x2c>)
 800024a:	6951      	ldr	r1, [r2, #20]
 800024c:	2301      	movs	r3, #1
 800024e:	4319      	orrs	r1, r3
 8000250:	6151      	str	r1, [r2, #20]
 8000252:	6952      	ldr	r2, [r2, #20]
 8000254:	4013      	ands	r3, r2
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800025a:	2200      	movs	r2, #0
 800025c:	2100      	movs	r1, #0
 800025e:	200a      	movs	r0, #10
 8000260:	f000 fa08 	bl	8000674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000264:	200a      	movs	r0, #10
 8000266:	f000 fa37 	bl	80006d8 <HAL_NVIC_EnableIRQ>

}
 800026a:	b003      	add	sp, #12
 800026c:	bd00      	pop	{pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	40021000 	.word	0x40021000

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b510      	push	{r4, lr}
 8000276:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	2214      	movs	r2, #20
 800027a:	2100      	movs	r1, #0
 800027c:	a803      	add	r0, sp, #12
 800027e:	f001 fdab 	bl	8001dd8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <MX_GPIO_Init+0x5c>)
 8000284:	6959      	ldr	r1, [r3, #20]
 8000286:	2080      	movs	r0, #128	; 0x80
 8000288:	03c0      	lsls	r0, r0, #15
 800028a:	4301      	orrs	r1, r0
 800028c:	6159      	str	r1, [r3, #20]
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	4002      	ands	r2, r0
 8000292:	9201      	str	r2, [sp, #4]
 8000294:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	400b      	ands	r3, r1
 80002a4:	9302      	str	r3, [sp, #8]
 80002a6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT_Pin|USR_LED_Pin, GPIO_PIN_RESET);
 80002a8:	2490      	movs	r4, #144	; 0x90
 80002aa:	05e4      	lsls	r4, r4, #23
 80002ac:	2200      	movs	r2, #0
 80002ae:	2109      	movs	r1, #9
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 fc5b 	bl	8000b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_OUT_Pin|USR_LED_Pin;
 80002b6:	2309      	movs	r3, #9
 80002b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	3b08      	subs	r3, #8
 80002bc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	a903      	add	r1, sp, #12
 80002c6:	0020      	movs	r0, r4
 80002c8:	f000 fb4a 	bl	8000960 <HAL_GPIO_Init>

}
 80002cc:	b008      	add	sp, #32
 80002ce:	bd10      	pop	{r4, pc}
 80002d0:	40021000 	.word	0x40021000

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d8:	2228      	movs	r2, #40	; 0x28
 80002da:	2100      	movs	r1, #0
 80002dc:	a80a      	add	r0, sp, #40	; 0x28
 80002de:	f001 fd7b 	bl	8001dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	2210      	movs	r2, #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	a804      	add	r0, sp, #16
 80002e8:	f001 fd76 	bl	8001dd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	2210      	movs	r2, #16
 80002ee:	2100      	movs	r1, #0
 80002f0:	4668      	mov	r0, sp
 80002f2:	f001 fd71 	bl	8001dd8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2501      	movs	r5, #1
 80002f8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fc:	2402      	movs	r4, #2
 80002fe:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	035b      	lsls	r3, r3, #13
 800030a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	a808      	add	r0, sp, #32
 800030e:	f000 fc3b 	bl	8000b88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	2307      	movs	r3, #7
 8000314:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2400      	movs	r4, #0
 800031a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031e:	2101      	movs	r1, #1
 8000320:	a804      	add	r0, sp, #16
 8000322:	f000 fecf 	bl	80010c4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000326:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000328:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032a:	4668      	mov	r0, sp
 800032c:	f000 ff76 	bl	800121c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000330:	b015      	add	sp, #84	; 0x54
 8000332:	bd30      	pop	{r4, r5, pc}

08000334 <main>:
{
 8000334:	b530      	push	{r4, r5, lr}
 8000336:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000338:	f000 f97a 	bl	8000630 <HAL_Init>
  SystemClock_Config();
 800033c:	f7ff ffca 	bl	80002d4 <SystemClock_Config>
  MX_GPIO_Init();
 8000340:	f7ff ff98 	bl	8000274 <MX_GPIO_Init>
  MX_DMA_Init();
 8000344:	f7ff ff7e 	bl	8000244 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000348:	f000 f8ae 	bl	80004a8 <MX_USART1_UART_Init>
	char txData[30] = "UART DMA Test\n\r";
 800034c:	466c      	mov	r4, sp
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <main+0x50>)
 8000350:	0022      	movs	r2, r4
 8000352:	cb23      	ldmia	r3!, {r0, r1, r5}
 8000354:	c223      	stmia	r2!, {r0, r1, r5}
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	220e      	movs	r2, #14
 800035c:	2100      	movs	r1, #0
 800035e:	a804      	add	r0, sp, #16
 8000360:	f001 fd3a 	bl	8001dd8 <memset>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)rxData, 1);
 8000364:	4d08      	ldr	r5, [pc, #32]	; (8000388 <main+0x54>)
 8000366:	2201      	movs	r2, #1
 8000368:	4908      	ldr	r1, [pc, #32]	; (800038c <main+0x58>)
 800036a:	0028      	movs	r0, r5
 800036c:	f001 fcd6 	bl	8001d1c <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, (uint8_t*)txData, strlen(txData), 10);
 8000370:	0020      	movs	r0, r4
 8000372:	f7ff fed3 	bl	800011c <strlen>
 8000376:	b282      	uxth	r2, r0
 8000378:	230a      	movs	r3, #10
 800037a:	0021      	movs	r1, r4
 800037c:	0028      	movs	r0, r5
 800037e:	f001 fb89 	bl	8001a94 <HAL_UART_Transmit>
 8000382:	e7fe      	b.n	8000382 <main+0x4e>
 8000384:	08001e00 	.word	0x08001e00
 8000388:	20000088 	.word	0x20000088
 800038c:	20000028 	.word	0x20000028

08000390 <processUART>:
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)rxData, 1);
}

int processUART(char data)
{
 8000390:	b510      	push	{r4, lr}
	if((data != 0x0D) && (data != 0x0A))
 8000392:	280d      	cmp	r0, #13
 8000394:	d012      	beq.n	80003bc <processUART+0x2c>
 8000396:	280a      	cmp	r0, #10
 8000398:	d010      	beq.n	80003bc <processUART+0x2c>
	{
		rxBuffer[rxIndex] = data;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <processUART+0x48>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <processUART+0x4c>)
 80003a0:	54d0      	strb	r0, [r2, r3]
		if(rxIndex <= 3)
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d805      	bhi.n	80003b2 <processUART+0x22>
		{
			tempBuf[tempIndex] = data;
 80003a6:	490e      	ldr	r1, [pc, #56]	; (80003e0 <processUART+0x50>)
 80003a8:	780a      	ldrb	r2, [r1, #0]
 80003aa:	4c0e      	ldr	r4, [pc, #56]	; (80003e4 <processUART+0x54>)
 80003ac:	54a0      	strb	r0, [r4, r2]
			tempIndex++;
 80003ae:	3201      	adds	r2, #1
 80003b0:	700a      	strb	r2, [r1, #0]
		}
		rxIndex++;
 80003b2:	3301      	adds	r3, #1
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <processUART+0x48>)
 80003b6:	7013      	strb	r3, [r2, #0]
		return 0;
 80003b8:	2000      	movs	r0, #0
 80003ba:	e00b      	b.n	80003d4 <processUART+0x44>
	}
	else
	{
		rxBuffer[rxIndex] = '\0';
 80003bc:	4906      	ldr	r1, [pc, #24]	; (80003d8 <processUART+0x48>)
 80003be:	780a      	ldrb	r2, [r1, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <processUART+0x4c>)
 80003c4:	5483      	strb	r3, [r0, r2]
		tempBuf[tempIndex] = '\0';
 80003c6:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <processUART+0x50>)
 80003c8:	7810      	ldrb	r0, [r2, #0]
 80003ca:	4c06      	ldr	r4, [pc, #24]	; (80003e4 <processUART+0x54>)
 80003cc:	5423      	strb	r3, [r4, r0]
		rxIndex = 0;
 80003ce:	700b      	strb	r3, [r1, #0]
		tempIndex = 0;
 80003d0:	7013      	strb	r3, [r2, #0]
		return 1;
 80003d2:	2001      	movs	r0, #1
	}
}
 80003d4:	bd10      	pop	{r4, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	20000040 	.word	0x20000040
 80003dc:	20000034 	.word	0x20000034
 80003e0:	20000041 	.word	0x20000041
 80003e4:	2000002c 	.word	0x2000002c

080003e8 <HAL_UART_RxCpltCallback>:
{
 80003e8:	b500      	push	{lr}
 80003ea:	b083      	sub	sp, #12
	volatile char data = rxData[0];
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_UART_RxCpltCallback+0x44>)
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	466b      	mov	r3, sp
 80003f2:	71da      	strb	r2, [r3, #7]
	rxComplete = processUART(data);
 80003f4:	79d8      	ldrb	r0, [r3, #7]
 80003f6:	b2c0      	uxtb	r0, r0
 80003f8:	f7ff ffca 	bl	8000390 <processUART>
 80003fc:	b2c0      	uxtb	r0, r0
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_UART_RxCpltCallback+0x48>)
 8000400:	7018      	strb	r0, [r3, #0]
	if(rxComplete == HIGH)
 8000402:	2801      	cmp	r0, #1
 8000404:	d006      	beq.n	8000414 <HAL_UART_RxCpltCallback+0x2c>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)rxData, 1);
 8000406:	2201      	movs	r2, #1
 8000408:	4908      	ldr	r1, [pc, #32]	; (800042c <HAL_UART_RxCpltCallback+0x44>)
 800040a:	480a      	ldr	r0, [pc, #40]	; (8000434 <HAL_UART_RxCpltCallback+0x4c>)
 800040c:	f001 fc86 	bl	8001d1c <HAL_UART_Receive_DMA>
}
 8000410:	b003      	add	sp, #12
 8000412:	bd00      	pop	{pc}
		if(strcmp(tempBuf, "ADC:") == 0)
 8000414:	4908      	ldr	r1, [pc, #32]	; (8000438 <HAL_UART_RxCpltCallback+0x50>)
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <HAL_UART_RxCpltCallback+0x54>)
 8000418:	f7ff fe76 	bl	8000108 <strcmp>
 800041c:	2800      	cmp	r0, #0
 800041e:	d1f2      	bne.n	8000406 <HAL_UART_RxCpltCallback+0x1e>
			HAL_GPIO_TogglePin(GPIOA, USR_LED_Pin|LED_OUT_Pin);
 8000420:	3090      	adds	r0, #144	; 0x90
 8000422:	2109      	movs	r1, #9
 8000424:	05c0      	lsls	r0, r0, #23
 8000426:	f000 fba7 	bl	8000b78 <HAL_GPIO_TogglePin>
 800042a:	e7ec      	b.n	8000406 <HAL_UART_RxCpltCallback+0x1e>
 800042c:	20000028 	.word	0x20000028
 8000430:	2000002a 	.word	0x2000002a
 8000434:	20000088 	.word	0x20000088
 8000438:	08001e40 	.word	0x08001e40
 800043c:	2000002c 	.word	0x2000002c

08000440 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000440:	4770      	bx	lr
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_MspInit+0x2c>)
 8000448:	6999      	ldr	r1, [r3, #24]
 800044a:	2201      	movs	r2, #1
 800044c:	4311      	orrs	r1, r2
 800044e:	6199      	str	r1, [r3, #24]
 8000450:	6999      	ldr	r1, [r3, #24]
 8000452:	400a      	ands	r2, r1
 8000454:	9200      	str	r2, [sp, #0]
 8000456:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000458:	69da      	ldr	r2, [r3, #28]
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	0549      	lsls	r1, r1, #21
 800045e:	430a      	orrs	r2, r1
 8000460:	61da      	str	r2, [r3, #28]
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	400b      	ands	r3, r1
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	b002      	add	sp, #8
 800046c:	4770      	bx	lr
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000

08000474 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000474:	4770      	bx	lr

08000476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler>

08000478 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000478:	4770      	bx	lr

0800047a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047e:	f000 f8e7 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000482:	bd10      	pop	{r4, pc}

08000484 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000484:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000486:	4802      	ldr	r0, [pc, #8]	; (8000490 <DMA1_Channel2_3_IRQHandler+0xc>)
 8000488:	f000 fa14 	bl	80008b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	20000044 	.word	0x20000044

08000494 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000494:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000496:	4802      	ldr	r0, [pc, #8]	; (80004a0 <USART1_IRQHandler+0xc>)
 8000498:	f000 ffc2 	bl	8001420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	20000088 	.word	0x20000088

080004a4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004a4:	4770      	bx	lr
	...

080004a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80004a8:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_USART1_UART_Init+0x34>)
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART1_UART_Init+0x38>)
 80004ae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80004b0:	23e1      	movs	r3, #225	; 0xe1
 80004b2:	025b      	lsls	r3, r3, #9
 80004b4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004b6:	2300      	movs	r3, #0
 80004b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004bc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004be:	220c      	movs	r2, #12
 80004c0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ca:	f001 fb99 	bl	8001c00 <HAL_UART_Init>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	d100      	bne.n	80004d4 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80004d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80004d4:	f7ff ffb4 	bl	8000440 <Error_Handler>
}
 80004d8:	e7fb      	b.n	80004d2 <MX_USART1_UART_Init+0x2a>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000088 	.word	0x20000088
 80004e0:	40013800 	.word	0x40013800

080004e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004e4:	b510      	push	{r4, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	2214      	movs	r2, #20
 80004ec:	2100      	movs	r1, #0
 80004ee:	a803      	add	r0, sp, #12
 80004f0:	f001 fc72 	bl	8001dd8 <memset>
  if(uartHandle->Instance==USART1)
 80004f4:	4b22      	ldr	r3, [pc, #136]	; (8000580 <HAL_UART_MspInit+0x9c>)
 80004f6:	6822      	ldr	r2, [r4, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d001      	beq.n	8000500 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80004fc:	b008      	add	sp, #32
 80004fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <HAL_UART_MspInit+0xa0>)
 8000502:	6999      	ldr	r1, [r3, #24]
 8000504:	2080      	movs	r0, #128	; 0x80
 8000506:	01c0      	lsls	r0, r0, #7
 8000508:	4301      	orrs	r1, r0
 800050a:	6199      	str	r1, [r3, #24]
 800050c:	699a      	ldr	r2, [r3, #24]
 800050e:	4002      	ands	r2, r0
 8000510:	9201      	str	r2, [sp, #4]
 8000512:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0289      	lsls	r1, r1, #10
 800051a:	430a      	orrs	r2, r1
 800051c:	615a      	str	r2, [r3, #20]
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	400b      	ands	r3, r1
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000526:	23c0      	movs	r3, #192	; 0xc0
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000530:	3301      	adds	r3, #1
 8000532:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000534:	3b02      	subs	r3, #2
 8000536:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	2090      	movs	r0, #144	; 0x90
 800053a:	a903      	add	r1, sp, #12
 800053c:	05c0      	lsls	r0, r0, #23
 800053e:	f000 fa0f 	bl	8000960 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000542:	4811      	ldr	r0, [pc, #68]	; (8000588 <HAL_UART_MspInit+0xa4>)
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_UART_MspInit+0xa8>)
 8000546:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000548:	2300      	movs	r3, #0
 800054a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800054c:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	60c2      	str	r2, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000552:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000554:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000556:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000558:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800055a:	f000 f8e5 	bl	8000728 <HAL_DMA_Init>
 800055e:	2800      	cmp	r0, #0
 8000560:	d10b      	bne.n	800057a <HAL_UART_MspInit+0x96>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_UART_MspInit+0xa4>)
 8000564:	6723      	str	r3, [r4, #112]	; 0x70
 8000566:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	201b      	movs	r0, #27
 800056e:	f000 f881 	bl	8000674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000572:	201b      	movs	r0, #27
 8000574:	f000 f8b0 	bl	80006d8 <HAL_NVIC_EnableIRQ>
}
 8000578:	e7c0      	b.n	80004fc <HAL_UART_MspInit+0x18>
      Error_Handler();
 800057a:	f7ff ff61 	bl	8000440 <Error_Handler>
 800057e:	e7f0      	b.n	8000562 <HAL_UART_MspInit+0x7e>
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000
 8000588:	20000044 	.word	0x20000044
 800058c:	40020030 	.word	0x40020030

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490e      	ldr	r1, [pc, #56]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0b      	ldr	r4, [pc, #44]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ba:	f7ff ff73 	bl	80004a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005be:	f001 fbe7 	bl	8001d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff feb7 	bl	8000334 <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d4:	08001e68 	.word	0x08001e68
  ldr r2, =_sbss
 80005d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005dc:	20000110 	.word	0x20000110

080005e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_IRQHandler>
	...

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b510      	push	{r4, lr}
 80005e6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_InitTick+0x40>)
 80005ea:	7819      	ldrb	r1, [r3, #0]
 80005ec:	20fa      	movs	r0, #250	; 0xfa
 80005ee:	0080      	lsls	r0, r0, #2
 80005f0:	f7ff fd9c 	bl	800012c <__udivsi3>
 80005f4:	0001      	movs	r1, r0
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_InitTick+0x44>)
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	f7ff fd97 	bl	800012c <__udivsi3>
 80005fe:	f000 f877 	bl	80006f0 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	2800      	cmp	r0, #0
 8000606:	d101      	bne.n	800060c <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	2c03      	cmp	r4, #3
 800060a:	d901      	bls.n	8000610 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800060c:	0018      	movs	r0, r3
 800060e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	3001      	adds	r0, #1
 8000612:	2200      	movs	r2, #0
 8000614:	0021      	movs	r1, r4
 8000616:	4240      	negs	r0, r0
 8000618:	f000 f82c 	bl	8000674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <HAL_InitTick+0x48>)
 800061e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
 8000622:	e7f3      	b.n	800060c <HAL_InitTick+0x28>
 8000624:	20000004 	.word	0x20000004
 8000628:	20000000 	.word	0x20000000
 800062c:	20000008 	.word	0x20000008

08000630 <HAL_Init>:
{
 8000630:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000632:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_Init+0x1c>)
 8000634:	6813      	ldr	r3, [r2, #0]
 8000636:	2110      	movs	r1, #16
 8000638:	430b      	orrs	r3, r1
 800063a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ffd1 	bl	80005e4 <HAL_InitTick>
  HAL_MspInit();
 8000642:	f7ff feff 	bl	8000444 <HAL_MspInit>
}
 8000646:	2000      	movs	r0, #0
 8000648:	bd10      	pop	{r4, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	6811      	ldr	r1, [r2, #0]
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_IncTick+0x14>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	185b      	adds	r3, r3, r1
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	2000010c 	.word	0x2000010c
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	2000010c 	.word	0x2000010c

08000674 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000674:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000676:	2800      	cmp	r0, #0
 8000678:	db14      	blt.n	80006a4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800067a:	0884      	lsrs	r4, r0, #2
 800067c:	00a4      	lsls	r4, r4, #2
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_NVIC_SetPriority+0x5c>)
 8000680:	469c      	mov	ip, r3
 8000682:	4464      	add	r4, ip
 8000684:	26c0      	movs	r6, #192	; 0xc0
 8000686:	00b6      	lsls	r6, r6, #2
 8000688:	59a5      	ldr	r5, [r4, r6]
 800068a:	2203      	movs	r2, #3
 800068c:	4010      	ands	r0, r2
 800068e:	00c0      	lsls	r0, r0, #3
 8000690:	23ff      	movs	r3, #255	; 0xff
 8000692:	001a      	movs	r2, r3
 8000694:	4082      	lsls	r2, r0
 8000696:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000698:	0189      	lsls	r1, r1, #6
 800069a:	400b      	ands	r3, r1
 800069c:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800069e:	432b      	orrs	r3, r5
 80006a0:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a4:	b2c0      	uxtb	r0, r0
 80006a6:	220f      	movs	r2, #15
 80006a8:	4002      	ands	r2, r0
 80006aa:	3a08      	subs	r2, #8
 80006ac:	0892      	lsrs	r2, r2, #2
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_NVIC_SetPriority+0x60>)
 80006b2:	18d3      	adds	r3, r2, r3
 80006b4:	69dd      	ldr	r5, [r3, #28]
 80006b6:	2403      	movs	r4, #3
 80006b8:	4020      	ands	r0, r4
 80006ba:	00c0      	lsls	r0, r0, #3
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	0014      	movs	r4, r2
 80006c0:	4084      	lsls	r4, r0
 80006c2:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006c4:	0189      	lsls	r1, r1, #6
 80006c6:	4011      	ands	r1, r2
 80006c8:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ca:	4329      	orrs	r1, r5
 80006cc:	61d9      	str	r1, [r3, #28]
 80006ce:	e7e8      	b.n	80006a2 <HAL_NVIC_SetPriority+0x2e>
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006d8:	2800      	cmp	r0, #0
 80006da:	db05      	blt.n	80006e8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006dc:	231f      	movs	r3, #31
 80006de:	4018      	ands	r0, r3
 80006e0:	3b1e      	subs	r3, #30
 80006e2:	4083      	lsls	r3, r0
 80006e4:	4a01      	ldr	r2, [pc, #4]	; (80006ec <HAL_NVIC_EnableIRQ+0x14>)
 80006e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006e8:	4770      	bx	lr
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	1e43      	subs	r3, r0, #1
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f4:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d80e      	bhi.n	8000718 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <HAL_SYSTICK_Config+0x30>)
 80006fc:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <HAL_SYSTICK_Config+0x34>)
 8000700:	6a03      	ldr	r3, [r0, #32]
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	21c0      	movs	r1, #192	; 0xc0
 8000708:	0609      	lsls	r1, r1, #24
 800070a:	430b      	orrs	r3, r1
 800070c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070e:	2300      	movs	r3, #0
 8000710:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	3307      	adds	r3, #7
 8000714:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000716:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000718:	4770      	bx	lr
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	00ffffff 	.word	0x00ffffff
 8000720:	e000e010 	.word	0xe000e010
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 800072c:	2001      	movs	r0, #1
  if(NULL == hdma)
 800072e:	2c00      	cmp	r4, #0
 8000730:	d028      	beq.n	8000784 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000732:	2521      	movs	r5, #33	; 0x21
 8000734:	2302      	movs	r3, #2
 8000736:	5563      	strb	r3, [r4, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000738:	6821      	ldr	r1, [r4, #0]
 800073a:	680b      	ldr	r3, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800073c:	4a12      	ldr	r2, [pc, #72]	; (8000788 <HAL_DMA_Init+0x60>)
 800073e:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000740:	6863      	ldr	r3, [r4, #4]
 8000742:	68a0      	ldr	r0, [r4, #8]
 8000744:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000746:	68e0      	ldr	r0, [r4, #12]
 8000748:	4303      	orrs	r3, r0
 800074a:	6920      	ldr	r0, [r4, #16]
 800074c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800074e:	6960      	ldr	r0, [r4, #20]
 8000750:	4303      	orrs	r3, r0
 8000752:	69a0      	ldr	r0, [r4, #24]
 8000754:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000756:	69e0      	ldr	r0, [r4, #28]
 8000758:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800075a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800075c:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800075e:	6823      	ldr	r3, [r4, #0]
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_DMA_Init+0x64>)
 8000762:	4694      	mov	ip, r2
 8000764:	4463      	add	r3, ip
 8000766:	0018      	movs	r0, r3
 8000768:	2114      	movs	r1, #20
 800076a:	f7ff fcdf 	bl	800012c <__udivsi3>
 800076e:	0080      	lsls	r0, r0, #2
 8000770:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_DMA_Init+0x68>)
 8000774:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000776:	2300      	movs	r3, #0
 8000778:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800077a:	2201      	movs	r2, #1
 800077c:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 800077e:	321f      	adds	r2, #31
 8000780:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000782:	2000      	movs	r0, #0
}  
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	ffffc00f 	.word	0xffffc00f
 800078c:	bffdfff8 	.word	0xbffdfff8
 8000790:	40020000 	.word	0x40020000

08000794 <HAL_DMA_Start_IT>:
{
 8000794:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000796:	2420      	movs	r4, #32
 8000798:	5d04      	ldrb	r4, [r0, r4]
 800079a:	2c01      	cmp	r4, #1
 800079c:	d041      	beq.n	8000822 <HAL_DMA_Start_IT+0x8e>
 800079e:	2420      	movs	r4, #32
 80007a0:	2501      	movs	r5, #1
 80007a2:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 80007a4:	3401      	adds	r4, #1
 80007a6:	5d04      	ldrb	r4, [r0, r4]
 80007a8:	2c01      	cmp	r4, #1
 80007aa:	d004      	beq.n	80007b6 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80007ac:	2320      	movs	r3, #32
 80007ae:	2200      	movs	r2, #0
 80007b0:	54c2      	strb	r2, [r0, r3]
    status = HAL_BUSY;
 80007b2:	2002      	movs	r0, #2
} 
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 80007b6:	3420      	adds	r4, #32
 80007b8:	3501      	adds	r5, #1
 80007ba:	5505      	strb	r5, [r0, r4]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007bc:	2400      	movs	r4, #0
 80007be:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80007c0:	6806      	ldr	r6, [r0, #0]
 80007c2:	6835      	ldr	r5, [r6, #0]
 80007c4:	3401      	adds	r4, #1
 80007c6:	43a5      	bics	r5, r4
 80007c8:	6035      	str	r5, [r6, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80007ca:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80007cc:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80007ce:	40b4      	lsls	r4, r6
 80007d0:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 80007d2:	6804      	ldr	r4, [r0, #0]
 80007d4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007d6:	6843      	ldr	r3, [r0, #4]
 80007d8:	2b10      	cmp	r3, #16
 80007da:	d012      	beq.n	8000802 <HAL_DMA_Start_IT+0x6e>
    hdma->Instance->CPAR = SrcAddress;
 80007dc:	6803      	ldr	r3, [r0, #0]
 80007de:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80007e0:	6803      	ldr	r3, [r0, #0]
 80007e2:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80007e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d010      	beq.n	800080c <HAL_DMA_Start_IT+0x78>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007ea:	6802      	ldr	r2, [r0, #0]
 80007ec:	6813      	ldr	r3, [r2, #0]
 80007ee:	210e      	movs	r1, #14
 80007f0:	430b      	orrs	r3, r1
 80007f2:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80007f4:	6802      	ldr	r2, [r0, #0]
 80007f6:	6813      	ldr	r3, [r2, #0]
 80007f8:	2101      	movs	r1, #1
 80007fa:	430b      	orrs	r3, r1
 80007fc:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80007fe:	2000      	movs	r0, #0
 8000800:	e7d8      	b.n	80007b4 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8000802:	6803      	ldr	r3, [r0, #0]
 8000804:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000806:	6803      	ldr	r3, [r0, #0]
 8000808:	60d9      	str	r1, [r3, #12]
 800080a:	e7eb      	b.n	80007e4 <HAL_DMA_Start_IT+0x50>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800080c:	6802      	ldr	r2, [r0, #0]
 800080e:	6813      	ldr	r3, [r2, #0]
 8000810:	210a      	movs	r1, #10
 8000812:	430b      	orrs	r3, r1
 8000814:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000816:	6802      	ldr	r2, [r0, #0]
 8000818:	6813      	ldr	r3, [r2, #0]
 800081a:	3906      	subs	r1, #6
 800081c:	438b      	bics	r3, r1
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e7e8      	b.n	80007f4 <HAL_DMA_Start_IT+0x60>
  __HAL_LOCK(hdma);
 8000822:	2002      	movs	r0, #2
 8000824:	e7c6      	b.n	80007b4 <HAL_DMA_Start_IT+0x20>

08000826 <HAL_DMA_Abort>:
{
 8000826:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000828:	2321      	movs	r3, #33	; 0x21
 800082a:	5cc3      	ldrb	r3, [r0, r3]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d006      	beq.n	800083e <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000830:	2304      	movs	r3, #4
 8000832:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000834:	331c      	adds	r3, #28
 8000836:	2200      	movs	r2, #0
 8000838:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800083a:	2001      	movs	r0, #1
}
 800083c:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800083e:	6802      	ldr	r2, [r0, #0]
 8000840:	6813      	ldr	r3, [r2, #0]
 8000842:	210e      	movs	r1, #14
 8000844:	438b      	bics	r3, r1
 8000846:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000848:	6801      	ldr	r1, [r0, #0]
 800084a:	680a      	ldr	r2, [r1, #0]
 800084c:	2301      	movs	r3, #1
 800084e:	439a      	bics	r2, r3
 8000850:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000852:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000854:	0019      	movs	r1, r3
 8000856:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000858:	40a1      	lsls	r1, r4
 800085a:	6051      	str	r1, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 800085c:	2221      	movs	r2, #33	; 0x21
 800085e:	5483      	strb	r3, [r0, r2]
  __HAL_UNLOCK(hdma);
 8000860:	331f      	adds	r3, #31
 8000862:	2200      	movs	r2, #0
 8000864:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000866:	2000      	movs	r0, #0
 8000868:	e7e8      	b.n	800083c <HAL_DMA_Abort+0x16>

0800086a <HAL_DMA_Abort_IT>:
{  
 800086a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800086c:	2321      	movs	r3, #33	; 0x21
 800086e:	5cc3      	ldrb	r3, [r0, r3]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d003      	beq.n	800087c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000874:	2304      	movs	r3, #4
 8000876:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000878:	2001      	movs	r0, #1
}
 800087a:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800087c:	6802      	ldr	r2, [r0, #0]
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	210e      	movs	r1, #14
 8000882:	438b      	bics	r3, r1
 8000884:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000886:	6801      	ldr	r1, [r0, #0]
 8000888:	680a      	ldr	r2, [r1, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	439a      	bics	r2, r3
 800088e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000890:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000892:	0019      	movs	r1, r3
 8000894:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000896:	40a1      	lsls	r1, r4
 8000898:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800089a:	2221      	movs	r2, #33	; 0x21
 800089c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800089e:	331f      	adds	r3, #31
 80008a0:	2200      	movs	r2, #0
 80008a2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80008a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80008aa:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008ac:	2000      	movs	r0, #0
 80008ae:	e7e4      	b.n	800087a <HAL_DMA_Abort_IT+0x10>
 80008b0:	2000      	movs	r0, #0
 80008b2:	e7e2      	b.n	800087a <HAL_DMA_Abort_IT+0x10>

080008b4 <HAL_DMA_IRQHandler>:
{
 80008b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008b6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80008b8:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80008ba:	6804      	ldr	r4, [r0, #0]
 80008bc:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80008be:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80008c0:	2304      	movs	r3, #4
 80008c2:	408b      	lsls	r3, r1
 80008c4:	421a      	tst	r2, r3
 80008c6:	d012      	beq.n	80008ee <HAL_DMA_IRQHandler+0x3a>
 80008c8:	076b      	lsls	r3, r5, #29
 80008ca:	d510      	bpl.n	80008ee <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	069b      	lsls	r3, r3, #26
 80008d0:	d403      	bmi.n	80008da <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	2204      	movs	r2, #4
 80008d6:	4393      	bics	r3, r2
 80008d8:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80008da:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80008dc:	2304      	movs	r3, #4
 80008de:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80008e0:	408b      	lsls	r3, r1
 80008e2:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80008e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d000      	beq.n	80008ec <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 80008ea:	4798      	blx	r3
}  
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80008ee:	2302      	movs	r3, #2
 80008f0:	408b      	lsls	r3, r1
 80008f2:	421a      	tst	r2, r3
 80008f4:	d018      	beq.n	8000928 <HAL_DMA_IRQHandler+0x74>
 80008f6:	07ab      	lsls	r3, r5, #30
 80008f8:	d516      	bpl.n	8000928 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	069b      	lsls	r3, r3, #26
 80008fe:	d406      	bmi.n	800090e <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	220a      	movs	r2, #10
 8000904:	4393      	bics	r3, r2
 8000906:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000908:	2321      	movs	r3, #33	; 0x21
 800090a:	3a09      	subs	r2, #9
 800090c:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800090e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000910:	2302      	movs	r3, #2
 8000912:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000914:	408b      	lsls	r3, r1
 8000916:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000918:	2320      	movs	r3, #32
 800091a:	2200      	movs	r2, #0
 800091c:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 800091e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0e3      	beq.n	80008ec <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8000924:	4798      	blx	r3
 8000926:	e7e1      	b.n	80008ec <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000928:	2308      	movs	r3, #8
 800092a:	408b      	lsls	r3, r1
 800092c:	421a      	tst	r2, r3
 800092e:	d0dd      	beq.n	80008ec <HAL_DMA_IRQHandler+0x38>
 8000930:	072b      	lsls	r3, r5, #28
 8000932:	d5db      	bpl.n	80008ec <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000934:	6823      	ldr	r3, [r4, #0]
 8000936:	220e      	movs	r2, #14
 8000938:	4393      	bics	r3, r2
 800093a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800093c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800093e:	2301      	movs	r3, #1
 8000940:	0019      	movs	r1, r3
 8000942:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000944:	40a1      	lsls	r1, r4
 8000946:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000948:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800094a:	2221      	movs	r2, #33	; 0x21
 800094c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 800094e:	331f      	adds	r3, #31
 8000950:	2200      	movs	r2, #0
 8000952:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000954:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0c8      	beq.n	80008ec <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 800095a:	4798      	blx	r3
}  
 800095c:	e7c6      	b.n	80008ec <HAL_DMA_IRQHandler+0x38>
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	46de      	mov	lr, fp
 8000964:	4657      	mov	r7, sl
 8000966:	464e      	mov	r6, r9
 8000968:	4645      	mov	r5, r8
 800096a:	b5e0      	push	{r5, r6, r7, lr}
 800096c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	680a      	ldr	r2, [r1, #0]
 8000970:	2a00      	cmp	r2, #0
 8000972:	d100      	bne.n	8000976 <HAL_GPIO_Init+0x16>
 8000974:	e0e7      	b.n	8000b46 <HAL_GPIO_Init+0x1e6>
  uint32_t position = 0x00u;
 8000976:	2300      	movs	r3, #0

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000978:	2503      	movs	r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800097a:	24c0      	movs	r4, #192	; 0xc0
 800097c:	02a4      	lsls	r4, r4, #10
 800097e:	46a0      	mov	r8, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000980:	4c74      	ldr	r4, [pc, #464]	; (8000b54 <HAL_GPIO_Init+0x1f4>)
 8000982:	1904      	adds	r4, r0, r4
 8000984:	4266      	negs	r6, r4
 8000986:	4166      	adcs	r6, r4
 8000988:	4274      	negs	r4, r6
 800098a:	9401      	str	r4, [sp, #4]
 800098c:	e050      	b.n	8000a30 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 800098e:	6882      	ldr	r2, [r0, #8]
 8000990:	005e      	lsls	r6, r3, #1
 8000992:	46b3      	mov	fp, r6
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000994:	002e      	movs	r6, r5
 8000996:	465f      	mov	r7, fp
 8000998:	40be      	lsls	r6, r7
 800099a:	43b2      	bics	r2, r6
 800099c:	4692      	mov	sl, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 800099e:	68ca      	ldr	r2, [r1, #12]
 80009a0:	40ba      	lsls	r2, r7
 80009a2:	4656      	mov	r6, sl
 80009a4:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80009a6:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80009a8:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009aa:	464e      	mov	r6, r9
 80009ac:	43b2      	bics	r2, r6
 80009ae:	4691      	mov	r9, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009b0:	684a      	ldr	r2, [r1, #4]
 80009b2:	0912      	lsrs	r2, r2, #4
 80009b4:	2601      	movs	r6, #1
 80009b6:	4032      	ands	r2, r6
 80009b8:	409a      	lsls	r2, r3
 80009ba:	464e      	mov	r6, r9
 80009bc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80009be:	6042      	str	r2, [r0, #4]
 80009c0:	e040      	b.n	8000a44 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c2:	2600      	movs	r6, #0
 80009c4:	46b1      	mov	r9, r6
 80009c6:	464f      	mov	r7, r9
 80009c8:	465e      	mov	r6, fp
 80009ca:	40b7      	lsls	r7, r6
 80009cc:	46b9      	mov	r9, r7
 80009ce:	4657      	mov	r7, sl
 80009d0:	464e      	mov	r6, r9
 80009d2:	4337      	orrs	r7, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009d4:	6097      	str	r7, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009d6:	4a60      	ldr	r2, [pc, #384]	; (8000b58 <HAL_GPIO_Init+0x1f8>)
 80009d8:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 80009da:	43e6      	mvns	r6, r4
 80009dc:	46b1      	mov	r9, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009de:	684e      	ldr	r6, [r1, #4]
 80009e0:	03f6      	lsls	r6, r6, #15
 80009e2:	d500      	bpl.n	80009e6 <HAL_GPIO_Init+0x86>
 80009e4:	e0a7      	b.n	8000b36 <HAL_GPIO_Init+0x1d6>
        temp &= ~(iocurrent);
 80009e6:	464e      	mov	r6, r9
 80009e8:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80009ea:	4e5b      	ldr	r6, [pc, #364]	; (8000b58 <HAL_GPIO_Init+0x1f8>)
 80009ec:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 80009ee:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f0:	684e      	ldr	r6, [r1, #4]
 80009f2:	03b6      	lsls	r6, r6, #14
 80009f4:	d500      	bpl.n	80009f8 <HAL_GPIO_Init+0x98>
 80009f6:	e0a0      	b.n	8000b3a <HAL_GPIO_Init+0x1da>
        temp &= ~(iocurrent);
 80009f8:	464e      	mov	r6, r9
 80009fa:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80009fc:	4e56      	ldr	r6, [pc, #344]	; (8000b58 <HAL_GPIO_Init+0x1f8>)
 80009fe:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a00:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a02:	684e      	ldr	r6, [r1, #4]
 8000a04:	02f6      	lsls	r6, r6, #11
 8000a06:	d500      	bpl.n	8000a0a <HAL_GPIO_Init+0xaa>
 8000a08:	e099      	b.n	8000b3e <HAL_GPIO_Init+0x1de>
        temp &= ~(iocurrent);
 8000a0a:	464e      	mov	r6, r9
 8000a0c:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000a0e:	4e52      	ldr	r6, [pc, #328]	; (8000b58 <HAL_GPIO_Init+0x1f8>)
 8000a10:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8000a12:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a14:	684e      	ldr	r6, [r1, #4]
 8000a16:	02b6      	lsls	r6, r6, #10
 8000a18:	d500      	bpl.n	8000a1c <HAL_GPIO_Init+0xbc>
 8000a1a:	e092      	b.n	8000b42 <HAL_GPIO_Init+0x1e2>
        temp &= ~(iocurrent);
 8000a1c:	464c      	mov	r4, r9
 8000a1e:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000a20:	4c4d      	ldr	r4, [pc, #308]	; (8000b58 <HAL_GPIO_Init+0x1f8>)
 8000a22:	60e2      	str	r2, [r4, #12]
      }
    }

    position++;
 8000a24:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	680a      	ldr	r2, [r1, #0]
 8000a28:	0014      	movs	r4, r2
 8000a2a:	40dc      	lsrs	r4, r3
 8000a2c:	d100      	bne.n	8000a30 <HAL_GPIO_Init+0xd0>
 8000a2e:	e08a      	b.n	8000b46 <HAL_GPIO_Init+0x1e6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a30:	2401      	movs	r4, #1
 8000a32:	409c      	lsls	r4, r3
 8000a34:	46a1      	mov	r9, r4
 8000a36:	4014      	ands	r4, r2
    if (iocurrent != 0x00u)
 8000a38:	d0f4      	beq.n	8000a24 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a3a:	684a      	ldr	r2, [r1, #4]
 8000a3c:	402a      	ands	r2, r5
 8000a3e:	3a01      	subs	r2, #1
 8000a40:	2a01      	cmp	r2, #1
 8000a42:	d9a4      	bls.n	800098e <HAL_GPIO_Init+0x2e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a44:	684a      	ldr	r2, [r1, #4]
 8000a46:	402a      	ands	r2, r5
 8000a48:	2a03      	cmp	r2, #3
 8000a4a:	d02a      	beq.n	8000aa2 <HAL_GPIO_Init+0x142>
        temp = GPIOx->PUPDR;
 8000a4c:	68c2      	ldr	r2, [r0, #12]
 8000a4e:	005f      	lsls	r7, r3, #1
 8000a50:	46ba      	mov	sl, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a52:	002f      	movs	r7, r5
 8000a54:	4656      	mov	r6, sl
 8000a56:	40b7      	lsls	r7, r6
 8000a58:	43ba      	bics	r2, r7
 8000a5a:	4691      	mov	r9, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a5c:	688a      	ldr	r2, [r1, #8]
 8000a5e:	4656      	mov	r6, sl
 8000a60:	40b2      	lsls	r2, r6
 8000a62:	464e      	mov	r6, r9
 8000a64:	4332      	orrs	r2, r6
        GPIOx->PUPDR = temp;
 8000a66:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a68:	684a      	ldr	r2, [r1, #4]
 8000a6a:	402a      	ands	r2, r5
 8000a6c:	2a02      	cmp	r2, #2
 8000a6e:	d118      	bne.n	8000aa2 <HAL_GPIO_Init+0x142>
        temp = GPIOx->AFR[position >> 3u];
 8000a70:	08da      	lsrs	r2, r3, #3
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	1882      	adds	r2, r0, r2
 8000a76:	6a16      	ldr	r6, [r2, #32]
 8000a78:	46b2      	mov	sl, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a7a:	2607      	movs	r6, #7
 8000a7c:	401e      	ands	r6, r3
 8000a7e:	00b6      	lsls	r6, r6, #2
 8000a80:	46b1      	mov	r9, r6
 8000a82:	260f      	movs	r6, #15
 8000a84:	464f      	mov	r7, r9
 8000a86:	40be      	lsls	r6, r7
 8000a88:	46b3      	mov	fp, r6
 8000a8a:	4656      	mov	r6, sl
 8000a8c:	465f      	mov	r7, fp
 8000a8e:	43be      	bics	r6, r7
 8000a90:	46b2      	mov	sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a92:	690e      	ldr	r6, [r1, #16]
 8000a94:	464f      	mov	r7, r9
 8000a96:	40be      	lsls	r6, r7
 8000a98:	46b1      	mov	r9, r6
 8000a9a:	4656      	mov	r6, sl
 8000a9c:	464f      	mov	r7, r9
 8000a9e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000aa0:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8000aa2:	6806      	ldr	r6, [r0, #0]
 8000aa4:	005f      	lsls	r7, r3, #1
 8000aa6:	46ba      	mov	sl, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa8:	002f      	movs	r7, r5
 8000aaa:	4652      	mov	r2, sl
 8000aac:	4097      	lsls	r7, r2
 8000aae:	0032      	movs	r2, r6
 8000ab0:	43ba      	bics	r2, r7
 8000ab2:	4691      	mov	r9, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab4:	684a      	ldr	r2, [r1, #4]
 8000ab6:	402a      	ands	r2, r5
 8000ab8:	4657      	mov	r7, sl
 8000aba:	40ba      	lsls	r2, r7
 8000abc:	464f      	mov	r7, r9
 8000abe:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000ac0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac2:	684a      	ldr	r2, [r1, #4]
 8000ac4:	4647      	mov	r7, r8
 8000ac6:	423a      	tst	r2, r7
 8000ac8:	d0ac      	beq.n	8000a24 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4e24      	ldr	r6, [pc, #144]	; (8000b5c <HAL_GPIO_Init+0x1fc>)
 8000acc:	69b2      	ldr	r2, [r6, #24]
 8000ace:	2701      	movs	r7, #1
 8000ad0:	433a      	orrs	r2, r7
 8000ad2:	61b2      	str	r2, [r6, #24]
 8000ad4:	69b2      	ldr	r2, [r6, #24]
 8000ad6:	403a      	ands	r2, r7
 8000ad8:	9203      	str	r2, [sp, #12]
 8000ada:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000adc:	089a      	lsrs	r2, r3, #2
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	4e1f      	ldr	r6, [pc, #124]	; (8000b60 <HAL_GPIO_Init+0x200>)
 8000ae2:	46b1      	mov	r9, r6
 8000ae4:	444a      	add	r2, r9
 8000ae6:	6896      	ldr	r6, [r2, #8]
 8000ae8:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aea:	002f      	movs	r7, r5
 8000aec:	401f      	ands	r7, r3
 8000aee:	00be      	lsls	r6, r7, #2
 8000af0:	46b3      	mov	fp, r6
 8000af2:	260f      	movs	r6, #15
 8000af4:	0037      	movs	r7, r6
 8000af6:	465e      	mov	r6, fp
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	46ba      	mov	sl, r7
 8000afc:	464f      	mov	r7, r9
 8000afe:	4656      	mov	r6, sl
 8000b00:	43b7      	bics	r7, r6
 8000b02:	46ba      	mov	sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b04:	2690      	movs	r6, #144	; 0x90
 8000b06:	05f6      	lsls	r6, r6, #23
 8000b08:	42b0      	cmp	r0, r6
 8000b0a:	d100      	bne.n	8000b0e <HAL_GPIO_Init+0x1ae>
 8000b0c:	e759      	b.n	80009c2 <HAL_GPIO_Init+0x62>
 8000b0e:	4e15      	ldr	r6, [pc, #84]	; (8000b64 <HAL_GPIO_Init+0x204>)
 8000b10:	42b0      	cmp	r0, r6
 8000b12:	d00a      	beq.n	8000b2a <HAL_GPIO_Init+0x1ca>
 8000b14:	4e14      	ldr	r6, [pc, #80]	; (8000b68 <HAL_GPIO_Init+0x208>)
 8000b16:	42b0      	cmp	r0, r6
 8000b18:	d00a      	beq.n	8000b30 <HAL_GPIO_Init+0x1d0>
 8000b1a:	9e01      	ldr	r6, [sp, #4]
 8000b1c:	2701      	movs	r7, #1
 8000b1e:	43be      	bics	r6, r7
 8000b20:	46b1      	mov	r9, r6
 8000b22:	2605      	movs	r6, #5
 8000b24:	46b4      	mov	ip, r6
 8000b26:	44e1      	add	r9, ip
 8000b28:	e74d      	b.n	80009c6 <HAL_GPIO_Init+0x66>
 8000b2a:	2601      	movs	r6, #1
 8000b2c:	46b1      	mov	r9, r6
 8000b2e:	e74a      	b.n	80009c6 <HAL_GPIO_Init+0x66>
 8000b30:	2602      	movs	r6, #2
 8000b32:	46b1      	mov	r9, r6
 8000b34:	e747      	b.n	80009c6 <HAL_GPIO_Init+0x66>
          temp |= iocurrent;
 8000b36:	4322      	orrs	r2, r4
 8000b38:	e757      	b.n	80009ea <HAL_GPIO_Init+0x8a>
          temp |= iocurrent;
 8000b3a:	4322      	orrs	r2, r4
 8000b3c:	e75e      	b.n	80009fc <HAL_GPIO_Init+0x9c>
          temp |= iocurrent;
 8000b3e:	4322      	orrs	r2, r4
 8000b40:	e765      	b.n	8000a0e <HAL_GPIO_Init+0xae>
          temp |= iocurrent;
 8000b42:	4322      	orrs	r2, r4
 8000b44:	e76c      	b.n	8000a20 <HAL_GPIO_Init+0xc0>
  } 
}
 8000b46:	b005      	add	sp, #20
 8000b48:	bc3c      	pop	{r2, r3, r4, r5}
 8000b4a:	4690      	mov	r8, r2
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	46a2      	mov	sl, r4
 8000b50:	46ab      	mov	fp, r5
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b54:	b7fff400 	.word	0xb7fff400
 8000b58:	40010400 	.word	0x40010400
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010000 	.word	0x40010000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000800 	.word	0x48000800

08000b6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d101      	bne.n	8000b74 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b70:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000b72:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b74:	6181      	str	r1, [r0, #24]
 8000b76:	e7fc      	b.n	8000b72 <HAL_GPIO_WritePin+0x6>

08000b78 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b78:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	041b      	lsls	r3, r3, #16
 8000b80:	4391      	bics	r1, r2
 8000b82:	4319      	orrs	r1, r3
 8000b84:	6181      	str	r1, [r0, #24]
}
 8000b86:	4770      	bx	lr

08000b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	46ce      	mov	lr, r9
 8000b8c:	4647      	mov	r7, r8
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b083      	sub	sp, #12
 8000b92:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b94:	d100      	bne.n	8000b98 <HAL_RCC_OscConfig+0x10>
 8000b96:	e24c      	b.n	8001032 <HAL_RCC_OscConfig+0x4aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b98:	6803      	ldr	r3, [r0, #0]
 8000b9a:	07db      	lsls	r3, r3, #31
 8000b9c:	d527      	bpl.n	8000bee <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b9e:	4bb7      	ldr	r3, [pc, #732]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d018      	beq.n	8000bdc <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000baa:	4bb4      	ldr	r3, [pc, #720]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	230c      	movs	r3, #12
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d00e      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb6:	6863      	ldr	r3, [r4, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d03e      	beq.n	8000c3a <HAL_RCC_OscConfig+0xb2>
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d155      	bne.n	8000c6c <HAL_RCC_OscConfig+0xe4>
 8000bc0:	4bae      	ldr	r3, [pc, #696]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	49ae      	ldr	r1, [pc, #696]	; (8000e80 <HAL_RCC_OscConfig+0x2f8>)
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	49ad      	ldr	r1, [pc, #692]	; (8000e84 <HAL_RCC_OscConfig+0x2fc>)
 8000bce:	400a      	ands	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e038      	b.n	8000c46 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd4:	4ba9      	ldr	r3, [pc, #676]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	03db      	lsls	r3, r3, #15
 8000bda:	d5ec      	bpl.n	8000bb6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bdc:	4ba7      	ldr	r3, [pc, #668]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	039b      	lsls	r3, r3, #14
 8000be2:	d504      	bpl.n	8000bee <HAL_RCC_OscConfig+0x66>
        return HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d100      	bne.n	8000bee <HAL_RCC_OscConfig+0x66>
 8000bec:	e222      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	079b      	lsls	r3, r3, #30
 8000bf2:	d578      	bpl.n	8000ce6 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bf4:	4ba1      	ldr	r3, [pc, #644]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	220c      	movs	r2, #12
 8000bfa:	421a      	tst	r2, r3
 8000bfc:	d062      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x13c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bfe:	4b9f      	ldr	r3, [pc, #636]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	230c      	movs	r3, #12
 8000c04:	4013      	ands	r3, r2
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d058      	beq.n	8000cbc <HAL_RCC_OscConfig+0x134>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c0a:	68e3      	ldr	r3, [r4, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d100      	bne.n	8000c12 <HAL_RCC_OscConfig+0x8a>
 8000c10:	e08c      	b.n	8000d2c <HAL_RCC_OscConfig+0x1a4>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c12:	4a9a      	ldr	r2, [pc, #616]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000c14:	6813      	ldr	r3, [r2, #0]
 8000c16:	2101      	movs	r1, #1
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fd24 	bl	8000668 <HAL_GetTick>
 8000c20:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c22:	4e96      	ldr	r6, [pc, #600]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000c24:	2502      	movs	r5, #2
 8000c26:	6833      	ldr	r3, [r6, #0]
 8000c28:	421d      	tst	r5, r3
 8000c2a:	d176      	bne.n	8000d1a <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c2c:	f7ff fd1c 	bl	8000668 <HAL_GetTick>
 8000c30:	1bc0      	subs	r0, r0, r7
 8000c32:	2802      	cmp	r0, #2
 8000c34:	d9f7      	bls.n	8000c26 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000c36:	2003      	movs	r0, #3
 8000c38:	e1fc      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	4a90      	ldr	r2, [pc, #576]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000c3c:	6811      	ldr	r1, [r2, #0]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	025b      	lsls	r3, r3, #9
 8000c42:	430b      	orrs	r3, r1
 8000c44:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c46:	6863      	ldr	r3, [r4, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d027      	beq.n	8000c9c <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fd0c 	bl	8000668 <HAL_GetTick>
 8000c50:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c52:	4e8a      	ldr	r6, [pc, #552]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000c54:	2580      	movs	r5, #128	; 0x80
 8000c56:	02ad      	lsls	r5, r5, #10
 8000c58:	6833      	ldr	r3, [r6, #0]
 8000c5a:	422b      	tst	r3, r5
 8000c5c:	d1c7      	bne.n	8000bee <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5e:	f7ff fd03 	bl	8000668 <HAL_GetTick>
 8000c62:	1bc0      	subs	r0, r0, r7
 8000c64:	2864      	cmp	r0, #100	; 0x64
 8000c66:	d9f7      	bls.n	8000c58 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000c68:	2003      	movs	r0, #3
 8000c6a:	e1e3      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d009      	beq.n	8000c84 <HAL_RCC_OscConfig+0xfc>
 8000c70:	4b82      	ldr	r3, [pc, #520]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4982      	ldr	r1, [pc, #520]	; (8000e80 <HAL_RCC_OscConfig+0x2f8>)
 8000c76:	400a      	ands	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4981      	ldr	r1, [pc, #516]	; (8000e84 <HAL_RCC_OscConfig+0x2fc>)
 8000c7e:	400a      	ands	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e7e0      	b.n	8000c46 <HAL_RCC_OscConfig+0xbe>
 8000c84:	4b7d      	ldr	r3, [pc, #500]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000c86:	6819      	ldr	r1, [r3, #0]
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	02d2      	lsls	r2, r2, #11
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	0252      	lsls	r2, r2, #9
 8000c96:	430a      	orrs	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e7d4      	b.n	8000c46 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fce4 	bl	8000668 <HAL_GetTick>
 8000ca0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	4e76      	ldr	r6, [pc, #472]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000ca4:	2580      	movs	r5, #128	; 0x80
 8000ca6:	02ad      	lsls	r5, r5, #10
 8000ca8:	6833      	ldr	r3, [r6, #0]
 8000caa:	422b      	tst	r3, r5
 8000cac:	d09f      	beq.n	8000bee <HAL_RCC_OscConfig+0x66>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cae:	f7ff fcdb 	bl	8000668 <HAL_GetTick>
 8000cb2:	1bc0      	subs	r0, r0, r7
 8000cb4:	2864      	cmp	r0, #100	; 0x64
 8000cb6:	d9f7      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
 8000cb8:	2003      	movs	r0, #3
 8000cba:	e1bb      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cbc:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	03db      	lsls	r3, r3, #15
 8000cc2:	d4a2      	bmi.n	8000c0a <HAL_RCC_OscConfig+0x82>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc4:	4b6d      	ldr	r3, [pc, #436]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	079b      	lsls	r3, r3, #30
 8000cca:	d504      	bpl.n	8000cd6 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000ccc:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cce:	68e3      	ldr	r3, [r4, #12]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d000      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x14e>
 8000cd4:	e1ae      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	4969      	ldr	r1, [pc, #420]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000cd8:	680a      	ldr	r2, [r1, #0]
 8000cda:	6923      	ldr	r3, [r4, #16]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	20f8      	movs	r0, #248	; 0xf8
 8000ce0:	4382      	bics	r2, r0
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	071b      	lsls	r3, r3, #28
 8000cea:	d547      	bpl.n	8000d7c <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cec:	69e3      	ldr	r3, [r4, #28]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d030      	beq.n	8000d54 <HAL_RCC_OscConfig+0x1cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cf2:	4a62      	ldr	r2, [pc, #392]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000cf4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fcb4 	bl	8000668 <HAL_GetTick>
 8000d00:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d02:	4e5e      	ldr	r6, [pc, #376]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d04:	2502      	movs	r5, #2
 8000d06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d08:	421d      	tst	r5, r3
 8000d0a:	d137      	bne.n	8000d7c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fcac 	bl	8000668 <HAL_GetTick>
 8000d10:	1bc0      	subs	r0, r0, r7
 8000d12:	2802      	cmp	r0, #2
 8000d14:	d9f7      	bls.n	8000d06 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8000d16:	2003      	movs	r0, #3
 8000d18:	e18c      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1a:	4958      	ldr	r1, [pc, #352]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d1c:	680a      	ldr	r2, [r1, #0]
 8000d1e:	6923      	ldr	r3, [r4, #16]
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	20f8      	movs	r0, #248	; 0xf8
 8000d24:	4382      	bics	r2, r0
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
 8000d2a:	e7dc      	b.n	8000ce6 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000d2c:	4a53      	ldr	r2, [pc, #332]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	438b      	bics	r3, r1
 8000d34:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d36:	f7ff fc97 	bl	8000668 <HAL_GetTick>
 8000d3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3c:	4e4f      	ldr	r6, [pc, #316]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d3e:	2502      	movs	r5, #2
 8000d40:	6833      	ldr	r3, [r6, #0]
 8000d42:	421d      	tst	r5, r3
 8000d44:	d0cf      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d46:	f7ff fc8f 	bl	8000668 <HAL_GetTick>
 8000d4a:	1bc0      	subs	r0, r0, r7
 8000d4c:	2802      	cmp	r0, #2
 8000d4e:	d9f7      	bls.n	8000d40 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8000d50:	2003      	movs	r0, #3
 8000d52:	e16f      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d54:	4a49      	ldr	r2, [pc, #292]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d56:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d58:	2101      	movs	r1, #1
 8000d5a:	438b      	bics	r3, r1
 8000d5c:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fc83 	bl	8000668 <HAL_GetTick>
 8000d62:	0007      	movs	r7, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	4e45      	ldr	r6, [pc, #276]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d66:	2502      	movs	r5, #2
 8000d68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d6a:	421d      	tst	r5, r3
 8000d6c:	d006      	beq.n	8000d7c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fc7b 	bl	8000668 <HAL_GetTick>
 8000d72:	1bc0      	subs	r0, r0, r7
 8000d74:	2802      	cmp	r0, #2
 8000d76:	d9f7      	bls.n	8000d68 <HAL_RCC_OscConfig+0x1e0>
        {
          return HAL_TIMEOUT;
 8000d78:	2003      	movs	r0, #3
 8000d7a:	e15b      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	075b      	lsls	r3, r3, #29
 8000d80:	d400      	bmi.n	8000d84 <HAL_RCC_OscConfig+0x1fc>
 8000d82:	e088      	b.n	8000e96 <HAL_RCC_OscConfig+0x30e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d86:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	d40b      	bmi.n	8000da8 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	4a3a      	ldr	r2, [pc, #232]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000d92:	69d1      	ldr	r1, [r2, #28]
 8000d94:	2080      	movs	r0, #128	; 0x80
 8000d96:	0540      	lsls	r0, r0, #21
 8000d98:	4301      	orrs	r1, r0
 8000d9a:	61d1      	str	r1, [r2, #28]
 8000d9c:	69d3      	ldr	r3, [r2, #28]
 8000d9e:	4003      	ands	r3, r0
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000da4:	2301      	movs	r3, #1
 8000da6:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da8:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <HAL_RCC_OscConfig+0x300>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	d50e      	bpl.n	8000dce <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db0:	68a3      	ldr	r3, [r4, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d021      	beq.n	8000dfa <HAL_RCC_OscConfig+0x272>
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d138      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2a4>
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000dbc:	6a1a      	ldr	r2, [r3, #32]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	621a      	str	r2, [r3, #32]
 8000dc4:	6a1a      	ldr	r2, [r3, #32]
 8000dc6:	3103      	adds	r1, #3
 8000dc8:	438a      	bics	r2, r1
 8000dca:	621a      	str	r2, [r3, #32]
 8000dcc:	e01a      	b.n	8000e04 <HAL_RCC_OscConfig+0x27c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dce:	4a2e      	ldr	r2, [pc, #184]	; (8000e88 <HAL_RCC_OscConfig+0x300>)
 8000dd0:	6811      	ldr	r1, [r2, #0]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dda:	f7ff fc45 	bl	8000668 <HAL_GetTick>
 8000dde:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	4f29      	ldr	r7, [pc, #164]	; (8000e88 <HAL_RCC_OscConfig+0x300>)
 8000de2:	2680      	movs	r6, #128	; 0x80
 8000de4:	0076      	lsls	r6, r6, #1
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	4233      	tst	r3, r6
 8000dea:	d1e1      	bne.n	8000db0 <HAL_RCC_OscConfig+0x228>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dec:	f7ff fc3c 	bl	8000668 <HAL_GetTick>
 8000df0:	1b40      	subs	r0, r0, r5
 8000df2:	2864      	cmp	r0, #100	; 0x64
 8000df4:	d9f7      	bls.n	8000de6 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8000df6:	2003      	movs	r0, #3
 8000df8:	e11c      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000dfc:	6a13      	ldr	r3, [r2, #32]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	430b      	orrs	r3, r1
 8000e02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e04:	68a3      	ldr	r3, [r4, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d026      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fc2d 	bl	8000668 <HAL_GetTick>
 8000e0e:	4681      	mov	r9, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e10:	4f1a      	ldr	r7, [pc, #104]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000e12:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e14:	4d1d      	ldr	r5, [pc, #116]	; (8000e8c <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	421e      	tst	r6, r3
 8000e1a:	d139      	bne.n	8000e90 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fc24 	bl	8000668 <HAL_GetTick>
 8000e20:	464b      	mov	r3, r9
 8000e22:	1ac0      	subs	r0, r0, r3
 8000e24:	42a8      	cmp	r0, r5
 8000e26:	d9f6      	bls.n	8000e16 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000e28:	2003      	movs	r0, #3
 8000e2a:	e103      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d009      	beq.n	8000e44 <HAL_RCC_OscConfig+0x2bc>
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	2101      	movs	r1, #1
 8000e36:	438a      	bics	r2, r1
 8000e38:	621a      	str	r2, [r3, #32]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	3103      	adds	r1, #3
 8000e3e:	438a      	bics	r2, r1
 8000e40:	621a      	str	r2, [r3, #32]
 8000e42:	e7df      	b.n	8000e04 <HAL_RCC_OscConfig+0x27c>
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000e46:	6a1a      	ldr	r2, [r3, #32]
 8000e48:	2104      	movs	r1, #4
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	621a      	str	r2, [r3, #32]
 8000e4e:	6a1a      	ldr	r2, [r3, #32]
 8000e50:	3903      	subs	r1, #3
 8000e52:	430a      	orrs	r2, r1
 8000e54:	621a      	str	r2, [r3, #32]
 8000e56:	e7d5      	b.n	8000e04 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc06 	bl	8000668 <HAL_GetTick>
 8000e5c:	4681      	mov	r9, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e5e:	4f07      	ldr	r7, [pc, #28]	; (8000e7c <HAL_RCC_OscConfig+0x2f4>)
 8000e60:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	4d0a      	ldr	r5, [pc, #40]	; (8000e8c <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	421e      	tst	r6, r3
 8000e68:	d012      	beq.n	8000e90 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fbfd 	bl	8000668 <HAL_GetTick>
 8000e6e:	464b      	mov	r3, r9
 8000e70:	1ac0      	subs	r0, r0, r3
 8000e72:	42a8      	cmp	r0, r5
 8000e74:	d9f6      	bls.n	8000e64 <HAL_RCC_OscConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8000e76:	2003      	movs	r0, #3
 8000e78:	e0dc      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	fffeffff 	.word	0xfffeffff
 8000e84:	fffbffff 	.word	0xfffbffff
 8000e88:	40007000 	.word	0x40007000
 8000e8c:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e90:	4643      	mov	r3, r8
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d037      	beq.n	8000f06 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	06db      	lsls	r3, r3, #27
 8000e9a:	d510      	bpl.n	8000ebe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e9c:	6963      	ldr	r3, [r4, #20]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d037      	beq.n	8000f12 <HAL_RCC_OscConfig+0x38a>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ea2:	3305      	adds	r3, #5
 8000ea4:	d156      	bne.n	8000f54 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ea6:	4a67      	ldr	r2, [pc, #412]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000ea8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000eaa:	2104      	movs	r1, #4
 8000eac:	438b      	bics	r3, r1
 8000eae:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000eb0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000eb2:	69a3      	ldr	r3, [r4, #24]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	20f8      	movs	r0, #248	; 0xf8
 8000eb8:	4381      	bics	r1, r0
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ebe:	6a23      	ldr	r3, [r4, #32]
        }
      }
    }
  }

  return HAL_OK;
 8000ec0:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x340>
 8000ec6:	e0b5      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ec8:	4a5e      	ldr	r2, [pc, #376]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000eca:	6851      	ldr	r1, [r2, #4]
 8000ecc:	220c      	movs	r2, #12
 8000ece:	400a      	ands	r2, r1
 8000ed0:	2a08      	cmp	r2, #8
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x34e>
 8000ed4:	e093      	b.n	8000ffe <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d054      	beq.n	8000f84 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_DISABLE();
 8000eda:	4a5a      	ldr	r2, [pc, #360]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000edc:	6813      	ldr	r3, [r2, #0]
 8000ede:	495a      	ldr	r1, [pc, #360]	; (8001048 <HAL_RCC_OscConfig+0x4c0>)
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fbc0 	bl	8000668 <HAL_GetTick>
 8000ee8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eea:	4d56      	ldr	r5, [pc, #344]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000eec:	2480      	movs	r4, #128	; 0x80
 8000eee:	04a4      	lsls	r4, r4, #18
 8000ef0:	682b      	ldr	r3, [r5, #0]
 8000ef2:	4223      	tst	r3, r4
 8000ef4:	d100      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x370>
 8000ef6:	e080      	b.n	8000ffa <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef8:	f7ff fbb6 	bl	8000668 <HAL_GetTick>
 8000efc:	1b80      	subs	r0, r0, r6
 8000efe:	2802      	cmp	r0, #2
 8000f00:	d9f6      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 8000f02:	2003      	movs	r0, #3
 8000f04:	e096      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f06:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f08:	69d3      	ldr	r3, [r2, #28]
 8000f0a:	4950      	ldr	r1, [pc, #320]	; (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	61d3      	str	r3, [r2, #28]
 8000f10:	e7c1      	b.n	8000e96 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f12:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f16:	2104      	movs	r1, #4
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1e:	3903      	subs	r1, #3
 8000f20:	430a      	orrs	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f24:	f7ff fba0 	bl	8000668 <HAL_GetTick>
 8000f28:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f2a:	4e46      	ldr	r6, [pc, #280]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f2c:	2502      	movs	r5, #2
 8000f2e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000f30:	421d      	tst	r5, r3
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f34:	f7ff fb98 	bl	8000668 <HAL_GetTick>
 8000f38:	1bc0      	subs	r0, r0, r7
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	d9f7      	bls.n	8000f2e <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8000f3e:	2003      	movs	r0, #3
 8000f40:	e078      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f42:	4940      	ldr	r1, [pc, #256]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f44:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8000f46:	69a3      	ldr	r3, [r4, #24]
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	20f8      	movs	r0, #248	; 0xf8
 8000f4c:	4382      	bics	r2, r0
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	634b      	str	r3, [r1, #52]	; 0x34
 8000f52:	e7b4      	b.n	8000ebe <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f58:	2104      	movs	r1, #4
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f60:	3903      	subs	r1, #3
 8000f62:	438a      	bics	r2, r1
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f66:	f7ff fb7f 	bl	8000668 <HAL_GetTick>
 8000f6a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f6c:	4e35      	ldr	r6, [pc, #212]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f6e:	2502      	movs	r5, #2
 8000f70:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000f72:	421d      	tst	r5, r3
 8000f74:	d0a3      	beq.n	8000ebe <HAL_RCC_OscConfig+0x336>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f76:	f7ff fb77 	bl	8000668 <HAL_GetTick>
 8000f7a:	1bc0      	subs	r0, r0, r7
 8000f7c:	2802      	cmp	r0, #2
 8000f7e:	d9f7      	bls.n	8000f70 <HAL_RCC_OscConfig+0x3e8>
          return HAL_TIMEOUT;
 8000f80:	2003      	movs	r0, #3
 8000f82:	e057      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_DISABLE();
 8000f84:	4a2f      	ldr	r2, [pc, #188]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f86:	6813      	ldr	r3, [r2, #0]
 8000f88:	492f      	ldr	r1, [pc, #188]	; (8001048 <HAL_RCC_OscConfig+0x4c0>)
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb6b 	bl	8000668 <HAL_GetTick>
 8000f92:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	4e2b      	ldr	r6, [pc, #172]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000f96:	2580      	movs	r5, #128	; 0x80
 8000f98:	04ad      	lsls	r5, r5, #18
 8000f9a:	6833      	ldr	r3, [r6, #0]
 8000f9c:	422b      	tst	r3, r5
 8000f9e:	d006      	beq.n	8000fae <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa0:	f7ff fb62 	bl	8000668 <HAL_GetTick>
 8000fa4:	1bc0      	subs	r0, r0, r7
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9f7      	bls.n	8000f9a <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8000faa:	2003      	movs	r0, #3
 8000fac:	e042      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fbc:	6859      	ldr	r1, [r3, #4]
 8000fbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000fc2:	4302      	orrs	r2, r0
 8000fc4:	4822      	ldr	r0, [pc, #136]	; (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000fc6:	4001      	ands	r1, r0
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fcc:	6819      	ldr	r1, [r3, #0]
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	0452      	lsls	r2, r2, #17
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fb47 	bl	8000668 <HAL_GetTick>
 8000fda:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fdc:	4d19      	ldr	r5, [pc, #100]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8000fde:	2480      	movs	r4, #128	; 0x80
 8000fe0:	04a4      	lsls	r4, r4, #18
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	4223      	tst	r3, r4
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fb3e 	bl	8000668 <HAL_GetTick>
 8000fec:	1b80      	subs	r0, r0, r6
 8000fee:	2802      	cmp	r0, #2
 8000ff0:	d9f7      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x45a>
            return HAL_TIMEOUT;
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	e01e      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
  return HAL_OK;
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	e01c      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	e01a      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d01d      	beq.n	800103e <HAL_RCC_OscConfig+0x4b6>
        pll_config  = RCC->CFGR;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_RCC_OscConfig+0x4bc>)
 8001004:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001006:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	025b      	lsls	r3, r3, #9
 800100c:	4013      	ands	r3, r2
          return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001010:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001012:	42ab      	cmp	r3, r5
 8001014:	d10e      	bne.n	8001034 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001016:	230f      	movs	r3, #15
 8001018:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800101a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800101c:	428b      	cmp	r3, r1
 800101e:	d109      	bne.n	8001034 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001020:	20f0      	movs	r0, #240	; 0xf0
 8001022:	0380      	lsls	r0, r0, #14
 8001024:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001028:	1a10      	subs	r0, r2, r0
 800102a:	1e42      	subs	r2, r0, #1
 800102c:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 800102e:	b2c0      	uxtb	r0, r0
 8001030:	e000      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
 8001032:	2001      	movs	r0, #1
}
 8001034:	b003      	add	sp, #12
 8001036:	bc0c      	pop	{r2, r3}
 8001038:	4690      	mov	r8, r2
 800103a:	4699      	mov	r9, r3
 800103c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
 8001040:	e7f8      	b.n	8001034 <HAL_RCC_OscConfig+0x4ac>
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	40021000 	.word	0x40021000
 8001048:	feffffff 	.word	0xfeffffff
 800104c:	efffffff 	.word	0xefffffff
 8001050:	ffc2ffff 	.word	0xffc2ffff

08001054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001054:	b530      	push	{r4, r5, lr}
 8001056:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001058:	aa04      	add	r2, sp, #16
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x64>)
 800105c:	0018      	movs	r0, r3
 800105e:	c832      	ldmia	r0!, {r1, r4, r5}
 8001060:	c232      	stmia	r2!, {r1, r4, r5}
 8001062:	0011      	movs	r1, r2
 8001064:	6802      	ldr	r2, [r0, #0]
 8001066:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001068:	466a      	mov	r2, sp
 800106a:	3310      	adds	r3, #16
 800106c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800106e:	c213      	stmia	r2!, {r0, r1, r4}
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_RCC_GetSysClockFreq+0x68>)
 8001076:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001078:	230c      	movs	r3, #12
 800107a:	4013      	ands	r3, r2
 800107c:	2b08      	cmp	r3, #8
 800107e:	d119      	bne.n	80010b4 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001080:	0c91      	lsrs	r1, r2, #18
 8001082:	3307      	adds	r3, #7
 8001084:	4019      	ands	r1, r3
 8001086:	a804      	add	r0, sp, #16
 8001088:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800108a:	490c      	ldr	r1, [pc, #48]	; (80010bc <HAL_RCC_GetSysClockFreq+0x68>)
 800108c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800108e:	400b      	ands	r3, r1
 8001090:	4669      	mov	r1, sp
 8001092:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001094:	03d3      	lsls	r3, r2, #15
 8001096:	d408      	bmi.n	80010aa <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001098:	0163      	lsls	r3, r4, #5
 800109a:	1b1b      	subs	r3, r3, r4
 800109c:	0198      	lsls	r0, r3, #6
 800109e:	1ac0      	subs	r0, r0, r3
 80010a0:	00c0      	lsls	r0, r0, #3
 80010a2:	1900      	adds	r0, r0, r4
 80010a4:	0200      	lsls	r0, r0, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010a6:	b009      	add	sp, #36	; 0x24
 80010a8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80010ac:	f7ff f83e 	bl	800012c <__udivsi3>
 80010b0:	4360      	muls	r0, r4
 80010b2:	e7f8      	b.n	80010a6 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80010b6:	e7f6      	b.n	80010a6 <HAL_RCC_GetSysClockFreq+0x52>
 80010b8:	08001e20 	.word	0x08001e20
 80010bc:	40021000 	.word	0x40021000
 80010c0:	007a1200 	.word	0x007a1200

080010c4 <HAL_RCC_ClockConfig>:
{
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c6:	46ce      	mov	lr, r9
 80010c8:	4647      	mov	r7, r8
 80010ca:	b580      	push	{r7, lr}
 80010cc:	0004      	movs	r4, r0
 80010ce:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_ClockConfig+0x12>
 80010d4:	e081      	b.n	80011da <HAL_RCC_ClockConfig+0x116>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d6:	4b43      	ldr	r3, [pc, #268]	; (80011e4 <HAL_RCC_ClockConfig+0x120>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	428b      	cmp	r3, r1
 80010e0:	d20a      	bcs.n	80010f8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	4940      	ldr	r1, [pc, #256]	; (80011e4 <HAL_RCC_ClockConfig+0x120>)
 80010e4:	680b      	ldr	r3, [r1, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4393      	bics	r3, r2
 80010ea:	432b      	orrs	r3, r5
 80010ec:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	680b      	ldr	r3, [r1, #0]
 80010f0:	401a      	ands	r2, r3
      return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f4:	42aa      	cmp	r2, r5
 80010f6:	d171      	bne.n	80011dc <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	079a      	lsls	r2, r3, #30
 80010fc:	d50e      	bpl.n	800111c <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fe:	075b      	lsls	r3, r3, #29
 8001100:	d505      	bpl.n	800110e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 8001104:	6851      	ldr	r1, [r2, #4]
 8001106:	23e0      	movs	r3, #224	; 0xe0
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	430b      	orrs	r3, r1
 800110c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110e:	4a36      	ldr	r2, [pc, #216]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 8001110:	6853      	ldr	r3, [r2, #4]
 8001112:	21f0      	movs	r1, #240	; 0xf0
 8001114:	438b      	bics	r3, r1
 8001116:	68a1      	ldr	r1, [r4, #8]
 8001118:	430b      	orrs	r3, r1
 800111a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	07db      	lsls	r3, r3, #31
 8001120:	d530      	bpl.n	8001184 <HAL_RCC_ClockConfig+0xc0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	2a01      	cmp	r2, #1
 8001126:	d021      	beq.n	800116c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001128:	2a02      	cmp	r2, #2
 800112a:	d025      	beq.n	8001178 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 800112e:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	079b      	lsls	r3, r3, #30
 8001134:	d552      	bpl.n	80011dc <HAL_RCC_ClockConfig+0x118>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	492c      	ldr	r1, [pc, #176]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 8001138:	684b      	ldr	r3, [r1, #4]
 800113a:	2003      	movs	r0, #3
 800113c:	4383      	bics	r3, r0
 800113e:	4313      	orrs	r3, r2
 8001140:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001142:	f7ff fa91 	bl	8000668 <HAL_GetTick>
 8001146:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001148:	4f27      	ldr	r7, [pc, #156]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 800114a:	260c      	movs	r6, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_RCC_ClockConfig+0x128>)
 800114e:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4032      	ands	r2, r6
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	429a      	cmp	r2, r3
 800115a:	d013      	beq.n	8001184 <HAL_RCC_ClockConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f7ff fa84 	bl	8000668 <HAL_GetTick>
 8001160:	464b      	mov	r3, r9
 8001162:	1ac0      	subs	r0, r0, r3
 8001164:	4540      	cmp	r0, r8
 8001166:	d9f3      	bls.n	8001150 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8001168:	2003      	movs	r0, #3
 800116a:	e037      	b.n	80011dc <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 800116e:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8001170:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	039b      	lsls	r3, r3, #14
 8001174:	d4df      	bmi.n	8001136 <HAL_RCC_ClockConfig+0x72>
 8001176:	e031      	b.n	80011dc <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 800117a:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 800117c:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117e:	019b      	lsls	r3, r3, #6
 8001180:	d4d9      	bmi.n	8001136 <HAL_RCC_ClockConfig+0x72>
 8001182:	e02b      	b.n	80011dc <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_RCC_ClockConfig+0x120>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	4013      	ands	r3, r2
 800118c:	42ab      	cmp	r3, r5
 800118e:	d90a      	bls.n	80011a6 <HAL_RCC_ClockConfig+0xe2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001190:	4914      	ldr	r1, [pc, #80]	; (80011e4 <HAL_RCC_ClockConfig+0x120>)
 8001192:	680b      	ldr	r3, [r1, #0]
 8001194:	2201      	movs	r2, #1
 8001196:	4393      	bics	r3, r2
 8001198:	432b      	orrs	r3, r5
 800119a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119c:	680b      	ldr	r3, [r1, #0]
 800119e:	401a      	ands	r2, r3
      return HAL_ERROR;
 80011a0:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	42aa      	cmp	r2, r5
 80011a4:	d11a      	bne.n	80011dc <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	075b      	lsls	r3, r3, #29
 80011aa:	d506      	bpl.n	80011ba <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 80011ae:	6853      	ldr	r3, [r2, #4]
 80011b0:	490f      	ldr	r1, [pc, #60]	; (80011f0 <HAL_RCC_ClockConfig+0x12c>)
 80011b2:	400b      	ands	r3, r1
 80011b4:	68e1      	ldr	r1, [r4, #12]
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011ba:	f7ff ff4b 	bl	8001054 <HAL_RCC_GetSysClockFreq>
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_RCC_ClockConfig+0x124>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	061b      	lsls	r3, r3, #24
 80011c4:	0f1b      	lsrs	r3, r3, #28
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_RCC_ClockConfig+0x130>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	40d8      	lsrs	r0, r3
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_RCC_ClockConfig+0x134>)
 80011ce:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fa07 	bl	80005e4 <HAL_InitTick>
  return HAL_OK;
 80011d6:	2000      	movs	r0, #0
 80011d8:	e000      	b.n	80011dc <HAL_RCC_ClockConfig+0x118>
    return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
}
 80011dc:	bc0c      	pop	{r2, r3}
 80011de:	4690      	mov	r8, r2
 80011e0:	4699      	mov	r9, r3
 80011e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e4:	40022000 	.word	0x40022000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	00001388 	.word	0x00001388
 80011f0:	fffff8ff 	.word	0xfffff8ff
 80011f4:	08001e48 	.word	0x08001e48
 80011f8:	20000000 	.word	0x20000000

080011fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_RCC_GetPCLK1Freq+0x14>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	0f5b      	lsrs	r3, r3, #29
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800120a:	6810      	ldr	r0, [r2, #0]
 800120c:	40d8      	lsrs	r0, r3
}    
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000
 8001214:	08001e58 	.word	0x08001e58
 8001218:	20000000 	.word	0x20000000

0800121c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	46ce      	mov	lr, r9
 8001220:	4647      	mov	r7, r8
 8001222:	b580      	push	{r7, lr}
 8001224:	b083      	sub	sp, #12
 8001226:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001228:	6803      	ldr	r3, [r0, #0]
 800122a:	03db      	lsls	r3, r3, #15
 800122c:	d536      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b3f      	ldr	r3, [pc, #252]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001230:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001232:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	d40a      	bmi.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	4a3c      	ldr	r2, [pc, #240]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800123a:	69d1      	ldr	r1, [r2, #28]
 800123c:	2080      	movs	r0, #128	; 0x80
 800123e:	0540      	lsls	r0, r0, #21
 8001240:	4301      	orrs	r1, r0
 8001242:	61d1      	str	r1, [r2, #28]
 8001244:	69d3      	ldr	r3, [r2, #28]
 8001246:	4003      	ands	r3, r0
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800124c:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124e:	4b38      	ldr	r3, [pc, #224]	; (8001330 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	d53c      	bpl.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001256:	4b35      	ldr	r3, [pc, #212]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	22c0      	movs	r2, #192	; 0xc0
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001260:	d013      	beq.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001262:	6861      	ldr	r1, [r4, #4]
 8001264:	400a      	ands	r2, r1
 8001266:	429a      	cmp	r2, r3
 8001268:	d00f      	beq.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800126c:	6a18      	ldr	r0, [r3, #32]
 800126e:	4a31      	ldr	r2, [pc, #196]	; (8001334 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001270:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001272:	6a1e      	ldr	r6, [r3, #32]
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0249      	lsls	r1, r1, #9
 8001278:	4331      	orrs	r1, r6
 800127a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800127c:	6a19      	ldr	r1, [r3, #32]
 800127e:	4e2e      	ldr	r6, [pc, #184]	; (8001338 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001280:	4031      	ands	r1, r6
 8001282:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001284:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001286:	07c3      	lsls	r3, r0, #31
 8001288:	d439      	bmi.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800128a:	4a28      	ldr	r2, [pc, #160]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800128c:	6a13      	ldr	r3, [r2, #32]
 800128e:	4929      	ldr	r1, [pc, #164]	; (8001334 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001290:	400b      	ands	r3, r1
 8001292:	6861      	ldr	r1, [r4, #4]
 8001294:	430b      	orrs	r3, r1
 8001296:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001298:	2d01      	cmp	r5, #1
 800129a:	d042      	beq.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	07db      	lsls	r3, r3, #31
 80012a0:	d506      	bpl.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012a2:	4a22      	ldr	r2, [pc, #136]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012a6:	2103      	movs	r1, #3
 80012a8:	438b      	bics	r3, r1
 80012aa:	68a1      	ldr	r1, [r4, #8]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80012b0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	069b      	lsls	r3, r3, #26
 80012b6:	d506      	bpl.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012b8:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012bc:	2110      	movs	r1, #16
 80012be:	438b      	bics	r3, r1
 80012c0:	68e1      	ldr	r1, [r4, #12]
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012c6:	b003      	add	sp, #12
 80012c8:	bc0c      	pop	{r2, r3}
 80012ca:	4690      	mov	r8, r2
 80012cc:	4699      	mov	r9, r3
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80012d2:	6811      	ldr	r1, [r2, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	430b      	orrs	r3, r1
 80012da:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012dc:	f7ff f9c4 	bl	8000668 <HAL_GetTick>
 80012e0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e2:	4f13      	ldr	r7, [pc, #76]	; (8001330 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80012e4:	2680      	movs	r6, #128	; 0x80
 80012e6:	0076      	lsls	r6, r6, #1
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4233      	tst	r3, r6
 80012ec:	d1b3      	bne.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff f9bb 	bl	8000668 <HAL_GetTick>
 80012f2:	4643      	mov	r3, r8
 80012f4:	1ac0      	subs	r0, r0, r3
 80012f6:	2864      	cmp	r0, #100	; 0x64
 80012f8:	d9f6      	bls.n	80012e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80012fa:	2003      	movs	r0, #3
 80012fc:	e7e3      	b.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 80012fe:	f7ff f9b3 	bl	8000668 <HAL_GetTick>
 8001302:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	4f09      	ldr	r7, [pc, #36]	; (800132c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001306:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 800130a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	421e      	tst	r6, r3
 8001310:	d1bb      	bne.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff f9a9 	bl	8000668 <HAL_GetTick>
 8001316:	464b      	mov	r3, r9
 8001318:	1ac0      	subs	r0, r0, r3
 800131a:	4540      	cmp	r0, r8
 800131c:	d9f6      	bls.n	800130c <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
 800131e:	2003      	movs	r0, #3
 8001320:	e7d1      	b.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001322:	69d3      	ldr	r3, [r2, #28]
 8001324:	4906      	ldr	r1, [pc, #24]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001326:	400b      	ands	r3, r1
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	e7b7      	b.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800132c:	40021000 	.word	0x40021000
 8001330:	40007000 	.word	0x40007000
 8001334:	fffffcff 	.word	0xfffffcff
 8001338:	fffeffff 	.word	0xfffeffff
 800133c:	00001388 	.word	0x00001388
 8001340:	efffffff 	.word	0xefffffff

08001344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001344:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001346:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800134a:	2201      	movs	r2, #1
 800134c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001350:	6801      	ldr	r1, [r0, #0]
 8001352:	680b      	ldr	r3, [r1, #0]
 8001354:	4d11      	ldr	r5, [pc, #68]	; (800139c <UART_EndRxTransfer+0x58>)
 8001356:	402b      	ands	r3, r5
 8001358:	600b      	str	r3, [r1, #0]
 800135a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800135e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001362:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001366:	6801      	ldr	r1, [r0, #0]
 8001368:	688b      	ldr	r3, [r1, #8]
 800136a:	4393      	bics	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
 800136e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001372:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001374:	2b01      	cmp	r3, #1
 8001376:	d005      	beq.n	8001384 <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001378:	2320      	movs	r3, #32
 800137a:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800137c:	2300      	movs	r3, #0
 800137e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001380:	6643      	str	r3, [r0, #100]	; 0x64
}
 8001382:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001384:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001388:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800138c:	6802      	ldr	r2, [r0, #0]
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	2410      	movs	r4, #16
 8001392:	43a3      	bics	r3, r4
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	f381 8810 	msr	PRIMASK, r1
 800139a:	e7ed      	b.n	8001378 <UART_EndRxTransfer+0x34>
 800139c:	fffffedf 	.word	0xfffffedf

080013a0 <HAL_UART_TxCpltCallback>:
}
 80013a0:	4770      	bx	lr

080013a2 <HAL_UART_RxHalfCpltCallback>:
}
 80013a2:	4770      	bx	lr

080013a4 <HAL_UART_ErrorCallback>:
}
 80013a4:	4770      	bx	lr

080013a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80013a6:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80013a8:	6a44      	ldr	r4, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80013aa:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80013ac:	6fe2      	ldr	r2, [r4, #124]	; 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	061b      	lsls	r3, r3, #24
 80013b4:	d501      	bpl.n	80013ba <UART_DMAError+0x14>
 80013b6:	2921      	cmp	r1, #33	; 0x21
 80013b8:	d00e      	beq.n	80013d8 <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	065b      	lsls	r3, r3, #25
 80013c0:	d501      	bpl.n	80013c6 <UART_DMAError+0x20>
 80013c2:	2a22      	cmp	r2, #34	; 0x22
 80013c4:	d01a      	beq.n	80013fc <UART_DMAError+0x56>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	58a3      	ldr	r3, [r4, r2]
 80013ca:	2110      	movs	r1, #16
 80013cc:	430b      	orrs	r3, r1
 80013ce:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80013d0:	0020      	movs	r0, r4
 80013d2:	f7ff ffe7 	bl	80013a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 80013d8:	2352      	movs	r3, #82	; 0x52
 80013da:	2100      	movs	r1, #0
 80013dc:	52e1      	strh	r1, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013de:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013e2:	3b51      	subs	r3, #81	; 0x51
 80013e4:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80013e8:	6821      	ldr	r1, [r4, #0]
 80013ea:	680b      	ldr	r3, [r1, #0]
 80013ec:	25c0      	movs	r5, #192	; 0xc0
 80013ee:	43ab      	bics	r3, r5
 80013f0:	600b      	str	r3, [r1, #0]
 80013f2:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 80013f6:	2320      	movs	r3, #32
 80013f8:	67a3      	str	r3, [r4, #120]	; 0x78
 80013fa:	e7de      	b.n	80013ba <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80013fc:	235a      	movs	r3, #90	; 0x5a
 80013fe:	2200      	movs	r2, #0
 8001400:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8001402:	0020      	movs	r0, r4
 8001404:	f7ff ff9e 	bl	8001344 <UART_EndRxTransfer>
 8001408:	e7dd      	b.n	80013c6 <UART_DMAError+0x20>

0800140a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800140a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800140c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	225a      	movs	r2, #90	; 0x5a
 8001412:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001414:	3a08      	subs	r2, #8
 8001416:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001418:	f7ff ffc4 	bl	80013a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800141c:	bd10      	pop	{r4, pc}

0800141e <HAL_UARTEx_RxEventCallback>:
}
 800141e:	4770      	bx	lr

08001420 <HAL_UART_IRQHandler>:
{
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001424:	6802      	ldr	r2, [r0, #0]
 8001426:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001428:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800142a:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800142c:	4dab      	ldr	r5, [pc, #684]	; (80016dc <HAL_UART_IRQHandler+0x2bc>)
  if (errorflags == 0U)
 800142e:	422b      	tst	r3, r5
 8001430:	d10c      	bne.n	800144c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001432:	0698      	lsls	r0, r3, #26
 8001434:	d400      	bmi.n	8001438 <HAL_UART_IRQHandler+0x18>
 8001436:	e097      	b.n	8001568 <HAL_UART_IRQHandler+0x148>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001438:	0688      	lsls	r0, r1, #26
 800143a:	d400      	bmi.n	800143e <HAL_UART_IRQHandler+0x1e>
 800143c:	e094      	b.n	8001568 <HAL_UART_IRQHandler+0x148>
      if (huart->RxISR != NULL)
 800143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001440:	2b00      	cmp	r3, #0
 8001442:	d100      	bne.n	8001446 <HAL_UART_IRQHandler+0x26>
 8001444:	e134      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
        huart->RxISR(huart);
 8001446:	0020      	movs	r0, r4
 8001448:	4798      	blx	r3
 800144a:	e131      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800144c:	2501      	movs	r5, #1
 800144e:	4028      	ands	r0, r5
 8001450:	d103      	bne.n	800145a <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001452:	4da3      	ldr	r5, [pc, #652]	; (80016e0 <HAL_UART_IRQHandler+0x2c0>)
 8001454:	4229      	tst	r1, r5
 8001456:	d100      	bne.n	800145a <HAL_UART_IRQHandler+0x3a>
 8001458:	e086      	b.n	8001568 <HAL_UART_IRQHandler+0x148>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800145a:	07dd      	lsls	r5, r3, #31
 800145c:	d507      	bpl.n	800146e <HAL_UART_IRQHandler+0x4e>
 800145e:	05cd      	lsls	r5, r1, #23
 8001460:	d505      	bpl.n	800146e <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001462:	2601      	movs	r6, #1
 8001464:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001466:	2580      	movs	r5, #128	; 0x80
 8001468:	5962      	ldr	r2, [r4, r5]
 800146a:	4332      	orrs	r2, r6
 800146c:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800146e:	079a      	lsls	r2, r3, #30
 8001470:	d566      	bpl.n	8001540 <HAL_UART_IRQHandler+0x120>
 8001472:	2800      	cmp	r0, #0
 8001474:	d011      	beq.n	800149a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	2502      	movs	r5, #2
 800147a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800147c:	2680      	movs	r6, #128	; 0x80
 800147e:	59a2      	ldr	r2, [r4, r6]
 8001480:	3502      	adds	r5, #2
 8001482:	432a      	orrs	r2, r5
 8001484:	51a2      	str	r2, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001486:	421d      	tst	r5, r3
 8001488:	d007      	beq.n	800149a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800148a:	6822      	ldr	r2, [r4, #0]
 800148c:	2504      	movs	r5, #4
 800148e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001490:	357c      	adds	r5, #124	; 0x7c
 8001492:	5962      	ldr	r2, [r4, r5]
 8001494:	2602      	movs	r6, #2
 8001496:	4332      	orrs	r2, r6
 8001498:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800149a:	071a      	lsls	r2, r3, #28
 800149c:	d50a      	bpl.n	80014b4 <HAL_UART_IRQHandler+0x94>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800149e:	068a      	lsls	r2, r1, #26
 80014a0:	d401      	bmi.n	80014a6 <HAL_UART_IRQHandler+0x86>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	2508      	movs	r5, #8
 80014aa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80014ac:	2080      	movs	r0, #128	; 0x80
 80014ae:	5822      	ldr	r2, [r4, r0]
 80014b0:	432a      	orrs	r2, r5
 80014b2:	5022      	str	r2, [r4, r0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80014b4:	051a      	lsls	r2, r3, #20
 80014b6:	d50a      	bpl.n	80014ce <HAL_UART_IRQHandler+0xae>
 80014b8:	014a      	lsls	r2, r1, #5
 80014ba:	d508      	bpl.n	80014ce <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80014bc:	6822      	ldr	r2, [r4, #0]
 80014be:	2080      	movs	r0, #128	; 0x80
 80014c0:	0100      	lsls	r0, r0, #4
 80014c2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80014c4:	2080      	movs	r0, #128	; 0x80
 80014c6:	5822      	ldr	r2, [r4, r0]
 80014c8:	2520      	movs	r5, #32
 80014ca:	432a      	orrs	r2, r5
 80014cc:	5022      	str	r2, [r4, r0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	58a2      	ldr	r2, [r4, r2]
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d100      	bne.n	80014d8 <HAL_UART_IRQHandler+0xb8>
 80014d6:	e0eb      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80014d8:	069b      	lsls	r3, r3, #26
 80014da:	d506      	bpl.n	80014ea <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80014dc:	068b      	lsls	r3, r1, #26
 80014de:	d504      	bpl.n	80014ea <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 80014e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 80014e6:	0020      	movs	r0, r4
 80014e8:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	065b      	lsls	r3, r3, #25
 80014f4:	d402      	bmi.n	80014fc <HAL_UART_IRQHandler+0xdc>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80014f6:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80014f8:	4213      	tst	r3, r2
 80014fa:	d02e      	beq.n	800155a <HAL_UART_IRQHandler+0x13a>
        UART_EndRxTransfer(huart);
 80014fc:	0020      	movs	r0, r4
 80014fe:	f7ff ff21 	bl	8001344 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	065b      	lsls	r3, r3, #25
 8001508:	d523      	bpl.n	8001552 <HAL_UART_IRQHandler+0x132>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800150a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800150e:	2301      	movs	r3, #1
 8001510:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	6893      	ldr	r3, [r2, #8]
 8001518:	2040      	movs	r0, #64	; 0x40
 800151a:	4383      	bics	r3, r0
 800151c:	6093      	str	r3, [r2, #8]
 800151e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8001522:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001524:	2b00      	cmp	r3, #0
 8001526:	d010      	beq.n	800154a <HAL_UART_IRQHandler+0x12a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001528:	4a6e      	ldr	r2, [pc, #440]	; (80016e4 <HAL_UART_IRQHandler+0x2c4>)
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800152c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800152e:	f7ff f99c 	bl	800086a <HAL_DMA_Abort_IT>
 8001532:	2800      	cmp	r0, #0
 8001534:	d100      	bne.n	8001538 <HAL_UART_IRQHandler+0x118>
 8001536:	e0bb      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001538:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800153a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800153c:	4798      	blx	r3
 800153e:	e0b7      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001540:	075a      	lsls	r2, r3, #29
 8001542:	d5aa      	bpl.n	800149a <HAL_UART_IRQHandler+0x7a>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1a0      	bne.n	800148a <HAL_UART_IRQHandler+0x6a>
 8001548:	e7a7      	b.n	800149a <HAL_UART_IRQHandler+0x7a>
            HAL_UART_ErrorCallback(huart);
 800154a:	0020      	movs	r0, r4
 800154c:	f7ff ff2a 	bl	80013a4 <HAL_UART_ErrorCallback>
 8001550:	e0ae      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
          HAL_UART_ErrorCallback(huart);
 8001552:	0020      	movs	r0, r4
 8001554:	f7ff ff26 	bl	80013a4 <HAL_UART_ErrorCallback>
 8001558:	e0aa      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
        HAL_UART_ErrorCallback(huart);
 800155a:	0020      	movs	r0, r4
 800155c:	f7ff ff22 	bl	80013a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	2200      	movs	r2, #0
 8001564:	50e2      	str	r2, [r4, r3]
 8001566:	e0a3      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001568:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800156a:	2801      	cmp	r0, #1
 800156c:	d00c      	beq.n	8001588 <HAL_UART_IRQHandler+0x168>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800156e:	061a      	lsls	r2, r3, #24
 8001570:	d400      	bmi.n	8001574 <HAL_UART_IRQHandler+0x154>
 8001572:	e099      	b.n	80016a8 <HAL_UART_IRQHandler+0x288>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001574:	060a      	lsls	r2, r1, #24
 8001576:	d400      	bmi.n	800157a <HAL_UART_IRQHandler+0x15a>
 8001578:	e096      	b.n	80016a8 <HAL_UART_IRQHandler+0x288>
    if (huart->TxISR != NULL)
 800157a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800157c:	2b00      	cmp	r3, #0
 800157e:	d100      	bne.n	8001582 <HAL_UART_IRQHandler+0x162>
 8001580:	e096      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
      huart->TxISR(huart);
 8001582:	0020      	movs	r0, r4
 8001584:	4798      	blx	r3
 8001586:	e093      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001588:	06d8      	lsls	r0, r3, #27
 800158a:	d5f0      	bpl.n	800156e <HAL_UART_IRQHandler+0x14e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800158c:	06c8      	lsls	r0, r1, #27
 800158e:	d5ee      	bpl.n	800156e <HAL_UART_IRQHandler+0x14e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001590:	2310      	movs	r3, #16
 8001592:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	065b      	lsls	r3, r3, #25
 800159a:	d54e      	bpl.n	800163a <HAL_UART_IRQHandler+0x21a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800159c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800159e:	6813      	ldr	r3, [r2, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d100      	bne.n	80015aa <HAL_UART_IRQHandler+0x18a>
 80015a8:	e082      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80015aa:	2158      	movs	r1, #88	; 0x58
 80015ac:	5a61      	ldrh	r1, [r4, r1]
 80015ae:	4299      	cmp	r1, r3
 80015b0:	d800      	bhi.n	80015b4 <HAL_UART_IRQHandler+0x194>
 80015b2:	e07d      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
        huart->RxXferCount = nb_remaining_rx_data;
 80015b4:	215a      	movs	r1, #90	; 0x5a
 80015b6:	5263      	strh	r3, [r4, r1]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80015b8:	6993      	ldr	r3, [r2, #24]
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	d033      	beq.n	8001626 <HAL_UART_IRQHandler+0x206>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015be:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c2:	2301      	movs	r3, #1
 80015c4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015c8:	6821      	ldr	r1, [r4, #0]
 80015ca:	680a      	ldr	r2, [r1, #0]
 80015cc:	4d46      	ldr	r5, [pc, #280]	; (80016e8 <HAL_UART_IRQHandler+0x2c8>)
 80015ce:	402a      	ands	r2, r5
 80015d0:	600a      	str	r2, [r1, #0]
 80015d2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015da:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015de:	6821      	ldr	r1, [r4, #0]
 80015e0:	688a      	ldr	r2, [r1, #8]
 80015e2:	439a      	bics	r2, r3
 80015e4:	608a      	str	r2, [r1, #8]
 80015e6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015ee:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015f2:	6821      	ldr	r1, [r4, #0]
 80015f4:	688a      	ldr	r2, [r1, #8]
 80015f6:	3542      	adds	r5, #66	; 0x42
 80015f8:	35ff      	adds	r5, #255	; 0xff
 80015fa:	43aa      	bics	r2, r5
 80015fc:	608a      	str	r2, [r1, #8]
 80015fe:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8001602:	2220      	movs	r2, #32
 8001604:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001606:	2200      	movs	r2, #0
 8001608:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800160a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	2010      	movs	r0, #16
 8001618:	4383      	bics	r3, r0
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001620:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001622:	f7ff f900 	bl	8000826 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001626:	235a      	movs	r3, #90	; 0x5a
 8001628:	5ae3      	ldrh	r3, [r4, r3]
 800162a:	2258      	movs	r2, #88	; 0x58
 800162c:	5aa1      	ldrh	r1, [r4, r2]
 800162e:	1ac9      	subs	r1, r1, r3
 8001630:	b289      	uxth	r1, r1
 8001632:	0020      	movs	r0, r4
 8001634:	f7ff fef3 	bl	800141e <HAL_UARTEx_RxEventCallback>
 8001638:	e03a      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800163a:	215a      	movs	r1, #90	; 0x5a
 800163c:	5a62      	ldrh	r2, [r4, r1]
 800163e:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8001640:	5a63      	ldrh	r3, [r4, r1]
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d033      	beq.n	80016b0 <HAL_UART_IRQHandler+0x290>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001648:	2358      	movs	r3, #88	; 0x58
 800164a:	5ae3      	ldrh	r3, [r4, r3]
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8001650:	2900      	cmp	r1, #0
 8001652:	d02d      	beq.n	80016b0 <HAL_UART_IRQHandler+0x290>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001654:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001658:	2301      	movs	r3, #1
 800165a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	6802      	ldr	r2, [r0, #0]
 8001662:	4e22      	ldr	r6, [pc, #136]	; (80016ec <HAL_UART_IRQHandler+0x2cc>)
 8001664:	4032      	ands	r2, r6
 8001666:	6002      	str	r2, [r0, #0]
 8001668:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800166c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001670:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001674:	6820      	ldr	r0, [r4, #0]
 8001676:	6882      	ldr	r2, [r0, #8]
 8001678:	439a      	bics	r2, r3
 800167a:	6082      	str	r2, [r0, #8]
 800167c:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8001680:	2220      	movs	r2, #32
 8001682:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001684:	2200      	movs	r2, #0
 8001686:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8001688:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800168a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800168e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001692:	6822      	ldr	r2, [r4, #0]
 8001694:	6813      	ldr	r3, [r2, #0]
 8001696:	2510      	movs	r5, #16
 8001698:	43ab      	bics	r3, r5
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80016a0:	0020      	movs	r0, r4
 80016a2:	f7ff febc 	bl	800141e <HAL_UARTEx_RxEventCallback>
 80016a6:	e003      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80016a8:	065b      	lsls	r3, r3, #25
 80016aa:	d501      	bpl.n	80016b0 <HAL_UART_IRQHandler+0x290>
 80016ac:	064b      	lsls	r3, r1, #25
 80016ae:	d400      	bmi.n	80016b2 <HAL_UART_IRQHandler+0x292>
}
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016b2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016b6:	2301      	movs	r3, #1
 80016b8:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80016bc:	6822      	ldr	r2, [r4, #0]
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	2040      	movs	r0, #64	; 0x40
 80016c2:	4383      	bics	r3, r0
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80016ca:	2320      	movs	r3, #32
 80016cc:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80016d2:	0020      	movs	r0, r4
 80016d4:	f7ff fe64 	bl	80013a0 <HAL_UART_TxCpltCallback>
 80016d8:	e7ea      	b.n	80016b0 <HAL_UART_IRQHandler+0x290>
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	0000080f 	.word	0x0000080f
 80016e0:	04000120 	.word	0x04000120
 80016e4:	0800140b 	.word	0x0800140b
 80016e8:	fffffeff 	.word	0xfffffeff
 80016ec:	fffffedf 	.word	0xfffffedf

080016f0 <UART_DMARxHalfCplt>:
{
 80016f0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80016f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016f4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d002      	beq.n	8001700 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80016fa:	f7ff fe52 	bl	80013a2 <HAL_UART_RxHalfCpltCallback>
}
 80016fe:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001700:	3357      	adds	r3, #87	; 0x57
 8001702:	5ac1      	ldrh	r1, [r0, r3]
 8001704:	0849      	lsrs	r1, r1, #1
 8001706:	f7ff fe8a 	bl	800141e <HAL_UARTEx_RxEventCallback>
 800170a:	e7f8      	b.n	80016fe <UART_DMARxHalfCplt+0xe>

0800170c <UART_DMAReceiveCplt>:
{
 800170c:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800170e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001710:	6982      	ldr	r2, [r0, #24]
 8001712:	2a20      	cmp	r2, #32
 8001714:	d028      	beq.n	8001768 <UART_DMAReceiveCplt+0x5c>
    huart->RxXferCount = 0U;
 8001716:	225a      	movs	r2, #90	; 0x5a
 8001718:	2100      	movs	r1, #0
 800171a:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800171c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001720:	3a59      	subs	r2, #89	; 0x59
 8001722:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	6801      	ldr	r1, [r0, #0]
 800172a:	4d1c      	ldr	r5, [pc, #112]	; (800179c <UART_DMAReceiveCplt+0x90>)
 800172c:	4029      	ands	r1, r5
 800172e:	6001      	str	r1, [r0, #0]
 8001730:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001734:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001738:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	6881      	ldr	r1, [r0, #8]
 8001740:	4391      	bics	r1, r2
 8001742:	6081      	str	r1, [r0, #8]
 8001744:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001748:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800174c:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	688a      	ldr	r2, [r1, #8]
 8001754:	2440      	movs	r4, #64	; 0x40
 8001756:	43a2      	bics	r2, r4
 8001758:	608a      	str	r2, [r1, #8]
 800175a:	f380 8810 	msr	PRIMASK, r0
    huart->RxState = HAL_UART_STATE_READY;
 800175e:	2220      	movs	r2, #32
 8001760:	67da      	str	r2, [r3, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001764:	2a01      	cmp	r2, #1
 8001766:	d006      	beq.n	8001776 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001768:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800176a:	2a01      	cmp	r2, #1
 800176c:	d00f      	beq.n	800178e <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800176e:	0018      	movs	r0, r3
 8001770:	f7fe fe3a 	bl	80003e8 <HAL_UART_RxCpltCallback>
}
 8001774:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001776:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800177a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800177e:	6819      	ldr	r1, [r3, #0]
 8001780:	680a      	ldr	r2, [r1, #0]
 8001782:	3c30      	subs	r4, #48	; 0x30
 8001784:	43a2      	bics	r2, r4
 8001786:	600a      	str	r2, [r1, #0]
 8001788:	f380 8810 	msr	PRIMASK, r0
 800178c:	e7ec      	b.n	8001768 <UART_DMAReceiveCplt+0x5c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800178e:	3257      	adds	r2, #87	; 0x57
 8001790:	5a99      	ldrh	r1, [r3, r2]
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff fe43 	bl	800141e <HAL_UARTEx_RxEventCallback>
 8001798:	e7ec      	b.n	8001774 <UART_DMAReceiveCplt+0x68>
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	fffffeff 	.word	0xfffffeff

080017a0 <UART_SetConfig>:
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017a4:	6801      	ldr	r1, [r0, #0]
 80017a6:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017a8:	6883      	ldr	r3, [r0, #8]
 80017aa:	6900      	ldr	r0, [r0, #16]
 80017ac:	4303      	orrs	r3, r0
 80017ae:	6960      	ldr	r0, [r4, #20]
 80017b0:	4303      	orrs	r3, r0
 80017b2:	69e0      	ldr	r0, [r4, #28]
 80017b4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017b6:	483e      	ldr	r0, [pc, #248]	; (80018b0 <UART_SetConfig+0x110>)
 80017b8:	4002      	ands	r2, r0
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017be:	6822      	ldr	r2, [r4, #0]
 80017c0:	6853      	ldr	r3, [r2, #4]
 80017c2:	493c      	ldr	r1, [pc, #240]	; (80018b4 <UART_SetConfig+0x114>)
 80017c4:	400b      	ands	r3, r1
 80017c6:	68e1      	ldr	r1, [r4, #12]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017cc:	6821      	ldr	r1, [r4, #0]
 80017ce:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80017d0:	69a3      	ldr	r3, [r4, #24]
 80017d2:	6a20      	ldr	r0, [r4, #32]
 80017d4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017d6:	4838      	ldr	r0, [pc, #224]	; (80018b8 <UART_SetConfig+0x118>)
 80017d8:	4002      	ands	r2, r0
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <UART_SetConfig+0x11c>)
 80017e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e2:	2303      	movs	r3, #3
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d01b      	beq.n	8001822 <UART_SetConfig+0x82>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <UART_SetConfig+0x5a>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d037      	beq.n	8001862 <UART_SetConfig+0xc2>
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d00e      	beq.n	8001814 <UART_SetConfig+0x74>
        ret = HAL_ERROR;
 80017f6:	2201      	movs	r2, #1
 80017f8:	e02e      	b.n	8001858 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	69e2      	ldr	r2, [r4, #28]
 8001800:	429a      	cmp	r2, r3
 8001802:	d052      	beq.n	80018aa <UART_SetConfig+0x10a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001804:	f7ff fcfa 	bl	80011fc <HAL_RCC_GetPCLK1Freq>
        break;
 8001808:	e012      	b.n	8001830 <UART_SetConfig+0x90>
        pclk = (uint32_t) HSI_VALUE;
 800180a:	482d      	ldr	r0, [pc, #180]	; (80018c0 <UART_SetConfig+0x120>)
 800180c:	e035      	b.n	800187a <UART_SetConfig+0xda>
        pclk = (uint32_t) LSE_VALUE;
 800180e:	2080      	movs	r0, #128	; 0x80
 8001810:	0200      	lsls	r0, r0, #8
 8001812:	e032      	b.n	800187a <UART_SetConfig+0xda>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	69e2      	ldr	r2, [r4, #28]
 800181a:	429a      	cmp	r2, r3
 800181c:	d0f5      	beq.n	800180a <UART_SetConfig+0x6a>
        pclk = (uint32_t) HSI_VALUE;
 800181e:	4828      	ldr	r0, [pc, #160]	; (80018c0 <UART_SetConfig+0x120>)
 8001820:	e009      	b.n	8001836 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	69e2      	ldr	r2, [r4, #28]
 8001828:	429a      	cmp	r2, r3
 800182a:	d021      	beq.n	8001870 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 800182c:	f7ff fc12 	bl	8001054 <HAL_RCC_GetSysClockFreq>
 8001830:	2200      	movs	r2, #0
    if (pclk != 0U)
 8001832:	2800      	cmp	r0, #0
 8001834:	d010      	beq.n	8001858 <UART_SetConfig+0xb8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001836:	6863      	ldr	r3, [r4, #4]
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	1818      	adds	r0, r3, r0
 800183c:	6861      	ldr	r1, [r4, #4]
 800183e:	f7fe fc75 	bl	800012c <__udivsi3>
 8001842:	0403      	lsls	r3, r0, #16
 8001844:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001846:	0018      	movs	r0, r3
 8001848:	3810      	subs	r0, #16
 800184a:	491e      	ldr	r1, [pc, #120]	; (80018c4 <UART_SetConfig+0x124>)
        ret = HAL_ERROR;
 800184c:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800184e:	4288      	cmp	r0, r1
 8001850:	d802      	bhi.n	8001858 <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 8001852:	6822      	ldr	r2, [r4, #0]
 8001854:	60d3      	str	r3, [r2, #12]
 8001856:	2200      	movs	r2, #0
  huart->RxISR = NULL;
 8001858:	2300      	movs	r3, #0
 800185a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800185c:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800185e:	0010      	movs	r0, r2
 8001860:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	69e2      	ldr	r2, [r4, #28]
 8001868:	429a      	cmp	r2, r3
 800186a:	d0d0      	beq.n	800180e <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 800186c:	0018      	movs	r0, r3
 800186e:	e7e2      	b.n	8001836 <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetSysClockFreq();
 8001870:	f7ff fbf0 	bl	8001054 <HAL_RCC_GetSysClockFreq>
 8001874:	2200      	movs	r2, #0
    if (pclk != 0U)
 8001876:	2800      	cmp	r0, #0
 8001878:	d0ee      	beq.n	8001858 <UART_SetConfig+0xb8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800187a:	0040      	lsls	r0, r0, #1
 800187c:	6863      	ldr	r3, [r4, #4]
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	18c0      	adds	r0, r0, r3
 8001882:	6861      	ldr	r1, [r4, #4]
 8001884:	f7fe fc52 	bl	800012c <__udivsi3>
 8001888:	0403      	lsls	r3, r0, #16
 800188a:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800188c:	001d      	movs	r5, r3
 800188e:	3d10      	subs	r5, #16
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <UART_SetConfig+0x124>)
        ret = HAL_ERROR;
 8001892:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001894:	428d      	cmp	r5, r1
 8001896:	d8df      	bhi.n	8001858 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <UART_SetConfig+0x128>)
 800189a:	4010      	ands	r0, r2
        huart->Instance->BRR = brrtemp;
 800189c:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800189e:	071b      	lsls	r3, r3, #28
 80018a0:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80018a2:	4303      	orrs	r3, r0
 80018a4:	60d3      	str	r3, [r2, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	e7d6      	b.n	8001858 <UART_SetConfig+0xb8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80018aa:	f7ff fca7 	bl	80011fc <HAL_RCC_GetPCLK1Freq>
        break;
 80018ae:	e7e1      	b.n	8001874 <UART_SetConfig+0xd4>
 80018b0:	ffff69f3 	.word	0xffff69f3
 80018b4:	ffffcfff 	.word	0xffffcfff
 80018b8:	fffff4ff 	.word	0xfffff4ff
 80018bc:	40021000 	.word	0x40021000
 80018c0:	007a1200 	.word	0x007a1200
 80018c4:	0000ffef 	.word	0x0000ffef
 80018c8:	0000fff0 	.word	0x0000fff0

080018cc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018ce:	07db      	lsls	r3, r3, #31
 80018d0:	d506      	bpl.n	80018e0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018d2:	6802      	ldr	r2, [r0, #0]
 80018d4:	6853      	ldr	r3, [r2, #4]
 80018d6:	492c      	ldr	r1, [pc, #176]	; (8001988 <UART_AdvFeatureConfig+0xbc>)
 80018d8:	400b      	ands	r3, r1
 80018da:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80018dc:	430b      	orrs	r3, r1
 80018de:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018e2:	079b      	lsls	r3, r3, #30
 80018e4:	d506      	bpl.n	80018f4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018e6:	6802      	ldr	r2, [r0, #0]
 80018e8:	6853      	ldr	r3, [r2, #4]
 80018ea:	4928      	ldr	r1, [pc, #160]	; (800198c <UART_AdvFeatureConfig+0xc0>)
 80018ec:	400b      	ands	r3, r1
 80018ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018f6:	075b      	lsls	r3, r3, #29
 80018f8:	d506      	bpl.n	8001908 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018fa:	6802      	ldr	r2, [r0, #0]
 80018fc:	6853      	ldr	r3, [r2, #4]
 80018fe:	4924      	ldr	r1, [pc, #144]	; (8001990 <UART_AdvFeatureConfig+0xc4>)
 8001900:	400b      	ands	r3, r1
 8001902:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001904:	430b      	orrs	r3, r1
 8001906:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001908:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800190a:	071b      	lsls	r3, r3, #28
 800190c:	d506      	bpl.n	800191c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800190e:	6802      	ldr	r2, [r0, #0]
 8001910:	6853      	ldr	r3, [r2, #4]
 8001912:	4920      	ldr	r1, [pc, #128]	; (8001994 <UART_AdvFeatureConfig+0xc8>)
 8001914:	400b      	ands	r3, r1
 8001916:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001918:	430b      	orrs	r3, r1
 800191a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800191c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800191e:	06db      	lsls	r3, r3, #27
 8001920:	d506      	bpl.n	8001930 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001922:	6802      	ldr	r2, [r0, #0]
 8001924:	6893      	ldr	r3, [r2, #8]
 8001926:	491c      	ldr	r1, [pc, #112]	; (8001998 <UART_AdvFeatureConfig+0xcc>)
 8001928:	400b      	ands	r3, r1
 800192a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800192c:	430b      	orrs	r3, r1
 800192e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001930:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001932:	069b      	lsls	r3, r3, #26
 8001934:	d506      	bpl.n	8001944 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001936:	6802      	ldr	r2, [r0, #0]
 8001938:	6893      	ldr	r3, [r2, #8]
 800193a:	4918      	ldr	r1, [pc, #96]	; (800199c <UART_AdvFeatureConfig+0xd0>)
 800193c:	400b      	ands	r3, r1
 800193e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001940:	430b      	orrs	r3, r1
 8001942:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001944:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001946:	065b      	lsls	r3, r3, #25
 8001948:	d50b      	bpl.n	8001962 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800194a:	6802      	ldr	r2, [r0, #0]
 800194c:	6853      	ldr	r3, [r2, #4]
 800194e:	4914      	ldr	r1, [pc, #80]	; (80019a0 <UART_AdvFeatureConfig+0xd4>)
 8001950:	400b      	ands	r3, r1
 8001952:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001954:	430b      	orrs	r3, r1
 8001956:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	035b      	lsls	r3, r3, #13
 800195c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800195e:	429a      	cmp	r2, r3
 8001960:	d00a      	beq.n	8001978 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001962:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	d506      	bpl.n	8001976 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001968:	6802      	ldr	r2, [r0, #0]
 800196a:	6853      	ldr	r3, [r2, #4]
 800196c:	490d      	ldr	r1, [pc, #52]	; (80019a4 <UART_AdvFeatureConfig+0xd8>)
 800196e:	400b      	ands	r3, r1
 8001970:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001972:	430b      	orrs	r3, r1
 8001974:	6053      	str	r3, [r2, #4]
}
 8001976:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001978:	6802      	ldr	r2, [r0, #0]
 800197a:	6853      	ldr	r3, [r2, #4]
 800197c:	490a      	ldr	r1, [pc, #40]	; (80019a8 <UART_AdvFeatureConfig+0xdc>)
 800197e:	400b      	ands	r3, r1
 8001980:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001982:	430b      	orrs	r3, r1
 8001984:	6053      	str	r3, [r2, #4]
 8001986:	e7ec      	b.n	8001962 <UART_AdvFeatureConfig+0x96>
 8001988:	fffdffff 	.word	0xfffdffff
 800198c:	fffeffff 	.word	0xfffeffff
 8001990:	fffbffff 	.word	0xfffbffff
 8001994:	ffff7fff 	.word	0xffff7fff
 8001998:	ffffefff 	.word	0xffffefff
 800199c:	ffffdfff 	.word	0xffffdfff
 80019a0:	ffefffff 	.word	0xffefffff
 80019a4:	fff7ffff 	.word	0xfff7ffff
 80019a8:	ff9fffff 	.word	0xff9fffff

080019ac <UART_WaitOnFlagUntilTimeout>:
{
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	46d6      	mov	lr, sl
 80019b0:	464f      	mov	r7, r9
 80019b2:	4646      	mov	r6, r8
 80019b4:	b5c0      	push	{r6, r7, lr}
 80019b6:	0007      	movs	r7, r0
 80019b8:	000c      	movs	r4, r1
 80019ba:	0016      	movs	r6, r2
 80019bc:	4698      	mov	r8, r3
 80019be:	9d08      	ldr	r5, [sp, #32]
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80019c0:	2304      	movs	r3, #4
 80019c2:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	69d3      	ldr	r3, [r2, #28]
 80019ce:	4023      	ands	r3, r4
 80019d0:	1b1b      	subs	r3, r3, r4
 80019d2:	4259      	negs	r1, r3
 80019d4:	414b      	adcs	r3, r1
 80019d6:	42b3      	cmp	r3, r6
 80019d8:	d153      	bne.n	8001a82 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 80019da:	1c6b      	adds	r3, r5, #1
 80019dc:	d0f6      	beq.n	80019cc <UART_WaitOnFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019de:	f7fe fe43 	bl	8000668 <HAL_GetTick>
 80019e2:	4643      	mov	r3, r8
 80019e4:	1ac0      	subs	r0, r0, r3
 80019e6:	42a8      	cmp	r0, r5
 80019e8:	d82d      	bhi.n	8001a46 <UART_WaitOnFlagUntilTimeout+0x9a>
 80019ea:	2d00      	cmp	r5, #0
 80019ec:	d02b      	beq.n	8001a46 <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4649      	mov	r1, r9
 80019f4:	4211      	tst	r1, r2
 80019f6:	d0e8      	beq.n	80019ca <UART_WaitOnFlagUntilTimeout+0x1e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	4651      	mov	r1, sl
 80019fc:	420a      	tst	r2, r1
 80019fe:	d0e4      	beq.n	80019ca <UART_WaitOnFlagUntilTimeout+0x1e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a06:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a10:	6839      	ldr	r1, [r7, #0]
 8001a12:	680b      	ldr	r3, [r1, #0]
 8001a14:	4c1e      	ldr	r4, [pc, #120]	; (8001a90 <UART_WaitOnFlagUntilTimeout+0xe4>)
 8001a16:	4023      	ands	r3, r4
 8001a18:	600b      	str	r3, [r1, #0]
 8001a1a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a22:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	688b      	ldr	r3, [r1, #8]
 8001a2a:	4393      	bics	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
 8001a2e:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001a32:	2320      	movs	r3, #32
 8001a34:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001a36:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001a38:	327f      	adds	r2, #127	; 0x7f
 8001a3a:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8001a3c:	3354      	adds	r3, #84	; 0x54
 8001a3e:	2200      	movs	r2, #0
 8001a40:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8001a42:	2003      	movs	r0, #3
 8001a44:	e01e      	b.n	8001a84 <UART_WaitOnFlagUntilTimeout+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a46:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	680b      	ldr	r3, [r1, #0]
 8001a54:	4c0e      	ldr	r4, [pc, #56]	; (8001a90 <UART_WaitOnFlagUntilTimeout+0xe4>)
 8001a56:	4023      	ands	r3, r4
 8001a58:	600b      	str	r3, [r1, #0]
 8001a5a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a5e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a62:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	688b      	ldr	r3, [r1, #8]
 8001a6a:	4393      	bics	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
 8001a6e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8001a72:	2320      	movs	r3, #32
 8001a74:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001a76:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001a78:	3354      	adds	r3, #84	; 0x54
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001a7e:	2003      	movs	r0, #3
 8001a80:	e000      	b.n	8001a84 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8001a82:	2000      	movs	r0, #0
}
 8001a84:	bc1c      	pop	{r2, r3, r4}
 8001a86:	4690      	mov	r8, r2
 8001a88:	4699      	mov	r9, r3
 8001a8a:	46a2      	mov	sl, r4
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	fffffe5f 	.word	0xfffffe5f

08001a94 <HAL_UART_Transmit>:
{
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	46ce      	mov	lr, r9
 8001a98:	b500      	push	{lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	0004      	movs	r4, r0
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	0017      	movs	r7, r2
 8001aa2:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa4:	6f83      	ldr	r3, [r0, #120]	; 0x78
    return HAL_BUSY;
 8001aa6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d167      	bne.n	8001b7c <HAL_UART_Transmit+0xe8>
    if ((pData == NULL) || (Size == 0U))
 8001aac:	2900      	cmp	r1, #0
 8001aae:	d064      	beq.n	8001b7a <HAL_UART_Transmit+0xe6>
      return  HAL_ERROR;
 8001ab0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	d062      	beq.n	8001b7c <HAL_UART_Transmit+0xe8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	68a2      	ldr	r2, [r4, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d023      	beq.n	8001b08 <HAL_UART_Transmit+0x74>
    __HAL_LOCK(huart);
 8001ac0:	2374      	movs	r3, #116	; 0x74
 8001ac2:	5ce3      	ldrb	r3, [r4, r3]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d05d      	beq.n	8001b84 <HAL_UART_Transmit+0xf0>
 8001ac8:	2374      	movs	r3, #116	; 0x74
 8001aca:	2201      	movs	r2, #1
 8001acc:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ace:	330c      	adds	r3, #12
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ad4:	3b5f      	subs	r3, #95	; 0x5f
 8001ad6:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001ad8:	f7fe fdc6 	bl	8000668 <HAL_GetTick>
 8001adc:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 8001ade:	2350      	movs	r3, #80	; 0x50
 8001ae0:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8001aea:	2200      	movs	r2, #0
 8001aec:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aee:	68a2      	ldr	r2, [r4, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d00f      	beq.n	8001b14 <HAL_UART_Transmit+0x80>
    __HAL_UNLOCK(huart);
 8001af4:	2374      	movs	r3, #116	; 0x74
 8001af6:	2200      	movs	r2, #0
 8001af8:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8001afa:	3b22      	subs	r3, #34	; 0x22
 8001afc:	5ae3      	ldrh	r3, [r4, r3]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d02e      	beq.n	8001b62 <HAL_UART_Transmit+0xce>
      huart->TxXferCount--;
 8001b04:	2752      	movs	r7, #82	; 0x52
 8001b06:	e01c      	b.n	8001b42 <HAL_UART_Transmit+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b08:	6923      	ldr	r3, [r4, #16]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1d8      	bne.n	8001ac0 <HAL_UART_Transmit+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b0e:	07cb      	lsls	r3, r1, #31
 8001b10:	d5d6      	bpl.n	8001ac0 <HAL_UART_Transmit+0x2c>
 8001b12:	e033      	b.n	8001b7c <HAL_UART_Transmit+0xe8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	6923      	ldr	r3, [r4, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ec      	bne.n	8001af4 <HAL_UART_Transmit+0x60>
      pdata16bits = (uint16_t *) pData;
 8001b1a:	46b1      	mov	r9, r6
      pdata8bits  = NULL;
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	e7e9      	b.n	8001af4 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b20:	464b      	mov	r3, r9
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	0ddb      	lsrs	r3, r3, #23
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	469c      	mov	ip, r3
 8001b30:	44e1      	add	r9, ip
      huart->TxXferCount--;
 8001b32:	5be3      	ldrh	r3, [r4, r7]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	53e3      	strh	r3, [r4, r7]
    while (huart->TxXferCount > 0U)
 8001b3a:	5be3      	ldrh	r3, [r4, r7]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00f      	beq.n	8001b62 <HAL_UART_Transmit+0xce>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	9500      	str	r5, [sp, #0]
 8001b44:	9b03      	ldr	r3, [sp, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	f7ff ff2e 	bl	80019ac <UART_WaitOnFlagUntilTimeout>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d119      	bne.n	8001b88 <HAL_UART_Transmit+0xf4>
      if (pdata8bits == NULL)
 8001b54:	2e00      	cmp	r6, #0
 8001b56:	d0e3      	beq.n	8001b20 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b58:	7833      	ldrb	r3, [r6, #0]
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7e7      	b.n	8001b32 <HAL_UART_Transmit+0x9e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b62:	9500      	str	r5, [sp, #0]
 8001b64:	9b03      	ldr	r3, [sp, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	0020      	movs	r0, r4
 8001b6c:	f7ff ff1e 	bl	80019ac <UART_WaitOnFlagUntilTimeout>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d10b      	bne.n	8001b8c <HAL_UART_Transmit+0xf8>
    huart->gState = HAL_UART_STATE_READY;
 8001b74:	2320      	movs	r3, #32
 8001b76:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001b78:	e000      	b.n	8001b7c <HAL_UART_Transmit+0xe8>
      return  HAL_ERROR;
 8001b7a:	2001      	movs	r0, #1
}
 8001b7c:	b004      	add	sp, #16
 8001b7e:	bc04      	pop	{r2}
 8001b80:	4691      	mov	r9, r2
 8001b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8001b84:	2002      	movs	r0, #2
 8001b86:	e7f9      	b.n	8001b7c <HAL_UART_Transmit+0xe8>
        return HAL_TIMEOUT;
 8001b88:	2003      	movs	r0, #3
 8001b8a:	e7f7      	b.n	8001b7c <HAL_UART_Transmit+0xe8>
      return HAL_TIMEOUT;
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	e7f5      	b.n	8001b7c <HAL_UART_Transmit+0xe8>

08001b90 <UART_CheckIdleState>:
{
 8001b90:	b530      	push	{r4, r5, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	2200      	movs	r2, #0
 8001b9a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001b9c:	f7fe fd64 	bl	8000668 <HAL_GetTick>
 8001ba0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	071b      	lsls	r3, r3, #28
 8001ba8:	d40d      	bmi.n	8001bc6 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	075b      	lsls	r3, r3, #29
 8001bb0:	d416      	bmi.n	8001be0 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001bb6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8001bbc:	2274      	movs	r2, #116	; 0x74
 8001bbe:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001bc0:	2000      	movs	r0, #0
}
 8001bc2:	b003      	add	sp, #12
 8001bc4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <UART_CheckIdleState+0x6c>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	0003      	movs	r3, r0
 8001bce:	2200      	movs	r2, #0
 8001bd0:	0389      	lsls	r1, r1, #14
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	f7ff feea 	bl	80019ac <UART_WaitOnFlagUntilTimeout>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d0e6      	beq.n	8001baa <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001bdc:	2003      	movs	r0, #3
 8001bde:	e7f0      	b.n	8001bc2 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001be0:	2180      	movs	r1, #128	; 0x80
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <UART_CheckIdleState+0x6c>)
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	002b      	movs	r3, r5
 8001be8:	2200      	movs	r2, #0
 8001bea:	03c9      	lsls	r1, r1, #15
 8001bec:	0020      	movs	r0, r4
 8001bee:	f7ff fedd 	bl	80019ac <UART_WaitOnFlagUntilTimeout>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d0dd      	beq.n	8001bb2 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	e7e3      	b.n	8001bc2 <UART_CheckIdleState+0x32>
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	01ffffff 	.word	0x01ffffff

08001c00 <HAL_UART_Init>:
{
 8001c00:	b510      	push	{r4, lr}
 8001c02:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001c04:	d02e      	beq.n	8001c64 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c06:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d021      	beq.n	8001c50 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c0c:	2324      	movs	r3, #36	; 0x24
 8001c0e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	438b      	bics	r3, r1
 8001c18:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c1a:	0020      	movs	r0, r4
 8001c1c:	f7ff fdc0 	bl	80017a0 <UART_SetConfig>
 8001c20:	2801      	cmp	r0, #1
 8001c22:	d014      	beq.n	8001c4e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c2a:	6822      	ldr	r2, [r4, #0]
 8001c2c:	6853      	ldr	r3, [r2, #4]
 8001c2e:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_UART_Init+0x68>)
 8001c30:	400b      	ands	r3, r1
 8001c32:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c34:	6822      	ldr	r2, [r4, #0]
 8001c36:	6893      	ldr	r3, [r2, #8]
 8001c38:	2108      	movs	r1, #8
 8001c3a:	438b      	bics	r3, r1
 8001c3c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	6813      	ldr	r3, [r2, #0]
 8001c42:	3907      	subs	r1, #7
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001c48:	0020      	movs	r0, r4
 8001c4a:	f7ff ffa1 	bl	8001b90 <UART_CheckIdleState>
}
 8001c4e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c50:	3374      	adds	r3, #116	; 0x74
 8001c52:	2200      	movs	r2, #0
 8001c54:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001c56:	f7fe fc45 	bl	80004e4 <HAL_UART_MspInit>
 8001c5a:	e7d7      	b.n	8001c0c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001c5c:	0020      	movs	r0, r4
 8001c5e:	f7ff fe35 	bl	80018cc <UART_AdvFeatureConfig>
 8001c62:	e7e2      	b.n	8001c2a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
 8001c66:	e7f2      	b.n	8001c4e <HAL_UART_Init+0x4e>
 8001c68:	fffff7ff 	.word	0xfffff7ff

08001c6c <UART_Start_Receive_DMA>:
{
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	0004      	movs	r4, r0
  huart->pRxBuffPtr = pData;
 8001c70:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 8001c72:	2358      	movs	r3, #88	; 0x58
 8001c74:	52c2      	strh	r2, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c76:	3328      	adds	r3, #40	; 0x28
 8001c78:	2100      	movs	r1, #0
 8001c7a:	50c1      	str	r1, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c7c:	3b5e      	subs	r3, #94	; 0x5e
 8001c7e:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8001c80:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d013      	beq.n	8001cae <UART_Start_Receive_DMA+0x42>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c86:	4922      	ldr	r1, [pc, #136]	; (8001d10 <UART_Start_Receive_DMA+0xa4>)
 8001c88:	6299      	str	r1, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001c8a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001c8c:	4921      	ldr	r1, [pc, #132]	; (8001d14 <UART_Start_Receive_DMA+0xa8>)
 8001c8e:	62d9      	str	r1, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001c90:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001c92:	4921      	ldr	r1, [pc, #132]	; (8001d18 <UART_Start_Receive_DMA+0xac>)
 8001c94:	6319      	str	r1, [r3, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8001c96:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001c98:	2100      	movs	r1, #0
 8001c9a:	6359      	str	r1, [r3, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001c9c:	6801      	ldr	r1, [r0, #0]
 8001c9e:	3124      	adds	r1, #36	; 0x24
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001ca4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8001ca6:	f7fe fd75 	bl	8000794 <HAL_DMA_Start_IT>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d126      	bne.n	8001cfc <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8001cae:	2374      	movs	r3, #116	; 0x74
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cb4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb8:	3b73      	subs	r3, #115	; 0x73
 8001cba:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cbe:	6821      	ldr	r1, [r4, #0]
 8001cc0:	680d      	ldr	r5, [r1, #0]
 8001cc2:	3201      	adds	r2, #1
 8001cc4:	32ff      	adds	r2, #255	; 0xff
 8001cc6:	432a      	orrs	r2, r5
 8001cc8:	600a      	str	r2, [r1, #0]
 8001cca:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cd2:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd6:	6821      	ldr	r1, [r4, #0]
 8001cd8:	688a      	ldr	r2, [r1, #8]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	608a      	str	r2, [r1, #8]
 8001cde:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cea:	6822      	ldr	r2, [r4, #0]
 8001cec:	6893      	ldr	r3, [r2, #8]
 8001cee:	2040      	movs	r0, #64	; 0x40
 8001cf0:	4303      	orrs	r3, r0
 8001cf2:	6093      	str	r3, [r2, #8]
 8001cf4:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8001cf8:	2000      	movs	r0, #0
}
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	2210      	movs	r2, #16
 8001d00:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001d02:	3b0c      	subs	r3, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8001d08:	3b54      	subs	r3, #84	; 0x54
 8001d0a:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e7f4      	b.n	8001cfa <UART_Start_Receive_DMA+0x8e>
 8001d10:	0800170d 	.word	0x0800170d
 8001d14:	080016f1 	.word	0x080016f1
 8001d18:	080013a7 	.word	0x080013a7

08001d1c <HAL_UART_Receive_DMA>:
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d1e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d22:	2c20      	cmp	r4, #32
 8001d24:	d126      	bne.n	8001d74 <HAL_UART_Receive_DMA+0x58>
    if ((pData == NULL) || (Size == 0U))
 8001d26:	2900      	cmp	r1, #0
 8001d28:	d02d      	beq.n	8001d86 <HAL_UART_Receive_DMA+0x6a>
      return HAL_ERROR;
 8001d2a:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8001d2c:	2a00      	cmp	r2, #0
 8001d2e:	d021      	beq.n	8001d74 <HAL_UART_Receive_DMA+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	015b      	lsls	r3, r3, #5
 8001d34:	6884      	ldr	r4, [r0, #8]
 8001d36:	429c      	cmp	r4, r3
 8001d38:	d01e      	beq.n	8001d78 <HAL_UART_Receive_DMA+0x5c>
    __HAL_LOCK(huart);
 8001d3a:	2374      	movs	r3, #116	; 0x74
 8001d3c:	5cc3      	ldrb	r3, [r0, r3]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d023      	beq.n	8001d8a <HAL_UART_Receive_DMA+0x6e>
 8001d42:	2374      	movs	r3, #116	; 0x74
 8001d44:	2401      	movs	r4, #1
 8001d46:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d4c:	6803      	ldr	r3, [r0, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	d50c      	bpl.n	8001d6e <HAL_UART_Receive_DMA+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d54:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d5e:	6804      	ldr	r4, [r0, #0]
 8001d60:	6826      	ldr	r6, [r4, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	04db      	lsls	r3, r3, #19
 8001d66:	4333      	orrs	r3, r6
 8001d68:	6023      	str	r3, [r4, #0]
 8001d6a:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001d6e:	f7ff ff7d 	bl	8001c6c <UART_Start_Receive_DMA>
 8001d72:	0003      	movs	r3, r0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d78:	6903      	ldr	r3, [r0, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1dd      	bne.n	8001d3a <HAL_UART_Receive_DMA+0x1e>
        return  HAL_ERROR;
 8001d7e:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d80:	07cc      	lsls	r4, r1, #31
 8001d82:	d5da      	bpl.n	8001d3a <HAL_UART_Receive_DMA+0x1e>
 8001d84:	e7f6      	b.n	8001d74 <HAL_UART_Receive_DMA+0x58>
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e7f4      	b.n	8001d74 <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e7f2      	b.n	8001d74 <HAL_UART_Receive_DMA+0x58>
	...

08001d90 <__libc_init_array>:
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	2600      	movs	r6, #0
 8001d94:	4d0c      	ldr	r5, [pc, #48]	; (8001dc8 <__libc_init_array+0x38>)
 8001d96:	4c0d      	ldr	r4, [pc, #52]	; (8001dcc <__libc_init_array+0x3c>)
 8001d98:	1b64      	subs	r4, r4, r5
 8001d9a:	10a4      	asrs	r4, r4, #2
 8001d9c:	42a6      	cmp	r6, r4
 8001d9e:	d109      	bne.n	8001db4 <__libc_init_array+0x24>
 8001da0:	2600      	movs	r6, #0
 8001da2:	f000 f821 	bl	8001de8 <_init>
 8001da6:	4d0a      	ldr	r5, [pc, #40]	; (8001dd0 <__libc_init_array+0x40>)
 8001da8:	4c0a      	ldr	r4, [pc, #40]	; (8001dd4 <__libc_init_array+0x44>)
 8001daa:	1b64      	subs	r4, r4, r5
 8001dac:	10a4      	asrs	r4, r4, #2
 8001dae:	42a6      	cmp	r6, r4
 8001db0:	d105      	bne.n	8001dbe <__libc_init_array+0x2e>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	00b3      	lsls	r3, r6, #2
 8001db6:	58eb      	ldr	r3, [r5, r3]
 8001db8:	4798      	blx	r3
 8001dba:	3601      	adds	r6, #1
 8001dbc:	e7ee      	b.n	8001d9c <__libc_init_array+0xc>
 8001dbe:	00b3      	lsls	r3, r6, #2
 8001dc0:	58eb      	ldr	r3, [r5, r3]
 8001dc2:	4798      	blx	r3
 8001dc4:	3601      	adds	r6, #1
 8001dc6:	e7f2      	b.n	8001dae <__libc_init_array+0x1e>
 8001dc8:	08001e60 	.word	0x08001e60
 8001dcc:	08001e60 	.word	0x08001e60
 8001dd0:	08001e60 	.word	0x08001e60
 8001dd4:	08001e64 	.word	0x08001e64

08001dd8 <memset>:
 8001dd8:	0003      	movs	r3, r0
 8001dda:	1812      	adds	r2, r2, r0
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d100      	bne.n	8001de2 <memset+0xa>
 8001de0:	4770      	bx	lr
 8001de2:	7019      	strb	r1, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	e7f9      	b.n	8001ddc <memset+0x4>

08001de8 <_init>:
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dee:	bc08      	pop	{r3}
 8001df0:	469e      	mov	lr, r3
 8001df2:	4770      	bx	lr

08001df4 <_fini>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr
