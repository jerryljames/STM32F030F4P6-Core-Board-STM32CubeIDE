
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002344  08002344  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002344  08002344  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002344  08002344  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800234c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002358  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002358  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000753c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000141a  00000000  00000000  00027570  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  00028990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000810  00000000  00000000  00029268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000eebb  00000000  00000000  00029a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c5c  00000000  00000000  00038933  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005b8c7  00000000  00000000  0004058f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009be56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee0  00000000  00000000  0009bed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022fc 	.word	0x080022fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022fc 	.word	0x080022fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000226:	4b10      	ldr	r3, [pc, #64]	; (8000268 <MX_GPIO_Init+0x48>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <MX_GPIO_Init+0x48>)
 800022c:	2180      	movs	r1, #128	; 0x80
 800022e:	03c9      	lsls	r1, r1, #15
 8000230:	430a      	orrs	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_GPIO_Init+0x48>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	03db      	lsls	r3, r3, #15
 800023c:	4013      	ands	r3, r2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_GPIO_Init+0x48>)
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <MX_GPIO_Init+0x48>)
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	0289      	lsls	r1, r1, #10
 800024c:	430a      	orrs	r2, r1
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <MX_GPIO_Init+0x48>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	029b      	lsls	r3, r3, #10
 8000258:	4013      	ands	r3, r2
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]

}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b002      	add	sp, #8
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	40021000 	.word	0x40021000

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 fa1c 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f836 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f7ff ffd2 	bl	8000220 <MX_GPIO_Init>
  MX_TIM1_Init();
 800027c:	f000 f8c2 	bl	8000404 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	TIM1->CCR1 = 50;
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <main+0x70>)
 8000282:	2232      	movs	r2, #50	; 0x32
 8000284:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 50;
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <main+0x70>)
 8000288:	2232      	movs	r2, #50	; 0x32
 800028a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 50;
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <main+0x70>)
 800028e:	2232      	movs	r2, #50	; 0x32
 8000290:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <main+0x74>)
 8000294:	2100      	movs	r1, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f001 f9a8 	bl	80015ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <main+0x74>)
 800029e:	2104      	movs	r1, #4
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 f9a3 	bl	80015ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <main+0x74>)
 80002a8:	2108      	movs	r1, #8
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 f99e 	bl	80015ec <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 fa5d 	bl	8000774 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <main+0x74>)
 80002bc:	2100      	movs	r1, #0
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fa3a 	bl	8001738 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <main+0x74>)
 80002c6:	2104      	movs	r1, #4
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 fa35 	bl	8001738 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80002ce:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <main+0x74>)
 80002d0:	2108      	movs	r1, #8
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fa30 	bl	8001738 <HAL_TIM_PWM_Stop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80002d8:	e7fe      	b.n	80002d8 <main+0x6c>
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	40012c00 	.word	0x40012c00
 80002e0:	20000028 	.word	0x20000028

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b091      	sub	sp, #68	; 0x44
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	2410      	movs	r4, #16
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	0018      	movs	r0, r3
 80002f0:	2330      	movs	r3, #48	; 0x30
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f001 fff9 	bl	80022ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	2310      	movs	r3, #16
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f001 fff2 	bl	80022ec <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000308:	0021      	movs	r1, r4
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2201      	movs	r2, #1
 800030e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2201      	movs	r2, #1
 8000314:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2280      	movs	r2, #128	; 0x80
 8000320:	0252      	lsls	r2, r2, #9
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	0352      	lsls	r2, r2, #13
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fc63 	bl	8000c00 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800033e:	f000 f819 	bl	8000374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	003b      	movs	r3, r7
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	003b      	movs	r3, r7
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	003b      	movs	r3, r7
 800035c:	2101      	movs	r1, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f000 ff6a 	bl	8001238 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000368:	f000 f804 	bl	8000374 <Error_Handler>
  }
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b011      	add	sp, #68	; 0x44
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x44>)
 8000388:	699a      	ldr	r2, [r3, #24]
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <HAL_MspInit+0x44>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	619a      	str	r2, [r3, #24]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x44>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <HAL_MspInit+0x44>)
 80003a0:	69da      	ldr	r2, [r3, #28]
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <HAL_MspInit+0x44>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	0549      	lsls	r1, r1, #21
 80003a8:	430a      	orrs	r2, r1
 80003aa:	61da      	str	r2, [r3, #28]
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <HAL_MspInit+0x44>)
 80003ae:	69da      	ldr	r2, [r3, #28]
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	055b      	lsls	r3, r3, #21
 80003b4:	4013      	ands	r3, r2
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f0:	f000 f9a4 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b096      	sub	sp, #88	; 0x58
 8000408:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040a:	2348      	movs	r3, #72	; 0x48
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	0018      	movs	r0, r3
 8000410:	2310      	movs	r3, #16
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f001 ff69 	bl	80022ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041a:	2340      	movs	r3, #64	; 0x40
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	0018      	movs	r0, r3
 8000420:	2308      	movs	r3, #8
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f001 ff61 	bl	80022ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042a:	2324      	movs	r3, #36	; 0x24
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	0018      	movs	r0, r3
 8000430:	231c      	movs	r3, #28
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f001 ff59 	bl	80022ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	0018      	movs	r0, r3
 800043e:	2320      	movs	r3, #32
 8000440:	001a      	movs	r2, r3
 8000442:	2100      	movs	r1, #0
 8000444:	f001 ff52 	bl	80022ec <memset>

  htim1.Instance = TIM1;
 8000448:	4b51      	ldr	r3, [pc, #324]	; (8000590 <MX_TIM1_Init+0x18c>)
 800044a:	4a52      	ldr	r2, [pc, #328]	; (8000594 <MX_TIM1_Init+0x190>)
 800044c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800044e:	4b50      	ldr	r3, [pc, #320]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000450:	222f      	movs	r2, #47	; 0x2f
 8000452:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b4e      	ldr	r3, [pc, #312]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800045a:	4b4d      	ldr	r3, [pc, #308]	; (8000590 <MX_TIM1_Init+0x18c>)
 800045c:	2263      	movs	r2, #99	; 0x63
 800045e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000460:	4b4b      	ldr	r3, [pc, #300]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000466:	4b4a      	ldr	r3, [pc, #296]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046c:	4b48      	ldr	r3, [pc, #288]	; (8000590 <MX_TIM1_Init+0x18c>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000472:	4b47      	ldr	r3, [pc, #284]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000474:	0018      	movs	r0, r3
 8000476:	f001 f811 	bl	800149c <HAL_TIM_Base_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800047e:	f7ff ff79 	bl	8000374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000482:	2148      	movs	r1, #72	; 0x48
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	0152      	lsls	r2, r2, #5
 800048a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800048c:	187a      	adds	r2, r7, r1
 800048e:	4b40      	ldr	r3, [pc, #256]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fa82 	bl	800199c <HAL_TIM_ConfigClockSource>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800049c:	f7ff ff6a 	bl	8000374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004a0:	4b3b      	ldr	r3, [pc, #236]	; (8000590 <MX_TIM1_Init+0x18c>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 f84a 	bl	800153c <HAL_TIM_PWM_Init>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004ac:	f7ff ff62 	bl	8000374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	2140      	movs	r1, #64	; 0x40
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004be:	187a      	adds	r2, r7, r1
 80004c0:	4b33      	ldr	r3, [pc, #204]	; (8000590 <MX_TIM1_Init+0x18c>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fe3d 	bl	8002144 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80004ce:	f7ff ff51 	bl	8000374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d2:	2124      	movs	r1, #36	; 0x24
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2260      	movs	r2, #96	; 0x60
 80004d8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004fe:	1879      	adds	r1, r7, r1
 8000500:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000502:	2200      	movs	r2, #0
 8000504:	0018      	movs	r0, r3
 8000506:	f001 f98d 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800050e:	f7ff ff31 	bl	8000374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000512:	2324      	movs	r3, #36	; 0x24
 8000514:	18f9      	adds	r1, r7, r3
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000518:	2204      	movs	r2, #4
 800051a:	0018      	movs	r0, r3
 800051c:	f001 f982 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000524:	f7ff ff26 	bl	8000374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000528:	2324      	movs	r3, #36	; 0x24
 800052a:	18f9      	adds	r1, r7, r3
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_TIM1_Init+0x18c>)
 800052e:	2208      	movs	r2, #8
 8000530:	0018      	movs	r0, r3
 8000532:	f001 f977 	bl	8001824 <HAL_TIM_PWM_ConfigChannel>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800053a:	f7ff ff1b 	bl	8000374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0192      	lsls	r2, r2, #6
 8000562:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800056a:	1d3a      	adds	r2, r7, #4
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_TIM1_Init+0x18c>)
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fe39 	bl	80021e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800057a:	f7ff fefb 	bl	8000374 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <MX_TIM1_Init+0x18c>)
 8000580:	0018      	movs	r0, r3
 8000582:	f000 f829 	bl	80005d8 <HAL_TIM_MspPostInit>

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b016      	add	sp, #88	; 0x58
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	20000028 	.word	0x20000028
 8000594:	40012c00 	.word	0x40012c00

08000598 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_TIM_Base_MspInit+0x38>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d10d      	bne.n	80005c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_TIM_Base_MspInit+0x3c>)
 80005ac:	699a      	ldr	r2, [r3, #24]
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_TIM_Base_MspInit+0x3c>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0109      	lsls	r1, r1, #4
 80005b4:	430a      	orrs	r2, r1
 80005b6:	619a      	str	r2, [r3, #24]
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_TIM_Base_MspInit+0x3c>)
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b004      	add	sp, #16
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40012c00 	.word	0x40012c00
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	230c      	movs	r3, #12
 80005e2:	18fb      	adds	r3, r7, r3
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f001 fe7e 	bl	80022ec <memset>
  if(timHandle->Instance==TIM1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a16      	ldr	r2, [pc, #88]	; (8000650 <HAL_TIM_MspPostInit+0x78>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d125      	bne.n	8000646 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_TIM_MspPostInit+0x7c>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_TIM_MspPostInit+0x7c>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0289      	lsls	r1, r1, #10
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_TIM_MspPostInit+0x7c>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000616:	210c      	movs	r1, #12
 8000618:	187b      	adds	r3, r7, r1
 800061a:	22d0      	movs	r2, #208	; 0xd0
 800061c:	00d2      	lsls	r2, r2, #3
 800061e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2202      	movs	r2, #2
 8000624:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2202      	movs	r2, #2
 800062a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2202      	movs	r2, #2
 8000636:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	187a      	adds	r2, r7, r1
 800063a:	2390      	movs	r3, #144	; 0x90
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f000 f96d 	bl	8000920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b008      	add	sp, #32
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	40012c00 	.word	0x40012c00
 8000654:	40021000 	.word	0x40021000

08000658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490e      	ldr	r1, [pc, #56]	; (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0b      	ldr	r4, [pc, #44]	; (80006a4 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000682:	f7ff feba 	bl	80003fa <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000686:	f001 fe0d 	bl	80022a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068a:	f7ff fdef 	bl	800026c <main>

0800068e <LoopForever>:

LoopForever:
    b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   r0, =_estack
 8000690:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800069c:	0800234c 	.word	0x0800234c
  ldr r2, =_sbss
 80006a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a4:	20000074 	.word	0x20000074

080006a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_IRQHandler>
	...

080006ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <HAL_Init+0x24>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_Init+0x24>)
 80006b6:	2110      	movs	r1, #16
 80006b8:	430a      	orrs	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 f809 	bl	80006d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c2:	f7ff fe5d 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	40022000 	.word	0x40022000

080006d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_InitTick+0x5c>)
 80006de:	681c      	ldr	r4, [r3, #0]
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_InitTick+0x60>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	0019      	movs	r1, r3
 80006e6:	23fa      	movs	r3, #250	; 0xfa
 80006e8:	0098      	lsls	r0, r3, #2
 80006ea:	f7ff fd0d 	bl	8000108 <__udivsi3>
 80006ee:	0003      	movs	r3, r0
 80006f0:	0019      	movs	r1, r3
 80006f2:	0020      	movs	r0, r4
 80006f4:	f7ff fd08 	bl	8000108 <__udivsi3>
 80006f8:	0003      	movs	r3, r0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f903 	bl	8000906 <HAL_SYSTICK_Config>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	e00f      	b.n	8000728 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b03      	cmp	r3, #3
 800070c:	d80b      	bhi.n	8000726 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	2301      	movs	r3, #1
 8000712:	425b      	negs	r3, r3
 8000714:	2200      	movs	r2, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 f8e0 	bl	80008dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_InitTick+0x64>)
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	0018      	movs	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	b003      	add	sp, #12
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	20000008 	.word	0x20000008
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_IncTick+0x1c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	001a      	movs	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_IncTick+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	18d2      	adds	r2, r2, r3
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_IncTick+0x20>)
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000008 	.word	0x20000008
 800075c:	20000070 	.word	0x20000070

08000760 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	20000070 	.word	0x20000070

08000774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800077c:	f7ff fff0 	bl	8000760 <HAL_GetTick>
 8000780:	0003      	movs	r3, r0
 8000782:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	d005      	beq.n	800079a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_Delay+0x40>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	001a      	movs	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	189b      	adds	r3, r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	f7ff ffe0 	bl	8000760 <HAL_GetTick>
 80007a0:	0002      	movs	r2, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d8f7      	bhi.n	800079c <HAL_Delay+0x28>
  {
  }
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b004      	add	sp, #16
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000008 	.word	0x20000008

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b7f      	cmp	r3, #127	; 0x7f
 80007cc:	d828      	bhi.n	8000820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <__NVIC_SetPriority+0xd4>)
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	33c0      	adds	r3, #192	; 0xc0
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	589b      	ldr	r3, [r3, r2]
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	0011      	movs	r1, r2
 80007e4:	2203      	movs	r2, #3
 80007e6:	400a      	ands	r2, r1
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	21ff      	movs	r1, #255	; 0xff
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	401a      	ands	r2, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	2303      	movs	r3, #3
 8000806:	4003      	ands	r3, r0
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	481f      	ldr	r0, [pc, #124]	; (800088c <__NVIC_SetPriority+0xd4>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b25b      	sxtb	r3, r3
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	430a      	orrs	r2, r1
 8000818:	33c0      	adds	r3, #192	; 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800081e:	e031      	b.n	8000884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <__NVIC_SetPriority+0xd8>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	0019      	movs	r1, r3
 8000828:	230f      	movs	r3, #15
 800082a:	400b      	ands	r3, r1
 800082c:	3b08      	subs	r3, #8
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	3306      	adds	r3, #6
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	18d3      	adds	r3, r2, r3
 8000836:	3304      	adds	r3, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	1dfa      	adds	r2, r7, #7
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	0011      	movs	r1, r2
 8000840:	2203      	movs	r2, #3
 8000842:	400a      	ands	r2, r1
 8000844:	00d2      	lsls	r2, r2, #3
 8000846:	21ff      	movs	r1, #255	; 0xff
 8000848:	4091      	lsls	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	43d2      	mvns	r2, r2
 800084e:	401a      	ands	r2, r3
 8000850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	401a      	ands	r2, r3
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0018      	movs	r0, r3
 8000860:	2303      	movs	r3, #3
 8000862:	4003      	ands	r3, r0
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <__NVIC_SetPriority+0xd8>)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	001c      	movs	r4, r3
 8000870:	230f      	movs	r3, #15
 8000872:	4023      	ands	r3, r4
 8000874:	3b08      	subs	r3, #8
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	430a      	orrs	r2, r1
 800087a:	3306      	adds	r3, #6
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	18c3      	adds	r3, r0, r3
 8000880:	3304      	adds	r3, #4
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b003      	add	sp, #12
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <SysTick_Config+0x40>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d901      	bls.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e010      	b.n	80008cc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <SysTick_Config+0x44>)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	3a01      	subs	r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	2301      	movs	r3, #1
 80008b4:	425b      	negs	r3, r3
 80008b6:	2103      	movs	r1, #3
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff ff7d 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SysTick_Config+0x44>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <SysTick_Config+0x44>)
 80008c6:	2207      	movs	r2, #7
 80008c8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	00ffffff 	.word	0x00ffffff
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	210f      	movs	r1, #15
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	1c02      	adds	r2, r0, #0
 80008ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b004      	add	sp, #16
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ffbf 	bl	8000894 <SysTick_Config>
 8000916:	0003      	movs	r3, r0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092e:	e14f      	b.n	8000bd0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4091      	lsls	r1, r2
 800093a:	000a      	movs	r2, r1
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <HAL_GPIO_Init+0x28>
 8000946:	e140      	b.n	8000bca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2203      	movs	r2, #3
 800094e:	4013      	ands	r3, r2
 8000950:	2b01      	cmp	r3, #1
 8000952:	d005      	beq.n	8000960 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2203      	movs	r2, #3
 800095a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800095c:	2b02      	cmp	r3, #2
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	43da      	mvns	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	43da      	mvns	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	401a      	ands	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2203      	movs	r2, #3
 80009c8:	4013      	ands	r3, r2
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d017      	beq.n	80009fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	43da      	mvns	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4013      	ands	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2203      	movs	r2, #3
 8000a04:	4013      	ands	r3, r2
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d123      	bne.n	8000a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	58d3      	ldr	r3, [r2, r3]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2107      	movs	r1, #7
 8000a36:	400b      	ands	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	08da      	lsrs	r2, r3, #3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3208      	adds	r2, #8
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	6939      	ldr	r1, [r7, #16]
 8000a50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2203      	movs	r2, #3
 8000a70:	401a      	ands	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	029b      	lsls	r3, r3, #10
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d100      	bne.n	8000a94 <HAL_GPIO_Init+0x174>
 8000a92:	e09a      	b.n	8000bca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4b54      	ldr	r3, [pc, #336]	; (8000be8 <HAL_GPIO_Init+0x2c8>)
 8000a96:	699a      	ldr	r2, [r3, #24]
 8000a98:	4b53      	ldr	r3, [pc, #332]	; (8000be8 <HAL_GPIO_Init+0x2c8>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	619a      	str	r2, [r3, #24]
 8000aa0:	4b51      	ldr	r3, [pc, #324]	; (8000be8 <HAL_GPIO_Init+0x2c8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aac:	4a4f      	ldr	r2, [pc, #316]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	589b      	ldr	r3, [r3, r2]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	2203      	movs	r2, #3
 8000abe:	4013      	ands	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	0013      	movs	r3, r2
 8000ac8:	43da      	mvns	r2, r3
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	2390      	movs	r3, #144	; 0x90
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0x1e2>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a44      	ldr	r2, [pc, #272]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d00d      	beq.n	8000afe <HAL_GPIO_Init+0x1de>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a43      	ldr	r2, [pc, #268]	; (8000bf4 <HAL_GPIO_Init+0x2d4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d007      	beq.n	8000afa <HAL_GPIO_Init+0x1da>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a42      	ldr	r2, [pc, #264]	; (8000bf8 <HAL_GPIO_Init+0x2d8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_GPIO_Init+0x1d6>
 8000af2:	2303      	movs	r3, #3
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x1e4>
 8000af6:	2305      	movs	r3, #5
 8000af8:	e004      	b.n	8000b04 <HAL_GPIO_Init+0x1e4>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e002      	b.n	8000b04 <HAL_GPIO_Init+0x1e4>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <HAL_GPIO_Init+0x1e4>
 8000b02:	2300      	movs	r3, #0
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	2103      	movs	r1, #3
 8000b08:	400a      	ands	r2, r1
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	4093      	lsls	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b14:	4935      	ldr	r1, [pc, #212]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	025b      	lsls	r3, r3, #9
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43da      	mvns	r2, r3
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	029b      	lsls	r3, r3, #10
 8000b64:	4013      	ands	r3, r2
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	035b      	lsls	r3, r3, #13
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	039b      	lsls	r3, r3, #14
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_GPIO_Init+0x2dc>)
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	40da      	lsrs	r2, r3
 8000bd8:	1e13      	subs	r3, r2, #0
 8000bda:	d000      	beq.n	8000bde <HAL_GPIO_Init+0x2be>
 8000bdc:	e6a8      	b.n	8000930 <HAL_GPIO_Init+0x10>
  } 
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b006      	add	sp, #24
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010000 	.word	0x40010000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	48000c00 	.word	0x48000c00
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e303      	b.n	800121a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d100      	bne.n	8000c1e <HAL_RCC_OscConfig+0x1e>
 8000c1c:	e08d      	b.n	8000d3a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c1e:	4bc4      	ldr	r3, [pc, #784]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	220c      	movs	r2, #12
 8000c24:	4013      	ands	r3, r2
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d00e      	beq.n	8000c48 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c2a:	4bc1      	ldr	r3, [pc, #772]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	220c      	movs	r2, #12
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	d116      	bne.n	8000c64 <HAL_RCC_OscConfig+0x64>
 8000c36:	4bbe      	ldr	r3, [pc, #760]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	401a      	ands	r2, r3
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	025b      	lsls	r3, r3, #9
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d10d      	bne.n	8000c64 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c48:	4bb9      	ldr	r3, [pc, #740]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	029b      	lsls	r3, r3, #10
 8000c50:	4013      	ands	r3, r2
 8000c52:	d100      	bne.n	8000c56 <HAL_RCC_OscConfig+0x56>
 8000c54:	e070      	b.n	8000d38 <HAL_RCC_OscConfig+0x138>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d000      	beq.n	8000c60 <HAL_RCC_OscConfig+0x60>
 8000c5e:	e06b      	b.n	8000d38 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e2da      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d107      	bne.n	8000c7c <HAL_RCC_OscConfig+0x7c>
 8000c6c:	4bb0      	ldr	r3, [pc, #704]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4baf      	ldr	r3, [pc, #700]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0249      	lsls	r1, r1, #9
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e02f      	b.n	8000cdc <HAL_RCC_OscConfig+0xdc>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10c      	bne.n	8000c9e <HAL_RCC_OscConfig+0x9e>
 8000c84:	4baa      	ldr	r3, [pc, #680]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4ba9      	ldr	r3, [pc, #676]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	49aa      	ldr	r1, [pc, #680]	; (8000f34 <HAL_RCC_OscConfig+0x334>)
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	4ba7      	ldr	r3, [pc, #668]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4ba6      	ldr	r3, [pc, #664]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000c96:	49a8      	ldr	r1, [pc, #672]	; (8000f38 <HAL_RCC_OscConfig+0x338>)
 8000c98:	400a      	ands	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e01e      	b.n	8000cdc <HAL_RCC_OscConfig+0xdc>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d10e      	bne.n	8000cc4 <HAL_RCC_OscConfig+0xc4>
 8000ca6:	4ba2      	ldr	r3, [pc, #648]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4ba1      	ldr	r3, [pc, #644]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	02c9      	lsls	r1, r1, #11
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	4b9e      	ldr	r3, [pc, #632]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b9d      	ldr	r3, [pc, #628]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e00b      	b.n	8000cdc <HAL_RCC_OscConfig+0xdc>
 8000cc4:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b99      	ldr	r3, [pc, #612]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000cca:	499a      	ldr	r1, [pc, #616]	; (8000f34 <HAL_RCC_OscConfig+0x334>)
 8000ccc:	400a      	ands	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	4b97      	ldr	r3, [pc, #604]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b96      	ldr	r3, [pc, #600]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	4998      	ldr	r1, [pc, #608]	; (8000f38 <HAL_RCC_OscConfig+0x338>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d014      	beq.n	8000d0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fd3c 	bl	8000760 <HAL_GetTick>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cee:	f7ff fd37 	bl	8000760 <HAL_GetTick>
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b64      	cmp	r3, #100	; 0x64
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e28c      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d00:	4b8b      	ldr	r3, [pc, #556]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	029b      	lsls	r3, r3, #10
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d0f0      	beq.n	8000cee <HAL_RCC_OscConfig+0xee>
 8000d0c:	e015      	b.n	8000d3a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fd27 	bl	8000760 <HAL_GetTick>
 8000d12:	0003      	movs	r3, r0
 8000d14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fd22 	bl	8000760 <HAL_GetTick>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b64      	cmp	r3, #100	; 0x64
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e277      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2a:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	029b      	lsls	r3, r3, #10
 8000d32:	4013      	ands	r3, r2
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x118>
 8000d36:	e000      	b.n	8000d3a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4013      	ands	r3, r2
 8000d42:	d100      	bne.n	8000d46 <HAL_RCC_OscConfig+0x146>
 8000d44:	e069      	b.n	8000e1a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d46:	4b7a      	ldr	r3, [pc, #488]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d00b      	beq.n	8000d68 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d50:	4b77      	ldr	r3, [pc, #476]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	220c      	movs	r2, #12
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d11c      	bne.n	8000d96 <HAL_RCC_OscConfig+0x196>
 8000d5c:	4b74      	ldr	r3, [pc, #464]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	025b      	lsls	r3, r3, #9
 8000d64:	4013      	ands	r3, r2
 8000d66:	d116      	bne.n	8000d96 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d68:	4b71      	ldr	r3, [pc, #452]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d005      	beq.n	8000d7e <HAL_RCC_OscConfig+0x17e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d001      	beq.n	8000d7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e24d      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7e:	4b6c      	ldr	r3, [pc, #432]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	22f8      	movs	r2, #248	; 0xf8
 8000d84:	4393      	bics	r3, r2
 8000d86:	0019      	movs	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	00da      	lsls	r2, r3, #3
 8000d8e:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000d90:	430a      	orrs	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d94:	e041      	b.n	8000e1a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d024      	beq.n	8000de8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d9e:	4b64      	ldr	r3, [pc, #400]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000daa:	f7ff fcd9 	bl	8000760 <HAL_GetTick>
 8000dae:	0003      	movs	r3, r0
 8000db0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db4:	f7ff fcd4 	bl	8000760 <HAL_GetTick>
 8000db8:	0002      	movs	r2, r0
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e229      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d0f1      	beq.n	8000db4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd0:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	22f8      	movs	r2, #248	; 0xf8
 8000dd6:	4393      	bics	r3, r2
 8000dd8:	0019      	movs	r1, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	00da      	lsls	r2, r3, #3
 8000de0:	4b53      	ldr	r3, [pc, #332]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e018      	b.n	8000e1a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000de8:	4b51      	ldr	r3, [pc, #324]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b50      	ldr	r3, [pc, #320]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	438a      	bics	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fcb4 	bl	8000760 <HAL_GetTick>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fcaf 	bl	8000760 <HAL_GetTick>
 8000e02:	0002      	movs	r2, r0
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e204      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e10:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2202      	movs	r2, #2
 8000e16:	4013      	ands	r3, r2
 8000e18:	d1f1      	bne.n	8000dfe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4013      	ands	r3, r2
 8000e22:	d036      	beq.n	8000e92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d019      	beq.n	8000e60 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e38:	f7ff fc92 	bl	8000760 <HAL_GetTick>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e42:	f7ff fc8d 	bl	8000760 <HAL_GetTick>
 8000e46:	0002      	movs	r2, r0
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e1e2      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d0f1      	beq.n	8000e42 <HAL_RCC_OscConfig+0x242>
 8000e5e:	e018      	b.n	8000e92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	438a      	bics	r2, r1
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fc78 	bl	8000760 <HAL_GetTick>
 8000e70:	0003      	movs	r3, r0
 8000e72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc73 	bl	8000760 <HAL_GetTick>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1c8      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e88:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d1f1      	bne.n	8000e76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2204      	movs	r2, #4
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d100      	bne.n	8000e9e <HAL_RCC_OscConfig+0x29e>
 8000e9c:	e0b6      	b.n	800100c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e9e:	231f      	movs	r3, #31
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	69da      	ldr	r2, [r3, #28]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	055b      	lsls	r3, r3, #21
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d111      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0549      	lsls	r1, r1, #21
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	61da      	str	r2, [r3, #28]
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	055b      	lsls	r3, r3, #21
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ece:	231f      	movs	r3, #31
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_RCC_OscConfig+0x33c>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d11a      	bne.n	8000f18 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_RCC_OscConfig+0x33c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_RCC_OscConfig+0x33c>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0049      	lsls	r1, r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc36 	bl	8000760 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000efa:	f7ff fc31 	bl	8000760 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b64      	cmp	r3, #100	; 0x64
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e186      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_RCC_OscConfig+0x33c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4013      	ands	r3, r2
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10f      	bne.n	8000f40 <HAL_RCC_OscConfig+0x340>
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_RCC_OscConfig+0x330>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	e036      	b.n	8000f9c <HAL_RCC_OscConfig+0x39c>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40021000 	.word	0x40021000
 8000f34:	fffeffff 	.word	0xfffeffff
 8000f38:	fffbffff 	.word	0xfffbffff
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x362>
 8000f48:	4bb6      	ldr	r3, [pc, #728]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	4bb5      	ldr	r3, [pc, #724]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	621a      	str	r2, [r3, #32]
 8000f54:	4bb3      	ldr	r3, [pc, #716]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	4bb2      	ldr	r3, [pc, #712]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	621a      	str	r2, [r3, #32]
 8000f60:	e01c      	b.n	8000f9c <HAL_RCC_OscConfig+0x39c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x384>
 8000f6a:	4bae      	ldr	r3, [pc, #696]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f6c:	6a1a      	ldr	r2, [r3, #32]
 8000f6e:	4bad      	ldr	r3, [pc, #692]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f70:	2104      	movs	r1, #4
 8000f72:	430a      	orrs	r2, r1
 8000f74:	621a      	str	r2, [r3, #32]
 8000f76:	4bab      	ldr	r3, [pc, #684]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f78:	6a1a      	ldr	r2, [r3, #32]
 8000f7a:	4baa      	ldr	r3, [pc, #680]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	621a      	str	r2, [r3, #32]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0x39c>
 8000f84:	4ba7      	ldr	r3, [pc, #668]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f86:	6a1a      	ldr	r2, [r3, #32]
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	621a      	str	r2, [r3, #32]
 8000f90:	4ba4      	ldr	r3, [pc, #656]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	4ba3      	ldr	r3, [pc, #652]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000f96:	2104      	movs	r1, #4
 8000f98:	438a      	bics	r2, r1
 8000f9a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d014      	beq.n	8000fce <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fbdc 	bl	8000760 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	e009      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fbd7 	bl	8000760 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4a9b      	ldr	r2, [pc, #620]	; (8001228 <HAL_RCC_OscConfig+0x628>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e12b      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc2:	4b98      	ldr	r3, [pc, #608]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x3ae>
 8000fcc:	e013      	b.n	8000ff6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fbc7 	bl	8000760 <HAL_GetTick>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd6:	e009      	b.n	8000fec <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fbc2 	bl	8000760 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a91      	ldr	r2, [pc, #580]	; (8001228 <HAL_RCC_OscConfig+0x628>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e116      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	4b8d      	ldr	r3, [pc, #564]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ff6:	231f      	movs	r3, #31
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001000:	4b88      	ldr	r3, [pc, #544]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001002:	69da      	ldr	r2, [r3, #28]
 8001004:	4b87      	ldr	r3, [pc, #540]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001006:	4989      	ldr	r1, [pc, #548]	; (800122c <HAL_RCC_OscConfig+0x62c>)
 8001008:	400a      	ands	r2, r1
 800100a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2210      	movs	r2, #16
 8001012:	4013      	ands	r3, r2
 8001014:	d063      	beq.n	80010de <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d12a      	bne.n	8001074 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800101e:	4b81      	ldr	r3, [pc, #516]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	4b80      	ldr	r3, [pc, #512]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001024:	2104      	movs	r1, #4
 8001026:	430a      	orrs	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800102a:	4b7e      	ldr	r3, [pc, #504]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102e:	4b7d      	ldr	r3, [pc, #500]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb93 	bl	8000760 <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001040:	f7ff fb8e 	bl	8000760 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e0e3      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001056:	2202      	movs	r2, #2
 8001058:	4013      	ands	r3, r2
 800105a:	d0f1      	beq.n	8001040 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800105c:	4b71      	ldr	r3, [pc, #452]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	22f8      	movs	r2, #248	; 0xf8
 8001062:	4393      	bics	r3, r2
 8001064:	0019      	movs	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	00da      	lsls	r2, r3, #3
 800106c:	4b6d      	ldr	r3, [pc, #436]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800106e:	430a      	orrs	r2, r1
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
 8001072:	e034      	b.n	80010de <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	3305      	adds	r3, #5
 800107a:	d111      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800107c:	4b69      	ldr	r3, [pc, #420]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800107e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001082:	2104      	movs	r1, #4
 8001084:	438a      	bics	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001088:	4b66      	ldr	r3, [pc, #408]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	22f8      	movs	r2, #248	; 0xf8
 800108e:	4393      	bics	r3, r2
 8001090:	0019      	movs	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	00da      	lsls	r2, r3, #3
 8001098:	4b62      	ldr	r3, [pc, #392]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800109a:	430a      	orrs	r2, r1
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
 800109e:	e01e      	b.n	80010de <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010a0:	4b60      	ldr	r3, [pc, #384]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80010a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a4:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80010a6:	2104      	movs	r1, #4
 80010a8:	430a      	orrs	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010ac:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80010ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b0:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	438a      	bics	r2, r1
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b8:	f7ff fb52 	bl	8000760 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010c2:	f7ff fb4d 	bl	8000760 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e0a2      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	2202      	movs	r2, #2
 80010da:	4013      	ands	r3, r2
 80010dc:	d1f1      	bne.n	80010c2 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d100      	bne.n	80010e8 <HAL_RCC_OscConfig+0x4e8>
 80010e6:	e097      	b.n	8001218 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	220c      	movs	r2, #12
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d100      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4f6>
 80010f4:	e06b      	b.n	80011ce <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d14c      	bne.n	8001198 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001104:	494a      	ldr	r1, [pc, #296]	; (8001230 <HAL_RCC_OscConfig+0x630>)
 8001106:	400a      	ands	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fb29 	bl	8000760 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fb24 	bl	8000760 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e079      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	049b      	lsls	r3, r3, #18
 800112e:	4013      	ands	r3, r2
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001132:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	220f      	movs	r2, #15
 8001138:	4393      	bics	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001142:	430a      	orrs	r2, r1
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a3a      	ldr	r2, [pc, #232]	; (8001234 <HAL_RCC_OscConfig+0x634>)
 800114c:	4013      	ands	r3, r2
 800114e:	0019      	movs	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	431a      	orrs	r2, r3
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800115c:	430a      	orrs	r2, r1
 800115e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	0449      	lsls	r1, r1, #17
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff faf7 	bl	8000760 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001178:	f7ff faf2 	bl	8000760 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e047      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	049b      	lsls	r3, r3, #18
 8001192:	4013      	ands	r3, r2
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x578>
 8001196:	e03f      	b.n	8001218 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 800119e:	4924      	ldr	r1, [pc, #144]	; (8001230 <HAL_RCC_OscConfig+0x630>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fadc 	bl	8000760 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff fad7 	bl	8000760 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e02c      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	049b      	lsls	r3, r3, #18
 80011c8:	4013      	ands	r3, r2
 80011ca:	d1f0      	bne.n	80011ae <HAL_RCC_OscConfig+0x5ae>
 80011cc:	e024      	b.n	8001218 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e01f      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_RCC_OscConfig+0x624>)
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	401a      	ands	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d10e      	bne.n	8001214 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	220f      	movs	r2, #15
 80011fa:	401a      	ands	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001200:	429a      	cmp	r2, r3
 8001202:	d107      	bne.n	8001214 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	23f0      	movs	r3, #240	; 0xf0
 8001208:	039b      	lsls	r3, r3, #14
 800120a:	401a      	ands	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b008      	add	sp, #32
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40021000 	.word	0x40021000
 8001228:	00001388 	.word	0x00001388
 800122c:	efffffff 	.word	0xefffffff
 8001230:	feffffff 	.word	0xfeffffff
 8001234:	ffc2ffff 	.word	0xffc2ffff

08001238 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0b3      	b.n	80013b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d911      	bls.n	800127e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125a:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	4393      	bics	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	4b55      	ldr	r3, [pc, #340]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126c:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d001      	beq.n	800127e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e09a      	b.n	80013b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d015      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2204      	movs	r2, #4
 800128e:	4013      	ands	r3, r2
 8001290:	d006      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001292:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 8001298:	21e0      	movs	r1, #224	; 0xe0
 800129a:	00c9      	lsls	r1, r1, #3
 800129c:	430a      	orrs	r2, r1
 800129e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	22f0      	movs	r2, #240	; 0xf0
 80012a6:	4393      	bics	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 80012b0:	430a      	orrs	r2, r1
 80012b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	4013      	ands	r3, r2
 80012bc:	d040      	beq.n	8001340 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	029b      	lsls	r3, r3, #10
 80012ce:	4013      	ands	r3, r2
 80012d0:	d114      	bne.n	80012fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e06e      	b.n	80013b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	049b      	lsls	r3, r3, #18
 80012e6:	4013      	ands	r3, r2
 80012e8:	d108      	bne.n	80012fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e062      	b.n	80013b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2202      	movs	r2, #2
 80012f4:	4013      	ands	r3, r2
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e05b      	b.n	80013b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2203      	movs	r2, #3
 8001302:	4393      	bics	r3, r2
 8001304:	0019      	movs	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001310:	f7ff fa26 	bl	8000760 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001318:	e009      	b.n	800132e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131a:	f7ff fa21 	bl	8000760 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_RCC_ClockConfig+0x18c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e042      	b.n	80013b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	220c      	movs	r2, #12
 8001334:	401a      	ands	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	429a      	cmp	r2, r3
 800133e:	d1ec      	bne.n	800131a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2201      	movs	r2, #1
 8001346:	4013      	ands	r3, r2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d211      	bcs.n	8001372 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	4393      	bics	r3, r2
 8001356:	0019      	movs	r1, r3
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_RCC_ClockConfig+0x184>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e020      	b.n	80013b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2204      	movs	r2, #4
 8001378:	4013      	ands	r3, r2
 800137a:	d009      	beq.n	8001390 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_RCC_ClockConfig+0x190>)
 8001382:	4013      	ands	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 800138c:	430a      	orrs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001390:	f000 f820 	bl	80013d4 <HAL_RCC_GetSysClockFreq>
 8001394:	0001      	movs	r1, r0
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_RCC_ClockConfig+0x188>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	220f      	movs	r2, #15
 800139e:	4013      	ands	r3, r2
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_RCC_ClockConfig+0x194>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	000a      	movs	r2, r1
 80013a6:	40da      	lsrs	r2, r3
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_RCC_ClockConfig+0x198>)
 80013aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff f991 	bl	80006d4 <HAL_InitTick>
  
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b004      	add	sp, #16
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	00001388 	.word	0x00001388
 80013c8:	fffff8ff 	.word	0xfffff8ff
 80013cc:	08002334 	.word	0x08002334
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08f      	sub	sp, #60	; 0x3c
 80013d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80013da:	2314      	movs	r3, #20
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	4a2b      	ldr	r2, [pc, #172]	; (800148c <HAL_RCC_GetSysClockFreq+0xb8>)
 80013e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013e2:	c313      	stmia	r3!, {r0, r1, r4}
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013ee:	c313      	stmia	r3!, {r0, r1, r4}
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80013fc:	2300      	movs	r3, #0
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_RCC_GetSysClockFreq+0xc0>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	220c      	movs	r2, #12
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d002      	beq.n	800141e <HAL_RCC_GetSysClockFreq+0x4a>
 8001418:	2b08      	cmp	r3, #8
 800141a:	d003      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0x50>
 800141c:	e02d      	b.n	800147a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001422:	e02d      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	220f      	movs	r2, #15
 800142a:	4013      	ands	r3, r2
 800142c:	2214      	movs	r2, #20
 800142e:	18ba      	adds	r2, r7, r2
 8001430:	5cd3      	ldrb	r3, [r2, r3]
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	220f      	movs	r2, #15
 800143a:	4013      	ands	r3, r2
 800143c:	1d3a      	adds	r2, r7, #4
 800143e:	5cd3      	ldrb	r3, [r2, r3]
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	4013      	ands	r3, r2
 800144a:	d009      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800144c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800144e:	4812      	ldr	r0, [pc, #72]	; (8001498 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001450:	f7fe fe5a 	bl	8000108 <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	001a      	movs	r2, r3
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	4353      	muls	r3, r2
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
 800145e:	e009      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001462:	000a      	movs	r2, r1
 8001464:	0152      	lsls	r2, r2, #5
 8001466:	1a52      	subs	r2, r2, r1
 8001468:	0193      	lsls	r3, r2, #6
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	185b      	adds	r3, r3, r1
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001478:	e002      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <HAL_RCC_GetSysClockFreq+0xc4>)
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800147e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b00f      	add	sp, #60	; 0x3c
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	08002314 	.word	0x08002314
 8001490:	08002324 	.word	0x08002324
 8001494:	40021000 	.word	0x40021000
 8001498:	007a1200 	.word	0x007a1200

0800149c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e042      	b.n	8001534 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	223d      	movs	r2, #61	; 0x3d
 80014b2:	5c9b      	ldrb	r3, [r3, r2]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d107      	bne.n	80014ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	223c      	movs	r2, #60	; 0x3c
 80014be:	2100      	movs	r1, #0
 80014c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff f867 	bl	8000598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	223d      	movs	r2, #61	; 0x3d
 80014ce:	2102      	movs	r1, #2
 80014d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3304      	adds	r3, #4
 80014da:	0019      	movs	r1, r3
 80014dc:	0010      	movs	r0, r2
 80014de:	f000 fb27 	bl	8001b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2246      	movs	r2, #70	; 0x46
 80014e6:	2101      	movs	r1, #1
 80014e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	223e      	movs	r2, #62	; 0x3e
 80014ee:	2101      	movs	r1, #1
 80014f0:	5499      	strb	r1, [r3, r2]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	223f      	movs	r2, #63	; 0x3f
 80014f6:	2101      	movs	r1, #1
 80014f8:	5499      	strb	r1, [r3, r2]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	2101      	movs	r1, #1
 8001500:	5499      	strb	r1, [r3, r2]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2241      	movs	r2, #65	; 0x41
 8001506:	2101      	movs	r1, #1
 8001508:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2242      	movs	r2, #66	; 0x42
 800150e:	2101      	movs	r1, #1
 8001510:	5499      	strb	r1, [r3, r2]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2243      	movs	r2, #67	; 0x43
 8001516:	2101      	movs	r1, #1
 8001518:	5499      	strb	r1, [r3, r2]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2244      	movs	r2, #68	; 0x44
 800151e:	2101      	movs	r1, #1
 8001520:	5499      	strb	r1, [r3, r2]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2245      	movs	r2, #69	; 0x45
 8001526:	2101      	movs	r1, #1
 8001528:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	223d      	movs	r2, #61	; 0x3d
 800152e:	2101      	movs	r1, #1
 8001530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e042      	b.n	80015d4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	223d      	movs	r2, #61	; 0x3d
 8001552:	5c9b      	ldrb	r3, [r3, r2]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	223c      	movs	r2, #60	; 0x3c
 800155e:	2100      	movs	r1, #0
 8001560:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	0018      	movs	r0, r3
 8001566:	f000 f839 	bl	80015dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	223d      	movs	r2, #61	; 0x3d
 800156e:	2102      	movs	r1, #2
 8001570:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	0019      	movs	r1, r3
 800157c:	0010      	movs	r0, r2
 800157e:	f000 fad7 	bl	8001b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2246      	movs	r2, #70	; 0x46
 8001586:	2101      	movs	r1, #1
 8001588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	223e      	movs	r2, #62	; 0x3e
 800158e:	2101      	movs	r1, #1
 8001590:	5499      	strb	r1, [r3, r2]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	223f      	movs	r2, #63	; 0x3f
 8001596:	2101      	movs	r1, #1
 8001598:	5499      	strb	r1, [r3, r2]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	2101      	movs	r1, #1
 80015a0:	5499      	strb	r1, [r3, r2]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2241      	movs	r2, #65	; 0x41
 80015a6:	2101      	movs	r1, #1
 80015a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2242      	movs	r2, #66	; 0x42
 80015ae:	2101      	movs	r1, #1
 80015b0:	5499      	strb	r1, [r3, r2]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2243      	movs	r2, #67	; 0x43
 80015b6:	2101      	movs	r1, #1
 80015b8:	5499      	strb	r1, [r3, r2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2244      	movs	r2, #68	; 0x44
 80015be:	2101      	movs	r1, #1
 80015c0:	5499      	strb	r1, [r3, r2]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2245      	movs	r2, #69	; 0x45
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	223d      	movs	r2, #61	; 0x3d
 80015ce:	2101      	movs	r1, #1
 80015d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <HAL_TIM_PWM_Start+0x22>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	223e      	movs	r2, #62	; 0x3e
 8001600:	5c9b      	ldrb	r3, [r3, r2]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	3b01      	subs	r3, #1
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	4193      	sbcs	r3, r2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	e01f      	b.n	800164e <HAL_TIM_PWM_Start+0x62>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d108      	bne.n	8001626 <HAL_TIM_PWM_Start+0x3a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	223f      	movs	r2, #63	; 0x3f
 8001618:	5c9b      	ldrb	r3, [r3, r2]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	4193      	sbcs	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	e013      	b.n	800164e <HAL_TIM_PWM_Start+0x62>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d108      	bne.n	800163e <HAL_TIM_PWM_Start+0x52>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	5c9b      	ldrb	r3, [r3, r2]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	1e5a      	subs	r2, r3, #1
 8001638:	4193      	sbcs	r3, r2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	e007      	b.n	800164e <HAL_TIM_PWM_Start+0x62>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2241      	movs	r2, #65	; 0x41
 8001642:	5c9b      	ldrb	r3, [r3, r2]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	4193      	sbcs	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e064      	b.n	8001720 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d104      	bne.n	8001666 <HAL_TIM_PWM_Start+0x7a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	223e      	movs	r2, #62	; 0x3e
 8001660:	2102      	movs	r1, #2
 8001662:	5499      	strb	r1, [r3, r2]
 8001664:	e013      	b.n	800168e <HAL_TIM_PWM_Start+0xa2>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d104      	bne.n	8001676 <HAL_TIM_PWM_Start+0x8a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	223f      	movs	r2, #63	; 0x3f
 8001670:	2102      	movs	r1, #2
 8001672:	5499      	strb	r1, [r3, r2]
 8001674:	e00b      	b.n	800168e <HAL_TIM_PWM_Start+0xa2>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b08      	cmp	r3, #8
 800167a:	d104      	bne.n	8001686 <HAL_TIM_PWM_Start+0x9a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	2102      	movs	r1, #2
 8001682:	5499      	strb	r1, [r3, r2]
 8001684:	e003      	b.n	800168e <HAL_TIM_PWM_Start+0xa2>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2241      	movs	r2, #65	; 0x41
 800168a:	2102      	movs	r1, #2
 800168c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6839      	ldr	r1, [r7, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	0018      	movs	r0, r3
 8001698:	f000 fd30 	bl	80020fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <HAL_TIM_PWM_Start+0x13c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d009      	beq.n	80016ba <HAL_TIM_PWM_Start+0xce>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <HAL_TIM_PWM_Start+0x140>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d004      	beq.n	80016ba <HAL_TIM_PWM_Start+0xce>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_TIM_PWM_Start+0x144>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_TIM_PWM_Start+0xd2>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_TIM_PWM_Start+0xd4>
 80016be:	2300      	movs	r3, #0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0209      	lsls	r1, r1, #8
 80016d2:	430a      	orrs	r2, r1
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <HAL_TIM_PWM_Start+0x13c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d004      	beq.n	80016ea <HAL_TIM_PWM_Start+0xfe>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_TIM_PWM_Start+0x148>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d111      	bne.n	800170e <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2207      	movs	r2, #7
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d010      	beq.n	800171e <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2101      	movs	r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800170c:	e007      	b.n	800171e <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40012c00 	.word	0x40012c00
 800172c:	40014400 	.word	0x40014400
 8001730:	40014800 	.word	0x40014800
 8001734:	40000400 	.word	0x40000400

08001738 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fcd6 	bl	80020fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a2d      	ldr	r2, [pc, #180]	; (800180c <HAL_TIM_PWM_Stop+0xd4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d009      	beq.n	800176e <HAL_TIM_PWM_Stop+0x36>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <HAL_TIM_PWM_Stop+0xd8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d004      	beq.n	800176e <HAL_TIM_PWM_Stop+0x36>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <HAL_TIM_PWM_Stop+0xdc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_TIM_PWM_Stop+0x3a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_TIM_PWM_Stop+0x3c>
 8001772:	2300      	movs	r3, #0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a26      	ldr	r2, [pc, #152]	; (8001818 <HAL_TIM_PWM_Stop+0xe0>)
 8001780:	4013      	ands	r3, r2
 8001782:	d10d      	bne.n	80017a0 <HAL_TIM_PWM_Stop+0x68>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <HAL_TIM_PWM_Stop+0xe4>)
 800178c:	4013      	ands	r3, r2
 800178e:	d107      	bne.n	80017a0 <HAL_TIM_PWM_Stop+0x68>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4921      	ldr	r1, [pc, #132]	; (8001820 <HAL_TIM_PWM_Stop+0xe8>)
 800179c:	400a      	ands	r2, r1
 800179e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <HAL_TIM_PWM_Stop+0xe0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	d10d      	bne.n	80017c8 <HAL_TIM_PWM_Stop+0x90>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_TIM_PWM_Stop+0xe4>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	d107      	bne.n	80017c8 <HAL_TIM_PWM_Stop+0x90>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <HAL_TIM_PWM_Stop+0xa0>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	223e      	movs	r2, #62	; 0x3e
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]
 80017d6:	e013      	b.n	8001800 <HAL_TIM_PWM_Stop+0xc8>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d104      	bne.n	80017e8 <HAL_TIM_PWM_Stop+0xb0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]
 80017e6:	e00b      	b.n	8001800 <HAL_TIM_PWM_Stop+0xc8>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d104      	bne.n	80017f8 <HAL_TIM_PWM_Stop+0xc0>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2240      	movs	r2, #64	; 0x40
 80017f2:	2101      	movs	r1, #1
 80017f4:	5499      	strb	r1, [r3, r2]
 80017f6:	e003      	b.n	8001800 <HAL_TIM_PWM_Stop+0xc8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2241      	movs	r2, #65	; 0x41
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	b002      	add	sp, #8
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40012c00 	.word	0x40012c00
 8001810:	40014400 	.word	0x40014400
 8001814:	40014800 	.word	0x40014800
 8001818:	00001111 	.word	0x00001111
 800181c:	00000444 	.word	0x00000444
 8001820:	ffff7fff 	.word	0xffff7fff

08001824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001830:	2317      	movs	r3, #23
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	223c      	movs	r2, #60	; 0x3c
 800183c:	5c9b      	ldrb	r3, [r3, r2]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001842:	2302      	movs	r3, #2
 8001844:	e0a3      	b.n	800198e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	223c      	movs	r2, #60	; 0x3c
 800184a:	2101      	movs	r1, #1
 800184c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d029      	beq.n	80018a8 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001854:	d802      	bhi.n	800185c <HAL_TIM_PWM_ConfigChannel+0x38>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_TIM_PWM_ConfigChannel+0x42>
 800185a:	e08c      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x152>
 800185c:	2b08      	cmp	r3, #8
 800185e:	d046      	beq.n	80018ee <HAL_TIM_PWM_ConfigChannel+0xca>
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d065      	beq.n	8001930 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8001864:	e087      	b.n	8001976 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f9ca 	bl	8001c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2108      	movs	r1, #8
 8001880:	430a      	orrs	r2, r1
 8001882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2104      	movs	r1, #4
 8001890:	438a      	bics	r2, r1
 8001892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6999      	ldr	r1, [r3, #24]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	619a      	str	r2, [r3, #24]
      break;
 80018a6:	e06b      	b.n	8001980 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fa27 	bl	8001d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699a      	ldr	r2, [r3, #24]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0109      	lsls	r1, r1, #4
 80018c4:	430a      	orrs	r2, r1
 80018c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4931      	ldr	r1, [pc, #196]	; (8001998 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6999      	ldr	r1, [r3, #24]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	021a      	lsls	r2, r3, #8
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	619a      	str	r2, [r3, #24]
      break;
 80018ec:	e048      	b.n	8001980 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 fa82 	bl	8001e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2108      	movs	r1, #8
 8001908:	430a      	orrs	r2, r1
 800190a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69da      	ldr	r2, [r3, #28]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2104      	movs	r1, #4
 8001918:	438a      	bics	r2, r1
 800191a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69d9      	ldr	r1, [r3, #28]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	61da      	str	r2, [r3, #28]
      break;
 800192e:	e027      	b.n	8001980 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f000 fae1 	bl	8001f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0109      	lsls	r1, r1, #4
 800194c:	430a      	orrs	r2, r1
 800194e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	490f      	ldr	r1, [pc, #60]	; (8001998 <HAL_TIM_PWM_ConfigChannel+0x174>)
 800195c:	400a      	ands	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69d9      	ldr	r1, [r3, #28]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	021a      	lsls	r2, r3, #8
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
      break;
 8001974:	e004      	b.n	8001980 <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 8001976:	2317      	movs	r3, #23
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	223c      	movs	r2, #60	; 0x3c
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]

  return status;
 8001988:	2317      	movs	r3, #23
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	781b      	ldrb	r3, [r3, #0]
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b006      	add	sp, #24
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	fffffbff 	.word	0xfffffbff

0800199c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019a6:	230f      	movs	r3, #15
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	223c      	movs	r2, #60	; 0x3c
 80019b2:	5c9b      	ldrb	r3, [r3, r2]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_TIM_ConfigClockSource+0x20>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e0b2      	b.n	8001b22 <HAL_TIM_ConfigClockSource+0x186>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	223c      	movs	r2, #60	; 0x3c
 80019c0:	2101      	movs	r1, #1
 80019c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	223d      	movs	r2, #61	; 0x3d
 80019c8:	2102      	movs	r1, #2
 80019ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2277      	movs	r2, #119	; 0x77
 80019d8:	4393      	bics	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_TIM_ConfigClockSource+0x190>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b40      	cmp	r3, #64	; 0x40
 80019f2:	d100      	bne.n	80019f6 <HAL_TIM_ConfigClockSource+0x5a>
 80019f4:	e06b      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x132>
 80019f6:	d80e      	bhi.n	8001a16 <HAL_TIM_ConfigClockSource+0x7a>
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d100      	bne.n	80019fe <HAL_TIM_ConfigClockSource+0x62>
 80019fc:	e077      	b.n	8001aee <HAL_TIM_ConfigClockSource+0x152>
 80019fe:	d803      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x6c>
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d100      	bne.n	8001a06 <HAL_TIM_ConfigClockSource+0x6a>
 8001a04:	e073      	b.n	8001aee <HAL_TIM_ConfigClockSource+0x152>
 8001a06:	e07b      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0x164>
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d100      	bne.n	8001a0e <HAL_TIM_ConfigClockSource+0x72>
 8001a0c:	e06f      	b.n	8001aee <HAL_TIM_ConfigClockSource+0x152>
 8001a0e:	2b30      	cmp	r3, #48	; 0x30
 8001a10:	d100      	bne.n	8001a14 <HAL_TIM_ConfigClockSource+0x78>
 8001a12:	e06c      	b.n	8001aee <HAL_TIM_ConfigClockSource+0x152>
 8001a14:	e074      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0x164>
 8001a16:	2b70      	cmp	r3, #112	; 0x70
 8001a18:	d00e      	beq.n	8001a38 <HAL_TIM_ConfigClockSource+0x9c>
 8001a1a:	d804      	bhi.n	8001a26 <HAL_TIM_ConfigClockSource+0x8a>
 8001a1c:	2b50      	cmp	r3, #80	; 0x50
 8001a1e:	d036      	beq.n	8001a8e <HAL_TIM_ConfigClockSource+0xf2>
 8001a20:	2b60      	cmp	r3, #96	; 0x60
 8001a22:	d044      	beq.n	8001aae <HAL_TIM_ConfigClockSource+0x112>
 8001a24:	e06c      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0x164>
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	0152      	lsls	r2, r2, #5
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d06d      	beq.n	8001b0a <HAL_TIM_ConfigClockSource+0x16e>
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	0192      	lsls	r2, r2, #6
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d017      	beq.n	8001a66 <HAL_TIM_ConfigClockSource+0xca>
 8001a36:	e063      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6899      	ldr	r1, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f000 fb38 	bl	80020bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2277      	movs	r2, #119	; 0x77
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	609a      	str	r2, [r3, #8]
      break;
 8001a64:	e052      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6899      	ldr	r1, [r3, #8]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f000 fb21 	bl	80020bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	01c9      	lsls	r1, r1, #7
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	609a      	str	r2, [r3, #8]
      break;
 8001a8c:	e03e      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6859      	ldr	r1, [r3, #4]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	f000 fa94 	bl	8001fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2150      	movs	r1, #80	; 0x50
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 faee 	bl	8002088 <TIM_ITRx_SetConfig>
      break;
 8001aac:	e02e      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	001a      	movs	r2, r3
 8001abc:	f000 fab2 	bl	8002024 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2160      	movs	r1, #96	; 0x60
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fade 	bl	8002088 <TIM_ITRx_SetConfig>
      break;
 8001acc:	e01e      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	001a      	movs	r2, r3
 8001adc:	f000 fa74 	bl	8001fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 face 	bl	8002088 <TIM_ITRx_SetConfig>
      break;
 8001aec:	e00e      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0019      	movs	r1, r3
 8001af8:	0010      	movs	r0, r2
 8001afa:	f000 fac5 	bl	8002088 <TIM_ITRx_SetConfig>
      break;
 8001afe:	e005      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8001b00:	230f      	movs	r3, #15
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
      break;
 8001b08:	e000      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x170>
      break;
 8001b0a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	223d      	movs	r2, #61	; 0x3d
 8001b10:	2101      	movs	r1, #1
 8001b12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	223c      	movs	r2, #60	; 0x3c
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781b      	ldrb	r3, [r3, #0]
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b004      	add	sp, #16
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	ffff00ff 	.word	0xffff00ff

08001b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <TIM_Base_SetConfig+0xc0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d003      	beq.n	8001b50 <TIM_Base_SetConfig+0x20>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <TIM_Base_SetConfig+0xc4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d108      	bne.n	8001b62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2270      	movs	r2, #112	; 0x70
 8001b54:	4393      	bics	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <TIM_Base_SetConfig+0xc0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00f      	beq.n	8001b8a <TIM_Base_SetConfig+0x5a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <TIM_Base_SetConfig+0xc4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00b      	beq.n	8001b8a <TIM_Base_SetConfig+0x5a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <TIM_Base_SetConfig+0xc8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <TIM_Base_SetConfig+0x5a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <TIM_Base_SetConfig+0xcc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d003      	beq.n	8001b8a <TIM_Base_SetConfig+0x5a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <TIM_Base_SetConfig+0xd0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d108      	bne.n	8001b9c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <TIM_Base_SetConfig+0xd4>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <TIM_Base_SetConfig+0xc0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <TIM_Base_SetConfig+0xaa>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <TIM_Base_SetConfig+0xcc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d003      	beq.n	8001bda <TIM_Base_SetConfig+0xaa>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <TIM_Base_SetConfig+0xd0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d103      	bne.n	8001be2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	615a      	str	r2, [r3, #20]
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40002000 	.word	0x40002000
 8001bfc:	40014400 	.word	0x40014400
 8001c00:	40014800 	.word	0x40014800
 8001c04:	fffffcff 	.word	0xfffffcff

08001c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4393      	bics	r3, r2
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2270      	movs	r2, #112	; 0x70
 8001c36:	4393      	bics	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	4393      	bics	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4393      	bics	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <TIM_OC1_SetConfig+0xe8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <TIM_OC1_SetConfig+0x6e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <TIM_OC1_SetConfig+0xec>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d003      	beq.n	8001c76 <TIM_OC1_SetConfig+0x6e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <TIM_OC1_SetConfig+0xf0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10c      	bne.n	8001c90 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <TIM_OC1_SetConfig+0xe8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <TIM_OC1_SetConfig+0xa0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <TIM_OC1_SetConfig+0xec>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <TIM_OC1_SetConfig+0xa0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <TIM_OC1_SetConfig+0xf0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d111      	bne.n	8001ccc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <TIM_OC1_SetConfig+0xf4>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <TIM_OC1_SetConfig+0xf8>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	621a      	str	r2, [r3, #32]
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b006      	add	sp, #24
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40012c00 	.word	0x40012c00
 8001cf4:	40014400 	.word	0x40014400
 8001cf8:	40014800 	.word	0x40014800
 8001cfc:	fffffeff 	.word	0xfffffeff
 8001d00:	fffffdff 	.word	0xfffffdff

08001d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	2210      	movs	r2, #16
 8001d14:	4393      	bics	r3, r2
 8001d16:	001a      	movs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <TIM_OC2_SetConfig+0xe0>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <TIM_OC2_SetConfig+0xe4>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	4393      	bics	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <TIM_OC2_SetConfig+0xe8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10d      	bne.n	8001d82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	4393      	bics	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	4393      	bics	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <TIM_OC2_SetConfig+0xe8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <TIM_OC2_SetConfig+0x96>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <TIM_OC2_SetConfig+0xec>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d003      	beq.n	8001d9a <TIM_OC2_SetConfig+0x96>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <TIM_OC2_SetConfig+0xf0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d113      	bne.n	8001dc2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <TIM_OC2_SetConfig+0xf4>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <TIM_OC2_SetConfig+0xf8>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	621a      	str	r2, [r3, #32]
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	ffff8fff 	.word	0xffff8fff
 8001de8:	fffffcff 	.word	0xfffffcff
 8001dec:	40012c00 	.word	0x40012c00
 8001df0:	40014400 	.word	0x40014400
 8001df4:	40014800 	.word	0x40014800
 8001df8:	fffffbff 	.word	0xfffffbff
 8001dfc:	fffff7ff 	.word	0xfffff7ff

08001e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <TIM_OC3_SetConfig+0xdc>)
 8001e10:	401a      	ands	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2270      	movs	r2, #112	; 0x70
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2203      	movs	r2, #3
 8001e34:	4393      	bics	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <TIM_OC3_SetConfig+0xe0>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <TIM_OC3_SetConfig+0xe4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10d      	bne.n	8001e7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <TIM_OC3_SetConfig+0xe8>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <TIM_OC3_SetConfig+0xec>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <TIM_OC3_SetConfig+0xe4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <TIM_OC3_SetConfig+0x92>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1a      	ldr	r2, [pc, #104]	; (8001ef0 <TIM_OC3_SetConfig+0xf0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d003      	beq.n	8001e92 <TIM_OC3_SetConfig+0x92>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <TIM_OC3_SetConfig+0xf4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d113      	bne.n	8001eba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <TIM_OC3_SetConfig+0xf8>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <TIM_OC3_SetConfig+0xfc>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	621a      	str	r2, [r3, #32]
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b006      	add	sp, #24
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	fffffeff 	.word	0xfffffeff
 8001ee0:	fffffdff 	.word	0xfffffdff
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	fffff7ff 	.word	0xfffff7ff
 8001eec:	fffffbff 	.word	0xfffffbff
 8001ef0:	40014400 	.word	0x40014400
 8001ef4:	40014800 	.word	0x40014800
 8001ef8:	ffffefff 	.word	0xffffefff
 8001efc:	ffffdfff 	.word	0xffffdfff

08001f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <TIM_OC4_SetConfig+0xa8>)
 8001f10:	401a      	ands	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <TIM_OC4_SetConfig+0xac>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <TIM_OC4_SetConfig+0xb0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <TIM_OC4_SetConfig+0xb4>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	031b      	lsls	r3, r3, #12
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <TIM_OC4_SetConfig+0xb8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d007      	beq.n	8001f70 <TIM_OC4_SetConfig+0x70>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <TIM_OC4_SetConfig+0xbc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d003      	beq.n	8001f70 <TIM_OC4_SetConfig+0x70>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <TIM_OC4_SetConfig+0xc0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d109      	bne.n	8001f84 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <TIM_OC4_SetConfig+0xc4>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	621a      	str	r2, [r3, #32]
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b006      	add	sp, #24
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	ffffefff 	.word	0xffffefff
 8001fac:	ffff8fff 	.word	0xffff8fff
 8001fb0:	fffffcff 	.word	0xfffffcff
 8001fb4:	ffffdfff 	.word	0xffffdfff
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40014400 	.word	0x40014400
 8001fc0:	40014800 	.word	0x40014800
 8001fc4:	ffffbfff 	.word	0xffffbfff

08001fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	22f0      	movs	r2, #240	; 0xf0
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	220a      	movs	r2, #10
 8002004:	4393      	bics	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	621a      	str	r2, [r3, #32]
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b006      	add	sp, #24
 8002022:	bd80      	pop	{r7, pc}

08002024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	2210      	movs	r2, #16
 8002036:	4393      	bics	r3, r2
 8002038:	001a      	movs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <TIM_TI2_ConfigInputStage+0x60>)
 800204e:	4013      	ands	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	031b      	lsls	r3, r3, #12
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	22a0      	movs	r2, #160	; 0xa0
 8002060:	4393      	bics	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	621a      	str	r2, [r3, #32]
}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b006      	add	sp, #24
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	ffff0fff 	.word	0xffff0fff

08002088 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2270      	movs	r2, #112	; 0x70
 800209c:	4393      	bics	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	2207      	movs	r2, #7
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b004      	add	sp, #16
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <TIM_ETR_SetConfig+0x3c>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	021a      	lsls	r2, r3, #8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	431a      	orrs	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b006      	add	sp, #24
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	ffff00ff 	.word	0xffff00ff

080020fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	221f      	movs	r2, #31
 800210c:	4013      	ands	r3, r2
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	0013      	movs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	43d2      	mvns	r2, r2
 800211e:	401a      	ands	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	211f      	movs	r1, #31
 800212c:	400b      	ands	r3, r1
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4099      	lsls	r1, r3
 8002132:	000b      	movs	r3, r1
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	621a      	str	r2, [r3, #32]
}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46bd      	mov	sp, r7
 800213e:	b006      	add	sp, #24
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	223c      	movs	r2, #60	; 0x3c
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002158:	2302      	movs	r3, #2
 800215a:	e03c      	b.n	80021d6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	223c      	movs	r2, #60	; 0x3c
 8002160:	2101      	movs	r1, #1
 8002162:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	223d      	movs	r2, #61	; 0x3d
 8002168:	2102      	movs	r1, #2
 800216a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2270      	movs	r2, #112	; 0x70
 8002180:	4393      	bics	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10c      	bne.n	80021c4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	4393      	bics	r3, r2
 80021b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	223d      	movs	r2, #61	; 0x3d
 80021c8:	2101      	movs	r1, #1
 80021ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	223c      	movs	r2, #60	; 0x3c
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	40012c00 	.word	0x40012c00
 80021e4:	40000400 	.word	0x40000400

080021e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	223c      	movs	r2, #60	; 0x3c
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e03e      	b.n	8002282 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	223c      	movs	r2, #60	; 0x3c
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	4393      	bics	r3, r2
 8002212:	001a      	movs	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002220:	401a      	ands	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a18      	ldr	r2, [pc, #96]	; (8002290 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800222e:	401a      	ands	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800223c:	401a      	ands	r2, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a13      	ldr	r2, [pc, #76]	; (8002298 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800224a:	401a      	ands	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002258:	401a      	ands	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002266:	401a      	ands	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4313      	orrs	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	223c      	movs	r2, #60	; 0x3c
 800227c:	2100      	movs	r1, #0
 800227e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	fffffcff 	.word	0xfffffcff
 8002290:	fffffbff 	.word	0xfffffbff
 8002294:	fffff7ff 	.word	0xfffff7ff
 8002298:	ffffefff 	.word	0xffffefff
 800229c:	ffffdfff 	.word	0xffffdfff
 80022a0:	ffffbfff 	.word	0xffffbfff

080022a4 <__libc_init_array>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	2600      	movs	r6, #0
 80022a8:	4d0c      	ldr	r5, [pc, #48]	; (80022dc <__libc_init_array+0x38>)
 80022aa:	4c0d      	ldr	r4, [pc, #52]	; (80022e0 <__libc_init_array+0x3c>)
 80022ac:	1b64      	subs	r4, r4, r5
 80022ae:	10a4      	asrs	r4, r4, #2
 80022b0:	42a6      	cmp	r6, r4
 80022b2:	d109      	bne.n	80022c8 <__libc_init_array+0x24>
 80022b4:	2600      	movs	r6, #0
 80022b6:	f000 f821 	bl	80022fc <_init>
 80022ba:	4d0a      	ldr	r5, [pc, #40]	; (80022e4 <__libc_init_array+0x40>)
 80022bc:	4c0a      	ldr	r4, [pc, #40]	; (80022e8 <__libc_init_array+0x44>)
 80022be:	1b64      	subs	r4, r4, r5
 80022c0:	10a4      	asrs	r4, r4, #2
 80022c2:	42a6      	cmp	r6, r4
 80022c4:	d105      	bne.n	80022d2 <__libc_init_array+0x2e>
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
 80022c8:	00b3      	lsls	r3, r6, #2
 80022ca:	58eb      	ldr	r3, [r5, r3]
 80022cc:	4798      	blx	r3
 80022ce:	3601      	adds	r6, #1
 80022d0:	e7ee      	b.n	80022b0 <__libc_init_array+0xc>
 80022d2:	00b3      	lsls	r3, r6, #2
 80022d4:	58eb      	ldr	r3, [r5, r3]
 80022d6:	4798      	blx	r3
 80022d8:	3601      	adds	r6, #1
 80022da:	e7f2      	b.n	80022c2 <__libc_init_array+0x1e>
 80022dc:	08002344 	.word	0x08002344
 80022e0:	08002344 	.word	0x08002344
 80022e4:	08002344 	.word	0x08002344
 80022e8:	08002348 	.word	0x08002348

080022ec <memset>:
 80022ec:	0003      	movs	r3, r0
 80022ee:	1812      	adds	r2, r2, r0
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d100      	bne.n	80022f6 <memset+0xa>
 80022f4:	4770      	bx	lr
 80022f6:	7019      	strb	r1, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	e7f9      	b.n	80022f0 <memset+0x4>

080022fc <_init>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr

08002308 <_fini>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr
