
BTS7960_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002748  08002748  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002748  08002748  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002748  08002748  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000074  080027c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080027c4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b523  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cd1  00000000  00000000  0002b5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003dcf  00000000  00000000  0002d290  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000006e8  00000000  00000000  00031060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000668  00000000  00000000  00031748  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000104cf  00000000  00000000  00031db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008778  00000000  00000000  0004227f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005ee2f  00000000  00000000  0004a9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a9826  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001370  00000000  00000000  000a98a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002694 	.word	0x08002694

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08002694 	.word	0x08002694

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000230:	b500      	push	{lr}
 8000232:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000234:	220c      	movs	r2, #12
 8000236:	2100      	movs	r1, #0
 8000238:	a801      	add	r0, sp, #4
 800023a:	f001 fe24 	bl	8001e86 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800023e:	481e      	ldr	r0, [pc, #120]	; (80002b8 <MX_ADC_Init+0x88>)
 8000240:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <MX_ADC_Init+0x8c>)
 8000242:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8000248:	2208      	movs	r2, #8
 800024a:	6082      	str	r2, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024e:	3a07      	subs	r2, #7
 8000250:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000252:	2104      	movs	r1, #4
 8000254:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000256:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000258:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800025a:	7682      	strb	r2, [r0, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800025c:	76c3      	strb	r3, [r0, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025e:	21c2      	movs	r1, #194	; 0xc2
 8000260:	31ff      	adds	r1, #255	; 0xff
 8000262:	61c1      	str	r1, [r0, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000264:	6203      	str	r3, [r0, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000266:	399e      	subs	r1, #158	; 0x9e
 8000268:	39ff      	subs	r1, #255	; 0xff
 800026a:	5443      	strb	r3, [r0, r1]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800026c:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800026e:	f000 fc19 	bl	8000aa4 <HAL_ADC_Init>
 8000272:	2800      	cmp	r0, #0
 8000274:	d116      	bne.n	80002a4 <MX_ADC_Init+0x74>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000276:	2302      	movs	r3, #2
 8000278:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	015b      	lsls	r3, r3, #5
 800027e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000280:	2304      	movs	r3, #4
 8000282:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000284:	a901      	add	r1, sp, #4
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_ADC_Init+0x88>)
 8000288:	f000 fd7a 	bl	8000d80 <HAL_ADC_ConfigChannel>
 800028c:	2800      	cmp	r0, #0
 800028e:	d10c      	bne.n	80002aa <MX_ADC_Init+0x7a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000290:	2305      	movs	r3, #5
 8000292:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000294:	a901      	add	r1, sp, #4
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <MX_ADC_Init+0x88>)
 8000298:	f000 fd72 	bl	8000d80 <HAL_ADC_ConfigChannel>
 800029c:	2800      	cmp	r0, #0
 800029e:	d107      	bne.n	80002b0 <MX_ADC_Init+0x80>
  {
    Error_Handler();
  }

}
 80002a0:	b005      	add	sp, #20
 80002a2:	bd00      	pop	{pc}
    Error_Handler();
 80002a4:	f000 fa16 	bl	80006d4 <Error_Handler>
 80002a8:	e7e5      	b.n	8000276 <MX_ADC_Init+0x46>
    Error_Handler();
 80002aa:	f000 fa13 	bl	80006d4 <Error_Handler>
 80002ae:	e7ef      	b.n	8000290 <MX_ADC_Init+0x60>
    Error_Handler();
 80002b0:	f000 fa10 	bl	80006d4 <Error_Handler>
}
 80002b4:	e7f4      	b.n	80002a0 <MX_ADC_Init+0x70>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	200000ac 	.word	0x200000ac
 80002bc:	40012400 	.word	0x40012400

080002c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c0:	b510      	push	{r4, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	2214      	movs	r2, #20
 80002c8:	2100      	movs	r1, #0
 80002ca:	a803      	add	r0, sp, #12
 80002cc:	f001 fddb 	bl	8001e86 <memset>
  if(adcHandle->Instance==ADC1)
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <HAL_ADC_MspInit+0x58>)
 80002d2:	6822      	ldr	r2, [r4, #0]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d001      	beq.n	80002dc <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002d8:	b008      	add	sp, #32
 80002da:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <HAL_ADC_MspInit+0x5c>)
 80002de:	6999      	ldr	r1, [r3, #24]
 80002e0:	2080      	movs	r0, #128	; 0x80
 80002e2:	0080      	lsls	r0, r0, #2
 80002e4:	4301      	orrs	r1, r0
 80002e6:	6199      	str	r1, [r3, #24]
 80002e8:	699a      	ldr	r2, [r3, #24]
 80002ea:	4002      	ands	r2, r0
 80002ec:	9201      	str	r2, [sp, #4]
 80002ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	2180      	movs	r1, #128	; 0x80
 80002f4:	0289      	lsls	r1, r1, #10
 80002f6:	430a      	orrs	r2, r1
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	400b      	ands	r3, r1
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = FB_IS2_Pin|FB_IS1_Pin;
 8000302:	2324      	movs	r3, #36	; 0x24
 8000304:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000306:	3b21      	subs	r3, #33	; 0x21
 8000308:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030a:	3871      	subs	r0, #113	; 0x71
 800030c:	38ff      	subs	r0, #255	; 0xff
 800030e:	a903      	add	r1, sp, #12
 8000310:	05c0      	lsls	r0, r0, #23
 8000312:	f000 fe21 	bl	8000f58 <HAL_GPIO_Init>
}
 8000316:	e7df      	b.n	80002d8 <HAL_ADC_MspInit+0x18>
 8000318:	40012400 	.word	0x40012400
 800031c:	40021000 	.word	0x40021000

08000320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000322:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000324:	2214      	movs	r2, #20
 8000326:	2100      	movs	r1, #0
 8000328:	a803      	add	r0, sp, #12
 800032a:	f001 fdac 	bl	8001e86 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_GPIO_Init+0xa4>)
 8000330:	6959      	ldr	r1, [r3, #20]
 8000332:	2080      	movs	r0, #128	; 0x80
 8000334:	03c0      	lsls	r0, r0, #15
 8000336:	4301      	orrs	r1, r0
 8000338:	6159      	str	r1, [r3, #20]
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	4002      	ands	r2, r0
 800033e:	9200      	str	r2, [sp, #0]
 8000340:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	6959      	ldr	r1, [r3, #20]
 8000344:	2080      	movs	r0, #128	; 0x80
 8000346:	0280      	lsls	r0, r0, #10
 8000348:	4301      	orrs	r1, r0
 800034a:	6159      	str	r1, [r3, #20]
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	4002      	ands	r2, r0
 8000350:	9201      	str	r2, [sp, #4]
 8000352:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000354:	695a      	ldr	r2, [r3, #20]
 8000356:	2180      	movs	r1, #128	; 0x80
 8000358:	02c9      	lsls	r1, r1, #11
 800035a:	430a      	orrs	r2, r1
 800035c:	615a      	str	r2, [r3, #20]
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	400b      	ands	r3, r1
 8000362:	9302      	str	r3, [sp, #8]
 8000364:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_EN1_Pin|MOTOR_EN2_Pin|MOTOR_PIN1_Pin|MOTOR_PIN2_Pin 
 8000366:	2590      	movs	r5, #144	; 0x90
 8000368:	05ed      	lsls	r5, r5, #23
 800036a:	2200      	movs	r2, #0
 800036c:	219b      	movs	r1, #155	; 0x9b
 800036e:	0028      	movs	r0, r5
 8000370:	f000 fefe 	bl	8001170 <HAL_GPIO_WritePin>
                          |USR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_EN1_Pin|MOTOR_EN2_Pin|MOTOR_PIN1_Pin|MOTOR_PIN2_Pin;
 8000374:	231b      	movs	r3, #27
 8000376:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2701      	movs	r7, #1
 800037a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800037c:	2602      	movs	r6, #2
 800037e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	2400      	movs	r4, #0
 8000382:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	a903      	add	r1, sp, #12
 8000386:	0028      	movs	r0, r5
 8000388:	f000 fde6 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000396:	a903      	add	r1, sp, #12
 8000398:	0028      	movs	r0, r5
 800039a:	f000 fddd 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWITCH_INPUT_Pin;
 800039e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003a0:	23c4      	movs	r3, #196	; 0xc4
 80003a2:	039b      	lsls	r3, r3, #14
 80003a4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SWITCH_INPUT_GPIO_Port, &GPIO_InitStruct);
 80003a8:	a903      	add	r1, sp, #12
 80003aa:	4807      	ldr	r0, [pc, #28]	; (80003c8 <MX_GPIO_Init+0xa8>)
 80003ac:	f000 fdd4 	bl	8000f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2100      	movs	r1, #0
 80003b4:	2005      	movs	r0, #5
 80003b6:	f000 fd75 	bl	8000ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80003ba:	2005      	movs	r0, #5
 80003bc:	f000 fda4 	bl	8000f08 <HAL_NVIC_EnableIRQ>

}
 80003c0:	b009      	add	sp, #36	; 0x24
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	48000400 	.word	0x48000400

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d0:	2228      	movs	r2, #40	; 0x28
 80003d2:	2100      	movs	r1, #0
 80003d4:	a80a      	add	r0, sp, #40	; 0x28
 80003d6:	f001 fd56 	bl	8001e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003da:	2210      	movs	r2, #16
 80003dc:	2100      	movs	r1, #0
 80003de:	a804      	add	r0, sp, #16
 80003e0:	f001 fd51 	bl	8001e86 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e4:	2210      	movs	r2, #16
 80003e6:	2100      	movs	r1, #0
 80003e8:	4668      	mov	r0, sp
 80003ea:	f001 fd4c 	bl	8001e86 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80003ee:	2311      	movs	r3, #17
 80003f0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f2:	2501      	movs	r5, #1
 80003f4:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80003f6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80003f8:	3b01      	subs	r3, #1
 80003fa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2402      	movs	r4, #2
 80003fe:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	025b      	lsls	r3, r3, #9
 8000404:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	035b      	lsls	r3, r3, #13
 800040a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040c:	a808      	add	r0, sp, #32
 800040e:	f000 fec3 	bl	8001198 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	2307      	movs	r3, #7
 8000414:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000416:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2400      	movs	r4, #0
 800041a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041c:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041e:	2101      	movs	r1, #1
 8000420:	a804      	add	r0, sp, #16
 8000422:	f001 f957 	bl	80016d4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000426:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000428:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	4668      	mov	r0, sp
 800042c:	f001 f9fe 	bl	800182c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000430:	b015      	add	sp, #84	; 0x54
 8000432:	bd30      	pop	{r4, r5, pc}

08000434 <HAL_GPIO_EXTI_Callback>:
//////////// INTR handling in stm32f0xx_it.c ////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  //	if(GPIO_Pin == SWITCH_INPUT_Pin)
  //	{
  switchPressed = HIGH;
 8000434:	4b01      	ldr	r3, [pc, #4]	; (800043c <HAL_GPIO_EXTI_Callback+0x8>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
  //	}
}
 800043a:	4770      	bx	lr
 800043c:	2000009c 	.word	0x2000009c

08000440 <ControlMotor>:

void ControlMotor(MOTORMODE direction)
{
 8000440:	b510      	push	{r4, lr}
  if (direction == FORWARD)		// Turn Motor Forward
 8000442:	2800      	cmp	r0, #0
 8000444:	d008      	beq.n	8000458 <ControlMotor+0x18>
    {
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
      HAL_Delay(100);
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|USR_LED_Pin, GPIO_PIN_SET);
    }
  else if (direction == REWIND)		// Turn Motor Backward
 8000446:	2801      	cmp	r0, #1
 8000448:	d016      	beq.n	8000478 <ControlMotor+0x38>
    {
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
      HAL_Delay(100);
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN2_Pin|USR_LED_Pin, GPIO_PIN_SET);
    }
  else if (direction == STOP)		// Turn Off Motor
 800044a:	2802      	cmp	r0, #2
 800044c:	d024      	beq.n	8000498 <ControlMotor+0x58>
    {
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
    }
  else if (direction == TURNOFF)	//Shut Down Motor
 800044e:	2803      	cmp	r0, #3
 8000450:	d029      	beq.n	80004a6 <ControlMotor+0x66>
    {
      HAL_GPIO_WritePin(GPIOA, MOTOR_EN1_Pin|MOTOR_EN2_Pin|MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
    }
  else if (direction == M_ENABLE)		//Enable Motor
 8000452:	2804      	cmp	r0, #4
 8000454:	d02e      	beq.n	80004b4 <ControlMotor+0x74>
    {
      HAL_GPIO_WritePin(GPIOA, MOTOR_EN1_Pin|MOTOR_EN2_Pin, GPIO_PIN_SET);
    }
}
 8000456:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
 8000458:	2490      	movs	r4, #144	; 0x90
 800045a:	05e4      	lsls	r4, r4, #23
 800045c:	2200      	movs	r2, #0
 800045e:	2118      	movs	r1, #24
 8000460:	0020      	movs	r0, r4
 8000462:	f000 fe85 	bl	8001170 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000466:	2064      	movs	r0, #100	; 0x64
 8000468:	f000 fa40 	bl	80008ec <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|USR_LED_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2188      	movs	r1, #136	; 0x88
 8000470:	0020      	movs	r0, r4
 8000472:	f000 fe7d 	bl	8001170 <HAL_GPIO_WritePin>
 8000476:	e7ee      	b.n	8000456 <ControlMotor+0x16>
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
 8000478:	2490      	movs	r4, #144	; 0x90
 800047a:	05e4      	lsls	r4, r4, #23
 800047c:	2200      	movs	r2, #0
 800047e:	2118      	movs	r1, #24
 8000480:	0020      	movs	r0, r4
 8000482:	f000 fe75 	bl	8001170 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f000 fa30 	bl	80008ec <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN2_Pin|USR_LED_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2190      	movs	r1, #144	; 0x90
 8000490:	0020      	movs	r0, r4
 8000492:	f000 fe6d 	bl	8001170 <HAL_GPIO_WritePin>
 8000496:	e7de      	b.n	8000456 <ControlMotor+0x16>
      HAL_GPIO_WritePin(GPIOA, MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
 8000498:	308e      	adds	r0, #142	; 0x8e
 800049a:	2200      	movs	r2, #0
 800049c:	2118      	movs	r1, #24
 800049e:	05c0      	lsls	r0, r0, #23
 80004a0:	f000 fe66 	bl	8001170 <HAL_GPIO_WritePin>
 80004a4:	e7d7      	b.n	8000456 <ControlMotor+0x16>
      HAL_GPIO_WritePin(GPIOA, MOTOR_EN1_Pin|MOTOR_EN2_Pin|MOTOR_PIN1_Pin|MOTOR_PIN2_Pin, GPIO_PIN_RESET);
 80004a6:	308d      	adds	r0, #141	; 0x8d
 80004a8:	2200      	movs	r2, #0
 80004aa:	211b      	movs	r1, #27
 80004ac:	05c0      	lsls	r0, r0, #23
 80004ae:	f000 fe5f 	bl	8001170 <HAL_GPIO_WritePin>
 80004b2:	e7d0      	b.n	8000456 <ControlMotor+0x16>
      HAL_GPIO_WritePin(GPIOA, MOTOR_EN1_Pin|MOTOR_EN2_Pin, GPIO_PIN_SET);
 80004b4:	308c      	adds	r0, #140	; 0x8c
 80004b6:	2201      	movs	r2, #1
 80004b8:	2103      	movs	r1, #3
 80004ba:	05c0      	lsls	r0, r0, #23
 80004bc:	f000 fe58 	bl	8001170 <HAL_GPIO_WritePin>
}
 80004c0:	e7c9      	b.n	8000456 <ControlMotor+0x16>
	...

080004c4 <main>:
{
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	b08b      	sub	sp, #44	; 0x2c
  volatile uint8_t adcThresh = 200;
 80004c8:	466b      	mov	r3, sp
 80004ca:	22c8      	movs	r2, #200	; 0xc8
 80004cc:	71da      	strb	r2, [r3, #7]
  HAL_Init();
 80004ce:	f000 f9eb 	bl	80008a8 <HAL_Init>
  SystemClock_Config();
 80004d2:	f7ff ff7b 	bl	80003cc <SystemClock_Config>
  MX_GPIO_Init();
 80004d6:	f7ff ff23 	bl	8000320 <MX_GPIO_Init>
  MX_ADC_Init();
 80004da:	f7ff fea9 	bl	8000230 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f941 	bl	8000764 <MX_USART1_UART_Init>
  sConfig.Rank = 1;
 80004e2:	4b71      	ldr	r3, [pc, #452]	; (80006a8 <main+0x1e4>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80004e8:	3201      	adds	r2, #1
 80004ea:	609a      	str	r2, [r3, #8]
  ControlMotor(M_ENABLE);
 80004ec:	2004      	movs	r0, #4
 80004ee:	f7ff ffa7 	bl	8000440 <ControlMotor>
  sprintf(txBuffer, "DoorStep Controller: V4.1\r\n");
 80004f2:	4c6e      	ldr	r4, [pc, #440]	; (80006ac <main+0x1e8>)
 80004f4:	221c      	movs	r2, #28
 80004f6:	496e      	ldr	r1, [pc, #440]	; (80006b0 <main+0x1ec>)
 80004f8:	0020      	movs	r0, r4
 80004fa:	f001 fcbb 	bl	8001e74 <memcpy>
  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 80004fe:	0020      	movs	r0, r4
 8000500:	f7ff fe02 	bl	8000108 <strlen>
 8000504:	b282      	uxth	r2, r0
 8000506:	230a      	movs	r3, #10
 8000508:	0021      	movs	r1, r4
 800050a:	486a      	ldr	r0, [pc, #424]	; (80006b4 <main+0x1f0>)
 800050c:	f001 fb9c 	bl	8001c48 <HAL_UART_Transmit>
  HAL_Delay(5000);
 8000510:	4869      	ldr	r0, [pc, #420]	; (80006b8 <main+0x1f4>)
 8000512:	f000 f9eb 	bl	80008ec <HAL_Delay>
      sConfig.Channel = ADC_CHANNEL_5;
 8000516:	4e64      	ldr	r6, [pc, #400]	; (80006a8 <main+0x1e4>)
	  fbInstFwd = HAL_ADC_GetValue(&hadc);
 8000518:	4d68      	ldr	r5, [pc, #416]	; (80006bc <main+0x1f8>)
 800051a:	e0b0      	b.n	800067e <main+0x1ba>
 800051c:	0028      	movs	r0, r5
 800051e:	f000 fc2b 	bl	8000d78 <HAL_ADC_GetValue>
 8000522:	b280      	uxth	r0, r0
 8000524:	2316      	movs	r3, #22
 8000526:	446b      	add	r3, sp
 8000528:	8018      	strh	r0, [r3, #0]
 800052a:	e033      	b.n	8000594 <main+0xd0>
	  fbInstRwd = HAL_ADC_GetValue(&hadc);
 800052c:	4863      	ldr	r0, [pc, #396]	; (80006bc <main+0x1f8>)
 800052e:	f000 fc23 	bl	8000d78 <HAL_ADC_GetValue>
 8000532:	b280      	uxth	r0, r0
 8000534:	ab05      	add	r3, sp, #20
 8000536:	8018      	strh	r0, [r3, #0]
 8000538:	e03c      	b.n	80005b4 <main+0xf0>
	  ControlMotor(STOP);
 800053a:	2002      	movs	r0, #2
 800053c:	f7ff ff80 	bl	8000440 <ControlMotor>
	  previousDir = currentDir;
 8000540:	4a5f      	ldr	r2, [pc, #380]	; (80006c0 <main+0x1fc>)
 8000542:	7813      	ldrb	r3, [r2, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	495f      	ldr	r1, [pc, #380]	; (80006c4 <main+0x200>)
 8000548:	700b      	strb	r3, [r1, #0]
	  currentDir = STOP;
 800054a:	2302      	movs	r3, #2
 800054c:	7013      	strb	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOA, USR_LED_Pin, GPIO_PIN_RESET);
 800054e:	2090      	movs	r0, #144	; 0x90
 8000550:	2200      	movs	r2, #0
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	05c0      	lsls	r0, r0, #23
 8000556:	f000 fe0b 	bl	8001170 <HAL_GPIO_WritePin>
      if(currentMillis - previousMillisUSARTTime > 500)
 800055a:	9b04      	ldr	r3, [sp, #16]
 800055c:	9a02      	ldr	r2, [sp, #8]
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	22fa      	movs	r2, #250	; 0xfa
 8000562:	0052      	lsls	r2, r2, #1
 8000564:	4293      	cmp	r3, r2
 8000566:	d862      	bhi.n	800062e <main+0x16a>
      if(switchPressed == HIGH)
 8000568:	4b57      	ldr	r3, [pc, #348]	; (80006c8 <main+0x204>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d076      	beq.n	800065e <main+0x19a>
      currentMillis = HAL_GetTick();
 8000570:	f000 f9b6 	bl	80008e0 <HAL_GetTick>
 8000574:	9004      	str	r0, [sp, #16]
      sConfig.Channel = ADC_CHANNEL_5;
 8000576:	2305      	movs	r3, #5
 8000578:	6033      	str	r3, [r6, #0]
      HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800057a:	0031      	movs	r1, r6
 800057c:	0020      	movs	r0, r4
 800057e:	f000 fbff 	bl	8000d80 <HAL_ADC_ConfigChannel>
      HAL_ADC_Start(&hadc);
 8000582:	0020      	movs	r0, r4
 8000584:	f000 fb40 	bl	8000c08 <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK)
 8000588:	210a      	movs	r1, #10
 800058a:	0020      	movs	r0, r4
 800058c:	f000 fb8e 	bl	8000cac <HAL_ADC_PollForConversion>
 8000590:	2800      	cmp	r0, #0
 8000592:	d0c3      	beq.n	800051c <main+0x58>
      sConfig.Channel = ADC_CHANNEL_2;
 8000594:	4944      	ldr	r1, [pc, #272]	; (80006a8 <main+0x1e4>)
 8000596:	2302      	movs	r3, #2
 8000598:	600b      	str	r3, [r1, #0]
      HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800059a:	4f48      	ldr	r7, [pc, #288]	; (80006bc <main+0x1f8>)
 800059c:	0038      	movs	r0, r7
 800059e:	f000 fbef 	bl	8000d80 <HAL_ADC_ConfigChannel>
      HAL_ADC_Start(&hadc);
 80005a2:	0038      	movs	r0, r7
 80005a4:	f000 fb30 	bl	8000c08 <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK)
 80005a8:	210a      	movs	r1, #10
 80005aa:	0038      	movs	r0, r7
 80005ac:	f000 fb7e 	bl	8000cac <HAL_ADC_PollForConversion>
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d0bb      	beq.n	800052c <main+0x68>
      HAL_ADC_Stop(&hadc);
 80005b4:	4841      	ldr	r0, [pc, #260]	; (80006bc <main+0x1f8>)
 80005b6:	f000 fb57 	bl	8000c68 <HAL_ADC_Stop>
      fbTotalFwd += fbInstFwd;
 80005ba:	2316      	movs	r3, #22
 80005bc:	446b      	add	r3, sp
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80005c2:	189b      	adds	r3, r3, r2
 80005c4:	9309      	str	r3, [sp, #36]	; 0x24
      fbTotalRwd += fbInstRwd;
 80005c6:	ab05      	add	r3, sp, #20
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	9a08      	ldr	r2, [sp, #32]
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	9308      	str	r3, [sp, #32]
      fbSamples++;
 80005d0:	9b06      	ldr	r3, [sp, #24]
 80005d2:	3301      	adds	r3, #1
 80005d4:	9306      	str	r3, [sp, #24]
      if(currentMillis - previousMillisADCTime > adcInterval)
 80005d6:	9b04      	ldr	r3, [sp, #16]
 80005d8:	9a03      	ldr	r2, [sp, #12]
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	2b46      	cmp	r3, #70	; 0x46
 80005de:	d914      	bls.n	800060a <main+0x146>
	  previousMillisADCTime = currentMillis;
 80005e0:	9b04      	ldr	r3, [sp, #16]
 80005e2:	9303      	str	r3, [sp, #12]
	  fbAvgFwd = (fbTotalFwd/fbSamples);
 80005e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80005e6:	9906      	ldr	r1, [sp, #24]
 80005e8:	f7ff fd96 	bl	8000118 <__udivsi3>
 80005ec:	b280      	uxth	r0, r0
 80005ee:	231e      	movs	r3, #30
 80005f0:	446b      	add	r3, sp
 80005f2:	8018      	strh	r0, [r3, #0]
	  fbAvgRwd = (fbTotalRwd/fbSamples);
 80005f4:	9808      	ldr	r0, [sp, #32]
 80005f6:	9906      	ldr	r1, [sp, #24]
 80005f8:	f7ff fd8e 	bl	8000118 <__udivsi3>
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ab07      	add	r3, sp, #28
 8000600:	8018      	strh	r0, [r3, #0]
	  fbTotalFwd = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	9309      	str	r3, [sp, #36]	; 0x24
	  fbTotalRwd = 0;
 8000606:	9308      	str	r3, [sp, #32]
	  fbSamples = 0;
 8000608:	9306      	str	r3, [sp, #24]
      if ((fbAvgFwd > adcThresh) || (fbAvgRwd > (adcThresh + adcOffset)))
 800060a:	466b      	mov	r3, sp
 800060c:	79da      	ldrb	r2, [r3, #7]
 800060e:	231e      	movs	r3, #30
 8000610:	446b      	add	r3, sp
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	429a      	cmp	r2, r3
 8000618:	d38f      	bcc.n	800053a <main+0x76>
 800061a:	ab07      	add	r3, sp, #28
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	b292      	uxth	r2, r2
 8000620:	466b      	mov	r3, sp
 8000622:	3307      	adds	r3, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	330a      	adds	r3, #10
 8000628:	429a      	cmp	r2, r3
 800062a:	dd96      	ble.n	800055a <main+0x96>
 800062c:	e785      	b.n	800053a <main+0x76>
	  previousMillisUSARTTime = currentMillis;
 800062e:	9b04      	ldr	r3, [sp, #16]
 8000630:	9302      	str	r3, [sp, #8]
	  sprintf(txBuffer, "FWD: %d RWD: %d\r\n", fbAvgFwd, fbAvgRwd);
 8000632:	231e      	movs	r3, #30
 8000634:	446b      	add	r3, sp
 8000636:	881a      	ldrh	r2, [r3, #0]
 8000638:	b292      	uxth	r2, r2
 800063a:	ab07      	add	r3, sp, #28
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b29b      	uxth	r3, r3
 8000640:	4f1a      	ldr	r7, [pc, #104]	; (80006ac <main+0x1e8>)
 8000642:	4922      	ldr	r1, [pc, #136]	; (80006cc <main+0x208>)
 8000644:	0038      	movs	r0, r7
 8000646:	f001 fc27 	bl	8001e98 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 800064a:	0038      	movs	r0, r7
 800064c:	f7ff fd5c 	bl	8000108 <strlen>
 8000650:	b282      	uxth	r2, r0
 8000652:	230a      	movs	r3, #10
 8000654:	0039      	movs	r1, r7
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <main+0x1f0>)
 8000658:	f001 faf6 	bl	8001c48 <HAL_UART_Transmit>
 800065c:	e784      	b.n	8000568 <main+0xa4>
	  HAL_Delay(200);		//Switch Debouncing Delay
 800065e:	20c8      	movs	r0, #200	; 0xc8
 8000660:	f000 f944 	bl	80008ec <HAL_Delay>
	  switchPressed = LOW;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <main+0x204>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(SWITCH_INPUT_GPIO_Port, SWITCH_INPUT_Pin) == HIGH)
 800066a:	2102      	movs	r1, #2
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <main+0x20c>)
 800066e:	f000 fd79 	bl	8001164 <HAL_GPIO_ReadPin>
 8000672:	2801      	cmp	r0, #1
 8000674:	d005      	beq.n	8000682 <main+0x1be>
	      if (currentDir != REWIND)
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <main+0x1fc>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10c      	bne.n	8000698 <main+0x1d4>
      HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800067e:	4c0f      	ldr	r4, [pc, #60]	; (80006bc <main+0x1f8>)
 8000680:	e776      	b.n	8000570 <main+0xac>
	      if (currentDir != FORWARD)
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <main+0x1fc>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <main+0x1ba>
		  currentDir = FORWARD;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <main+0x1fc>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
		  ControlMotor(FORWARD);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fed5 	bl	8000440 <ControlMotor>
 8000696:	e7f2      	b.n	800067e <main+0x1ba>
		  currentDir = REWIND;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <main+0x1fc>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
		  ControlMotor(REWIND);
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff fece 	bl	8000440 <ControlMotor>
 80006a4:	e7eb      	b.n	800067e <main+0x1ba>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000090 	.word	0x20000090
 80006ac:	200000ec 	.word	0x200000ec
 80006b0:	080026cc 	.word	0x080026cc
 80006b4:	2000010c 	.word	0x2000010c
 80006b8:	00001388 	.word	0x00001388
 80006bc:	200000ac 	.word	0x200000ac
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000001 	.word	0x20000001
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	080026e8 	.word	0x080026e8
 80006d0:	48000400 	.word	0x48000400

080006d4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_MspInit+0x2c>)
 80006dc:	6999      	ldr	r1, [r3, #24]
 80006de:	2201      	movs	r2, #1
 80006e0:	4311      	orrs	r1, r2
 80006e2:	6199      	str	r1, [r3, #24]
 80006e4:	6999      	ldr	r1, [r3, #24]
 80006e6:	400a      	ands	r2, r1
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	69da      	ldr	r2, [r3, #28]
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	0549      	lsls	r1, r1, #21
 80006f2:	430a      	orrs	r2, r1
 80006f4:	61da      	str	r2, [r3, #28]
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	400b      	ands	r3, r1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	b002      	add	sp, #8
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000708:	4770      	bx	lr

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	e7fe      	b.n	800070a <HardFault_Handler>

0800070c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000712:	f000 f8d9 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000716:	bd10      	pop	{r4, pc}

08000718 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000718:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800071a:	2002      	movs	r0, #2
 800071c:	f000 fd2e 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000720:	bd10      	pop	{r4, pc}
	...

08000724 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000724:	b510      	push	{r4, lr}
 8000726:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000728:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <_sbrk+0x34>)
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	2a00      	cmp	r2, #0
 800072e:	d008      	beq.n	8000742 <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8000730:	4a09      	ldr	r2, [pc, #36]	; (8000758 <_sbrk+0x34>)
 8000732:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000734:	18c3      	adds	r3, r0, r3
 8000736:	466a      	mov	r2, sp
 8000738:	4293      	cmp	r3, r2
 800073a:	d806      	bhi.n	800074a <_sbrk+0x26>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <_sbrk+0x34>)
 800073e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000740:	bd10      	pop	{r4, pc}
		heap_end = &end;
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <_sbrk+0x34>)
 8000744:	4905      	ldr	r1, [pc, #20]	; (800075c <_sbrk+0x38>)
 8000746:	6011      	str	r1, [r2, #0]
 8000748:	e7f2      	b.n	8000730 <_sbrk+0xc>
		errno = ENOMEM;
 800074a:	f001 fb69 	bl	8001e20 <__errno>
 800074e:	230c      	movs	r3, #12
 8000750:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000752:	2001      	movs	r0, #1
 8000754:	4240      	negs	r0, r0
 8000756:	e7f3      	b.n	8000740 <_sbrk+0x1c>
 8000758:	200000a0 	.word	0x200000a0
 800075c:	20000198 	.word	0x20000198

08000760 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000760:	4770      	bx	lr
	...

08000764 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000764:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_USART1_UART_Init+0x34>)
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART1_UART_Init+0x38>)
 800076a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800076c:	23e1      	movs	r3, #225	; 0xe1
 800076e:	025b      	lsls	r3, r3, #9
 8000770:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	2300      	movs	r3, #0
 8000774:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000776:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000778:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077a:	220c      	movs	r2, #12
 800077c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000784:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	f001 fb15 	bl	8001db4 <HAL_UART_Init>
 800078a:	2800      	cmp	r0, #0
 800078c:	d100      	bne.n	8000790 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800078e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000790:	f7ff ffa0 	bl	80006d4 <Error_Handler>
}
 8000794:	e7fb      	b.n	800078e <MX_USART1_UART_Init+0x2a>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	2000010c 	.word	0x2000010c
 800079c:	40013800 	.word	0x40013800

080007a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007a0:	b510      	push	{r4, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	2214      	movs	r2, #20
 80007a8:	2100      	movs	r1, #0
 80007aa:	a803      	add	r0, sp, #12
 80007ac:	f001 fb6b 	bl	8001e86 <memset>
  if(uartHandle->Instance==USART1)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UART_MspInit+0x60>)
 80007b2:	6822      	ldr	r2, [r4, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d001      	beq.n	80007bc <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007b8:	b008      	add	sp, #32
 80007ba:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_UART_MspInit+0x64>)
 80007be:	6999      	ldr	r1, [r3, #24]
 80007c0:	2080      	movs	r0, #128	; 0x80
 80007c2:	01c0      	lsls	r0, r0, #7
 80007c4:	4301      	orrs	r1, r0
 80007c6:	6199      	str	r1, [r3, #24]
 80007c8:	699a      	ldr	r2, [r3, #24]
 80007ca:	4002      	ands	r2, r0
 80007cc:	9201      	str	r2, [sp, #4]
 80007ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	0289      	lsls	r1, r1, #10
 80007d6:	430a      	orrs	r2, r1
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	400b      	ands	r3, r1
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007e2:	23c0      	movs	r3, #192	; 0xc0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	3301      	adds	r3, #1
 80007ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007f0:	3b02      	subs	r3, #2
 80007f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	2090      	movs	r0, #144	; 0x90
 80007f6:	a903      	add	r1, sp, #12
 80007f8:	05c0      	lsls	r0, r0, #23
 80007fa:	f000 fbad 	bl	8000f58 <HAL_GPIO_Init>
}
 80007fe:	e7db      	b.n	80007b8 <HAL_UART_MspInit+0x18>
 8000800:	40013800 	.word	0x40013800
 8000804:	40021000 	.word	0x40021000

08000808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000832:	f7ff ff95 	bl	8000760 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000836:	f001 faf9 	bl	8001e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fe43 	bl	80004c4 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800084c:	08002750 	.word	0x08002750
  ldr r2, =_sbss
 8000850:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000854:	20000198 	.word	0x20000198

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>
	...

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b510      	push	{r4, lr}
 800085e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_InitTick+0x40>)
 8000862:	7819      	ldrb	r1, [r3, #0]
 8000864:	20fa      	movs	r0, #250	; 0xfa
 8000866:	0080      	lsls	r0, r0, #2
 8000868:	f7ff fc56 	bl	8000118 <__udivsi3>
 800086c:	0001      	movs	r1, r0
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_InitTick+0x44>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f7ff fc51 	bl	8000118 <__udivsi3>
 8000876:	f000 fb53 	bl	8000f20 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	2800      	cmp	r0, #0
 800087e:	d101      	bne.n	8000884 <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000880:	2c03      	cmp	r4, #3
 8000882:	d901      	bls.n	8000888 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000884:	0018      	movs	r0, r3
 8000886:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	3001      	adds	r0, #1
 800088a:	2200      	movs	r2, #0
 800088c:	0021      	movs	r1, r4
 800088e:	4240      	negs	r0, r0
 8000890:	f000 fb08 	bl	8000ea4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_InitTick+0x48>)
 8000896:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	e7f3      	b.n	8000884 <HAL_InitTick+0x28>
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004
 80008a4:	2000000c 	.word	0x2000000c

080008a8 <HAL_Init>:
{
 80008a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008aa:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_Init+0x1c>)
 80008ac:	6813      	ldr	r3, [r2, #0]
 80008ae:	2110      	movs	r1, #16
 80008b0:	430b      	orrs	r3, r1
 80008b2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ffd1 	bl	800085c <HAL_InitTick>
  HAL_MspInit();
 80008ba:	f7ff ff0d 	bl	80006d8 <HAL_MspInit>
}
 80008be:	2000      	movs	r0, #0
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <HAL_IncTick+0x10>)
 80008ca:	6811      	ldr	r1, [r2, #0]
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_IncTick+0x14>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	185b      	adds	r3, r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	4770      	bx	lr
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000190 	.word	0x20000190
 80008dc:	20000008 	.word	0x20000008

080008e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008e0:	4b01      	ldr	r3, [pc, #4]	; (80008e8 <HAL_GetTick+0x8>)
 80008e2:	6818      	ldr	r0, [r3, #0]
}
 80008e4:	4770      	bx	lr
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000190 	.word	0x20000190

080008ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff fff6 	bl	80008e0 <HAL_GetTick>
 80008f4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	1c63      	adds	r3, r4, #1
 80008f8:	d002      	beq.n	8000900 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <HAL_Delay+0x20>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000900:	f7ff ffee 	bl	80008e0 <HAL_GetTick>
 8000904:	1b40      	subs	r0, r0, r5
 8000906:	42a0      	cmp	r0, r4
 8000908:	d3fa      	bcc.n	8000900 <HAL_Delay+0x14>
  {
  }
}
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	20000008 	.word	0x20000008

08000910 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000914:	6803      	ldr	r3, [r0, #0]
 8000916:	689a      	ldr	r2, [r3, #8]
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000918:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800091a:	0752      	lsls	r2, r2, #29
 800091c:	d525      	bpl.n	800096a <ADC_ConversionStop+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	0752      	lsls	r2, r2, #29
 8000922:	d506      	bpl.n	8000932 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000924:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000926:	0792      	lsls	r2, r2, #30
 8000928:	d403      	bmi.n	8000932 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	2110      	movs	r1, #16
 800092e:	430a      	orrs	r2, r1
 8000930:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000932:	f7ff ffd5 	bl	80008e0 <HAL_GetTick>
 8000936:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000938:	2504      	movs	r5, #4
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	421d      	tst	r5, r3
 8000940:	d012      	beq.n	8000968 <ADC_ConversionStop+0x58>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000942:	f7ff ffcd 	bl	80008e0 <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2802      	cmp	r0, #2
 800094a:	d9f6      	bls.n	800093a <ADC_ConversionStop+0x2a>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	421d      	tst	r5, r3
 8000952:	d0f2      	beq.n	800093a <ADC_ConversionStop+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000956:	2210      	movs	r2, #16
 8000958:	4313      	orrs	r3, r2
 800095a:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800095c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800095e:	3a0f      	subs	r2, #15
 8000960:	4313      	orrs	r3, r2
 8000962:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
 8000966:	e000      	b.n	800096a <ADC_ConversionStop+0x5a>
  return HAL_OK;
 8000968:	2000      	movs	r0, #0
}
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <ADC_Disable>:
{
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000970:	6802      	ldr	r2, [r0, #0]
 8000972:	6891      	ldr	r1, [r2, #8]
 8000974:	2303      	movs	r3, #3
 8000976:	400b      	ands	r3, r1
  return HAL_OK;
 8000978:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800097a:	2b01      	cmp	r3, #1
 800097c:	d000      	beq.n	8000980 <ADC_Disable+0x14>
}
 800097e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	07db      	lsls	r3, r3, #31
 8000984:	d402      	bmi.n	800098c <ADC_Disable+0x20>
 8000986:	68d3      	ldr	r3, [r2, #12]
 8000988:	041b      	lsls	r3, r3, #16
 800098a:	d5f8      	bpl.n	800097e <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800098c:	6891      	ldr	r1, [r2, #8]
 800098e:	2305      	movs	r3, #5
 8000990:	400b      	ands	r3, r1
 8000992:	2b01      	cmp	r3, #1
 8000994:	d009      	beq.n	80009aa <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000998:	2210      	movs	r2, #16
 800099a:	4313      	orrs	r3, r2
 800099c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800099e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009a0:	3a0f      	subs	r2, #15
 80009a2:	4313      	orrs	r3, r2
 80009a4:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80009a6:	2001      	movs	r0, #1
 80009a8:	e7e9      	b.n	800097e <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80009aa:	6893      	ldr	r3, [r2, #8]
 80009ac:	2102      	movs	r1, #2
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6093      	str	r3, [r2, #8]
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	2203      	movs	r2, #3
 80009b6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80009b8:	f7ff ff92 	bl	80008e0 <HAL_GetTick>
 80009bc:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80009be:	2501      	movs	r5, #1
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	421d      	tst	r5, r3
 80009c6:	d012      	beq.n	80009ee <ADC_Disable+0x82>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009c8:	f7ff ff8a 	bl	80008e0 <HAL_GetTick>
 80009cc:	1b80      	subs	r0, r0, r6
 80009ce:	2802      	cmp	r0, #2
 80009d0:	d9f6      	bls.n	80009c0 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	421d      	tst	r5, r3
 80009d8:	d0f2      	beq.n	80009c0 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009dc:	2210      	movs	r2, #16
 80009de:	4313      	orrs	r3, r2
 80009e0:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009e4:	3a0f      	subs	r2, #15
 80009e6:	4313      	orrs	r3, r2
 80009e8:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
 80009ec:	e7c7      	b.n	800097e <ADC_Disable+0x12>
  return HAL_OK;
 80009ee:	2000      	movs	r0, #0
 80009f0:	e7c5      	b.n	800097e <ADC_Disable+0x12>
	...

080009f4 <ADC_Enable>:
{
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009fe:	6803      	ldr	r3, [r0, #0]
 8000a00:	6899      	ldr	r1, [r3, #8]
 8000a02:	2203      	movs	r2, #3
 8000a04:	400a      	ands	r2, r1
 8000a06:	2a01      	cmp	r2, #1
 8000a08:	d031      	beq.n	8000a6e <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000a0a:	6899      	ldr	r1, [r3, #8]
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <ADC_Enable+0xa4>)
 8000a0e:	4211      	tst	r1, r2
 8000a10:	d135      	bne.n	8000a7e <ADC_Enable+0x8a>
    __HAL_ADC_ENABLE(hadc);
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	2101      	movs	r1, #1
 8000a16:	430a      	orrs	r2, r1
 8000a18:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <ADC_Enable+0xa8>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	4920      	ldr	r1, [pc, #128]	; (8000aa0 <ADC_Enable+0xac>)
 8000a20:	f7ff fb7a 	bl	8000118 <__udivsi3>
 8000a24:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000a26:	9b01      	ldr	r3, [sp, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d005      	beq.n	8000a38 <ADC_Enable+0x44>
      wait_loop_index--;
 8000a2c:	9b01      	ldr	r3, [sp, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000a32:	9b01      	ldr	r3, [sp, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f9      	bne.n	8000a2c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8000a38:	f7ff ff52 	bl	80008e0 <HAL_GetTick>
 8000a3c:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a3e:	2501      	movs	r5, #1
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	421d      	tst	r5, r3
 8000a46:	d125      	bne.n	8000a94 <ADC_Enable+0xa0>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a48:	f7ff ff4a 	bl	80008e0 <HAL_GetTick>
 8000a4c:	1b80      	subs	r0, r0, r6
 8000a4e:	2802      	cmp	r0, #2
 8000a50:	d9f6      	bls.n	8000a40 <ADC_Enable+0x4c>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	421d      	tst	r5, r3
 8000a58:	d1f2      	bne.n	8000a40 <ADC_Enable+0x4c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a64:	3a0f      	subs	r2, #15
 8000a66:	4313      	orrs	r3, r2
 8000a68:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	e010      	b.n	8000a90 <ADC_Enable+0x9c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a6e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8000a70:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a72:	07d2      	lsls	r2, r2, #31
 8000a74:	d40c      	bmi.n	8000a90 <ADC_Enable+0x9c>
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	0412      	lsls	r2, r2, #16
 8000a7a:	d5c6      	bpl.n	8000a0a <ADC_Enable+0x16>
 8000a7c:	e008      	b.n	8000a90 <ADC_Enable+0x9c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000a80:	2210      	movs	r2, #16
 8000a82:	4313      	orrs	r3, r2
 8000a84:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a88:	3a0f      	subs	r2, #15
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000a8e:	2001      	movs	r0, #1
}
 8000a90:	b002      	add	sp, #8
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7fb      	b.n	8000a90 <ADC_Enable+0x9c>
 8000a98:	80000017 	.word	0x80000017
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	000f4240 	.word	0x000f4240

08000aa4 <HAL_ADC_Init>:
{
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000aa8:	d100      	bne.n	8000aac <HAL_ADC_Init+0x8>
 8000aaa:	e0a5      	b.n	8000bf8 <HAL_ADC_Init+0x154>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d074      	beq.n	8000b9c <HAL_ADC_Init+0xf8>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ab4:	06db      	lsls	r3, r3, #27
 8000ab6:	d500      	bpl.n	8000aba <HAL_ADC_Init+0x16>
 8000ab8:	e098      	b.n	8000bec <HAL_ADC_Init+0x148>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aba:	6822      	ldr	r2, [r4, #0]
 8000abc:	6893      	ldr	r3, [r2, #8]
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8000ac2:	d000      	beq.n	8000ac6 <HAL_ADC_Init+0x22>
 8000ac4:	e092      	b.n	8000bec <HAL_ADC_Init+0x148>
    ADC_STATE_CLR_SET(hadc->State,
 8000ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ac8:	484c      	ldr	r0, [pc, #304]	; (8000bfc <HAL_ADC_Init+0x158>)
 8000aca:	4003      	ands	r3, r0
 8000acc:	3006      	adds	r0, #6
 8000ace:	30ff      	adds	r0, #255	; 0xff
 8000ad0:	4303      	orrs	r3, r0
 8000ad2:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ad4:	6890      	ldr	r0, [r2, #8]
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	4003      	ands	r3, r0
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d064      	beq.n	8000ba8 <HAL_ADC_Init+0x104>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ade:	68d3      	ldr	r3, [r2, #12]
 8000ae0:	2018      	movs	r0, #24
 8000ae2:	4383      	bics	r3, r0
 8000ae4:	68a0      	ldr	r0, [r4, #8]
 8000ae6:	4303      	orrs	r3, r0
 8000ae8:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000aea:	6822      	ldr	r2, [r4, #0]
 8000aec:	6913      	ldr	r3, [r2, #16]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	6860      	ldr	r0, [r4, #4]
 8000af4:	4303      	orrs	r3, r0
 8000af6:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000af8:	6822      	ldr	r2, [r4, #0]
 8000afa:	68d3      	ldr	r3, [r2, #12]
 8000afc:	4840      	ldr	r0, [pc, #256]	; (8000c00 <HAL_ADC_Init+0x15c>)
 8000afe:	4003      	ands	r3, r0
 8000b00:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b02:	7e22      	ldrb	r2, [r4, #24]
 8000b04:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b06:	7e63      	ldrb	r3, [r4, #25]
 8000b08:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b0c:	7ea0      	ldrb	r0, [r4, #26]
 8000b0e:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b12:	000e      	movs	r6, r1
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d001      	beq.n	8000b1c <HAL_ADC_Init+0x78>
 8000b18:	2680      	movs	r6, #128	; 0x80
 8000b1a:	0176      	lsls	r6, r6, #5
 8000b1c:	68e3      	ldr	r3, [r4, #12]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b22:	6923      	ldr	r3, [r4, #16]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d046      	beq.n	8000bb6 <HAL_ADC_Init+0x112>
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b28:	2524      	movs	r5, #36	; 0x24
 8000b2a:	5d63      	ldrb	r3, [r4, r5]
 8000b2c:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	4333      	orrs	r3, r6
 8000b32:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b34:	7ee2      	ldrb	r2, [r4, #27]
 8000b36:	2a01      	cmp	r2, #1
 8000b38:	d03f      	beq.n	8000bba <HAL_ADC_Init+0x116>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b3a:	69e2      	ldr	r2, [r4, #28]
 8000b3c:	21c2      	movs	r1, #194	; 0xc2
 8000b3e:	31ff      	adds	r1, #255	; 0xff
 8000b40:	428a      	cmp	r2, r1
 8000b42:	d002      	beq.n	8000b4a <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b44:	6a21      	ldr	r1, [r4, #32]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b4a:	6821      	ldr	r1, [r4, #0]
 8000b4c:	68ca      	ldr	r2, [r1, #12]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0549      	lsls	r1, r1, #21
 8000b58:	428a      	cmp	r2, r1
 8000b5a:	d002      	beq.n	8000b62 <HAL_ADC_Init+0xbe>
 8000b5c:	3a01      	subs	r2, #1
 8000b5e:	2a06      	cmp	r2, #6
 8000b60:	d80a      	bhi.n	8000b78 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000b62:	6820      	ldr	r0, [r4, #0]
 8000b64:	6941      	ldr	r1, [r0, #20]
 8000b66:	2207      	movs	r2, #7
 8000b68:	4391      	bics	r1, r2
 8000b6a:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000b6c:	6821      	ldr	r1, [r4, #0]
 8000b6e:	6948      	ldr	r0, [r1, #20]
 8000b70:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000b72:	402a      	ands	r2, r5
 8000b74:	4302      	orrs	r2, r0
 8000b76:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000b78:	6822      	ldr	r2, [r4, #0]
 8000b7a:	68d2      	ldr	r2, [r2, #12]
 8000b7c:	4921      	ldr	r1, [pc, #132]	; (8000c04 <HAL_ADC_Init+0x160>)
 8000b7e:	400a      	ands	r2, r1
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d029      	beq.n	8000bd8 <HAL_ADC_Init+0x134>
      ADC_STATE_CLR_SET(hadc->State,
 8000b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b86:	2212      	movs	r2, #18
 8000b88:	4393      	bics	r3, r2
 8000b8a:	3a02      	subs	r2, #2
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b92:	3a0f      	subs	r2, #15
 8000b94:	4313      	orrs	r3, r2
 8000b96:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
 8000b9a:	e02c      	b.n	8000bf6 <HAL_ADC_Init+0x152>
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8000b9e:	2234      	movs	r2, #52	; 0x34
 8000ba0:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000ba2:	f7ff fb8d 	bl	80002c0 <HAL_ADC_MspInit>
 8000ba6:	e784      	b.n	8000ab2 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ba8:	6813      	ldr	r3, [r2, #0]
 8000baa:	07db      	lsls	r3, r3, #31
 8000bac:	d4a4      	bmi.n	8000af8 <HAL_ADC_Init+0x54>
 8000bae:	68d3      	ldr	r3, [r2, #12]
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	d4a1      	bmi.n	8000af8 <HAL_ADC_Init+0x54>
 8000bb4:	e793      	b.n	8000ade <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	e7b6      	b.n	8000b28 <HAL_ADC_Init+0x84>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d103      	bne.n	8000bc6 <HAL_ADC_Init+0x122>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	0252      	lsls	r2, r2, #9
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	e7b9      	b.n	8000b3a <HAL_ADC_Init+0x96>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000bc8:	2120      	movs	r1, #32
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000bd0:	391f      	subs	r1, #31
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000bd6:	e7b0      	b.n	8000b3a <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000bdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000bde:	2203      	movs	r2, #3
 8000be0:	4393      	bics	r3, r2
 8000be2:	3a02      	subs	r2, #2
 8000be4:	4313      	orrs	r3, r2
 8000be6:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be8:	2000      	movs	r0, #0
 8000bea:	e004      	b.n	8000bf6 <HAL_ADC_Init+0x152>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000bee:	2210      	movs	r2, #16
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000bf4:	2001      	movs	r0, #1
}
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	e7fc      	b.n	8000bf6 <HAL_ADC_Init+0x152>
 8000bfc:	fffffefd 	.word	0xfffffefd
 8000c00:	fffe0219 	.word	0xfffe0219
 8000c04:	833fffe7 	.word	0x833fffe7

08000c08 <HAL_ADC_Start>:
{
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c0c:	6803      	ldr	r3, [r0, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	075b      	lsls	r3, r3, #29
 8000c12:	d423      	bmi.n	8000c5c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8000c14:	2334      	movs	r3, #52	; 0x34
 8000c16:	5cc3      	ldrb	r3, [r0, r3]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d021      	beq.n	8000c60 <HAL_ADC_Start+0x58>
 8000c1c:	2334      	movs	r3, #52	; 0x34
 8000c1e:	2201      	movs	r2, #1
 8000c20:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000c22:	7e43      	ldrb	r3, [r0, #25]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d114      	bne.n	8000c52 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8000c28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_ADC_Start+0x5c>)
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4313      	orrs	r3, r2
 8000c34:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8000c36:	2300      	movs	r3, #0
 8000c38:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8000c3a:	2234      	movs	r2, #52	; 0x34
 8000c3c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	3a18      	subs	r2, #24
 8000c42:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000c44:	6822      	ldr	r2, [r4, #0]
 8000c46:	6893      	ldr	r3, [r2, #8]
 8000c48:	2104      	movs	r1, #4
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	6093      	str	r3, [r2, #8]
 8000c4e:	2000      	movs	r0, #0
}
 8000c50:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000c52:	f7ff fecf 	bl	80009f4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d0e6      	beq.n	8000c28 <HAL_ADC_Start+0x20>
 8000c5a:	e7f9      	b.n	8000c50 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	e7f7      	b.n	8000c50 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8000c60:	2002      	movs	r0, #2
 8000c62:	e7f5      	b.n	8000c50 <HAL_ADC_Start+0x48>
 8000c64:	fffff0fe 	.word	0xfffff0fe

08000c68 <HAL_ADC_Stop>:
{ 
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000c6c:	2334      	movs	r3, #52	; 0x34
 8000c6e:	5cc3      	ldrb	r3, [r0, r3]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d017      	beq.n	8000ca4 <HAL_ADC_Stop+0x3c>
 8000c74:	2334      	movs	r3, #52	; 0x34
 8000c76:	2201      	movs	r2, #1
 8000c78:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000c7a:	f7ff fe49 	bl	8000910 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8000c82:	2334      	movs	r3, #52	; 0x34
 8000c84:	2200      	movs	r2, #0
 8000c86:	54e2      	strb	r2, [r4, r3]
}
 8000c88:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8000c8a:	0020      	movs	r0, r4
 8000c8c:	f7ff fe6e 	bl	800096c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d1f6      	bne.n	8000c82 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8000c94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_ADC_Stop+0x40>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	3204      	adds	r2, #4
 8000c9c:	32ff      	adds	r2, #255	; 0xff
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	63a3      	str	r3, [r4, #56]	; 0x38
 8000ca2:	e7ee      	b.n	8000c82 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	e7ef      	b.n	8000c88 <HAL_ADC_Stop+0x20>
 8000ca8:	fffffefe 	.word	0xfffffefe

08000cac <HAL_ADC_PollForConversion>:
{
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	0007      	movs	r7, r0
 8000cb0:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000cb2:	6943      	ldr	r3, [r0, #20]
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d025      	beq.n	8000d04 <HAL_ADC_PollForConversion+0x58>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000cb8:	6803      	ldr	r3, [r0, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000cbc:	240c      	movs	r4, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000cbe:	07db      	lsls	r3, r3, #31
 8000cc0:	d417      	bmi.n	8000cf2 <HAL_ADC_PollForConversion+0x46>
  tickstart = HAL_GetTick();
 8000cc2:	f7ff fe0d 	bl	80008e0 <HAL_GetTick>
 8000cc6:	0005      	movs	r5, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	6813      	ldr	r3, [r2, #0]
 8000ccc:	421c      	tst	r4, r3
 8000cce:	d121      	bne.n	8000d14 <HAL_ADC_PollForConversion+0x68>
    if(Timeout != HAL_MAX_DELAY)
 8000cd0:	1c73      	adds	r3, r6, #1
 8000cd2:	d0fa      	beq.n	8000cca <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d117      	bne.n	8000d08 <HAL_ADC_PollForConversion+0x5c>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	421c      	tst	r4, r3
 8000cde:	d1f3      	bne.n	8000cc8 <HAL_ADC_PollForConversion+0x1c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 8000ce8:	2334      	movs	r3, #52	; 0x34
 8000cea:	2200      	movs	r2, #0
 8000cec:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8000cee:	2003      	movs	r0, #3
 8000cf0:	e007      	b.n	8000d02 <HAL_ADC_PollForConversion+0x56>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8000cfa:	2334      	movs	r3, #52	; 0x34
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
}
 8000d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000d04:	2408      	movs	r4, #8
 8000d06:	e7dc      	b.n	8000cc2 <HAL_ADC_PollForConversion+0x16>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d08:	f7ff fdea 	bl	80008e0 <HAL_GetTick>
 8000d0c:	1b40      	subs	r0, r0, r5
 8000d0e:	42b0      	cmp	r0, r6
 8000d10:	d9da      	bls.n	8000cc8 <HAL_ADC_PollForConversion+0x1c>
 8000d12:	e7e1      	b.n	8000cd8 <HAL_ADC_PollForConversion+0x2c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d1e:	68d1      	ldr	r1, [r2, #12]
 8000d20:	23c0      	movs	r3, #192	; 0xc0
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	4219      	tst	r1, r3
 8000d26:	d113      	bne.n	8000d50 <HAL_ADC_PollForConversion+0xa4>
 8000d28:	7ebb      	ldrb	r3, [r7, #26]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d110      	bne.n	8000d50 <HAL_ADC_PollForConversion+0xa4>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	071b      	lsls	r3, r3, #28
 8000d32:	d50d      	bpl.n	8000d50 <HAL_ADC_PollForConversion+0xa4>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d34:	6893      	ldr	r3, [r2, #8]
 8000d36:	075b      	lsls	r3, r3, #29
 8000d38:	d412      	bmi.n	8000d60 <HAL_ADC_PollForConversion+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d3a:	6853      	ldr	r3, [r2, #4]
 8000d3c:	210c      	movs	r1, #12
 8000d3e:	438b      	bics	r3, r1
 8000d40:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_ADC_PollForConversion+0xc8>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	3204      	adds	r2, #4
 8000d4a:	32ff      	adds	r2, #255	; 0xff
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000d50:	7e3b      	ldrb	r3, [r7, #24]
  return HAL_OK;
 8000d52:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1d4      	bne.n	8000d02 <HAL_ADC_PollForConversion+0x56>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e7d0      	b.n	8000d02 <HAL_ADC_PollForConversion+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d62:	2220      	movs	r2, #32
 8000d64:	4313      	orrs	r3, r2
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d6a:	3a1f      	subs	r2, #31
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d70:	e7ee      	b.n	8000d50 <HAL_ADC_PollForConversion+0xa4>
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	fffffefe 	.word	0xfffffefe

08000d78 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000d78:	6803      	ldr	r3, [r0, #0]
 8000d7a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000d7c:	4770      	bx	lr
	...

08000d80 <HAL_ADC_ConfigChannel>:
{
 8000d80:	b530      	push	{r4, r5, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000d8a:	3334      	adds	r3, #52	; 0x34
 8000d8c:	5cc3      	ldrb	r3, [r0, r3]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d100      	bne.n	8000d94 <HAL_ADC_ConfigChannel+0x14>
 8000d92:	e07b      	b.n	8000e8c <HAL_ADC_ConfigChannel+0x10c>
 8000d94:	2334      	movs	r3, #52	; 0x34
 8000d96:	2201      	movs	r2, #1
 8000d98:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d9a:	6803      	ldr	r3, [r0, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	0752      	lsls	r2, r2, #29
 8000da0:	d468      	bmi.n	8000e74 <HAL_ADC_ConfigChannel+0xf4>
    if (sConfig->Rank != ADC_RANK_NONE)
 8000da2:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <HAL_ADC_ConfigChannel+0x110>)
 8000da4:	6848      	ldr	r0, [r1, #4]
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d04a      	beq.n	8000e40 <HAL_ADC_ConfigChannel+0xc0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000daa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000dac:	2201      	movs	r2, #1
 8000dae:	680d      	ldr	r5, [r1, #0]
 8000db0:	40aa      	lsls	r2, r5
 8000db2:	4302      	orrs	r2, r0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000db6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	0552      	lsls	r2, r2, #21
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d013      	beq.n	8000de8 <HAL_ADC_ConfigChannel+0x68>
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d910      	bls.n	8000de8 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000dc6:	6822      	ldr	r2, [r4, #0]
 8000dc8:	6950      	ldr	r0, [r2, #20]
 8000dca:	2307      	movs	r3, #7
 8000dcc:	4003      	ands	r3, r0
 8000dce:	6888      	ldr	r0, [r1, #8]
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	d009      	beq.n	8000de8 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000dd4:	6950      	ldr	r0, [r2, #20]
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	4398      	bics	r0, r3
 8000dda:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	6950      	ldr	r0, [r2, #20]
 8000de0:	688d      	ldr	r5, [r1, #8]
 8000de2:	402b      	ands	r3, r5
 8000de4:	4303      	orrs	r3, r0
 8000de6:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000de8:	680b      	ldr	r3, [r1, #0]
 8000dea:	001a      	movs	r2, r3
 8000dec:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dee:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000df0:	2a01      	cmp	r2, #1
 8000df2:	d844      	bhi.n	8000e7e <HAL_ADC_ConfigChannel+0xfe>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000df4:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <HAL_ADC_ConfigChannel+0x114>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	3b10      	subs	r3, #16
 8000dfa:	4258      	negs	r0, r3
 8000dfc:	4143      	adcs	r3, r0
 8000dfe:	425b      	negs	r3, r3
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	03c0      	lsls	r0, r0, #15
 8000e04:	4003      	ands	r3, r0
 8000e06:	4684      	mov	ip, r0
 8000e08:	4463      	add	r3, ip
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <HAL_ADC_ConfigChannel+0x114>)
 8000e0e:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e10:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e12:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e14:	2b10      	cmp	r3, #16
 8000e16:	d132      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0xfe>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_ADC_ConfigChannel+0x118>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	491f      	ldr	r1, [pc, #124]	; (8000e9c <HAL_ADC_ConfigChannel+0x11c>)
 8000e1e:	f7ff f97b 	bl	8000118 <__udivsi3>
 8000e22:	0083      	lsls	r3, r0, #2
 8000e24:	1818      	adds	r0, r3, r0
 8000e26:	0040      	lsls	r0, r0, #1
 8000e28:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000e2a:	9b01      	ldr	r3, [sp, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d02b      	beq.n	8000e88 <HAL_ADC_ConfigChannel+0x108>
            wait_loop_index--;
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f9      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0xb0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	e01e      	b.n	8000e7e <HAL_ADC_ConfigChannel+0xfe>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e42:	2001      	movs	r0, #1
 8000e44:	680d      	ldr	r5, [r1, #0]
 8000e46:	40a8      	lsls	r0, r5
 8000e48:	4382      	bics	r2, r0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e4c:	680b      	ldr	r3, [r1, #0]
 8000e4e:	001a      	movs	r2, r3
 8000e50:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e52:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e54:	2a01      	cmp	r2, #1
 8000e56:	d812      	bhi.n	8000e7e <HAL_ADC_ConfigChannel+0xfe>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_ADC_ConfigChannel+0x114>)
 8000e5a:	6811      	ldr	r1, [r2, #0]
 8000e5c:	3b10      	subs	r3, #16
 8000e5e:	425a      	negs	r2, r3
 8000e60:	415a      	adcs	r2, r3
 8000e62:	4253      	negs	r3, r2
 8000e64:	059b      	lsls	r3, r3, #22
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_ADC_ConfigChannel+0x120>)
 8000e68:	4694      	mov	ip, r2
 8000e6a:	4463      	add	r3, ip
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <HAL_ADC_ConfigChannel+0x114>)
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e004      	b.n	8000e7e <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000e76:	2220      	movs	r2, #32
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000e7c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000e7e:	2334      	movs	r3, #52	; 0x34
 8000e80:	2200      	movs	r2, #0
 8000e82:	54e2      	strb	r2, [r4, r3]
}
 8000e84:	b003      	add	sp, #12
 8000e86:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e88:	2000      	movs	r0, #0
 8000e8a:	e7f8      	b.n	8000e7e <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	e7f9      	b.n	8000e84 <HAL_ADC_ConfigChannel+0x104>
 8000e90:	00001001 	.word	0x00001001
 8000e94:	40012708 	.word	0x40012708
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	000f4240 	.word	0x000f4240
 8000ea0:	ffbfffff 	.word	0xffbfffff

08000ea4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	db14      	blt.n	8000ed4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eaa:	0884      	lsrs	r4, r0, #2
 8000eac:	00a4      	lsls	r4, r4, #2
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_NVIC_SetPriority+0x5c>)
 8000eb0:	469c      	mov	ip, r3
 8000eb2:	4464      	add	r4, ip
 8000eb4:	26c0      	movs	r6, #192	; 0xc0
 8000eb6:	00b6      	lsls	r6, r6, #2
 8000eb8:	59a5      	ldr	r5, [r4, r6]
 8000eba:	2203      	movs	r2, #3
 8000ebc:	4010      	ands	r0, r2
 8000ebe:	00c0      	lsls	r0, r0, #3
 8000ec0:	23ff      	movs	r3, #255	; 0xff
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	4082      	lsls	r2, r0
 8000ec6:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec8:	0189      	lsls	r1, r1, #6
 8000eca:	400b      	ands	r3, r1
 8000ecc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ece:	432b      	orrs	r3, r5
 8000ed0:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ed2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	b2c0      	uxtb	r0, r0
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	4002      	ands	r2, r0
 8000eda:	3a08      	subs	r2, #8
 8000edc:	0892      	lsrs	r2, r2, #2
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_NVIC_SetPriority+0x60>)
 8000ee2:	18d3      	adds	r3, r2, r3
 8000ee4:	69dd      	ldr	r5, [r3, #28]
 8000ee6:	2403      	movs	r4, #3
 8000ee8:	4020      	ands	r0, r4
 8000eea:	00c0      	lsls	r0, r0, #3
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	0014      	movs	r4, r2
 8000ef0:	4084      	lsls	r4, r0
 8000ef2:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef4:	0189      	lsls	r1, r1, #6
 8000ef6:	4011      	ands	r1, r2
 8000ef8:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efa:	4329      	orrs	r1, r5
 8000efc:	61d9      	str	r1, [r3, #28]
 8000efe:	e7e8      	b.n	8000ed2 <HAL_NVIC_SetPriority+0x2e>
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	db05      	blt.n	8000f18 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0c:	231f      	movs	r3, #31
 8000f0e:	4018      	ands	r0, r3
 8000f10:	3b1e      	subs	r3, #30
 8000f12:	4083      	lsls	r3, r0
 8000f14:	4a01      	ldr	r2, [pc, #4]	; (8000f1c <HAL_NVIC_EnableIRQ+0x14>)
 8000f16:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f18:	4770      	bx	lr
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	1e43      	subs	r3, r0, #1
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f24:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d80e      	bhi.n	8000f48 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_SYSTICK_Config+0x30>)
 8000f2c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_SYSTICK_Config+0x34>)
 8000f30:	6a03      	ldr	r3, [r0, #32]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	21c0      	movs	r1, #192	; 0xc0
 8000f38:	0609      	lsls	r1, r1, #24
 8000f3a:	430b      	orrs	r3, r1
 8000f3c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3e:	2300      	movs	r3, #0
 8000f40:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	3307      	adds	r3, #7
 8000f44:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f46:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f48:	4770      	bx	lr
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	00ffffff 	.word	0x00ffffff
 8000f50:	e000e010 	.word	0xe000e010
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	46de      	mov	lr, fp
 8000f5c:	4657      	mov	r7, sl
 8000f5e:	464e      	mov	r6, r9
 8000f60:	4645      	mov	r5, r8
 8000f62:	b5e0      	push	{r5, r6, r7, lr}
 8000f64:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	680a      	ldr	r2, [r1, #0]
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d100      	bne.n	8000f6e <HAL_GPIO_Init+0x16>
 8000f6c:	e0e7      	b.n	800113e <HAL_GPIO_Init+0x1e6>
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f70:	2503      	movs	r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f72:	24c0      	movs	r4, #192	; 0xc0
 8000f74:	02a4      	lsls	r4, r4, #10
 8000f76:	46a0      	mov	r8, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f78:	4c74      	ldr	r4, [pc, #464]	; (800114c <HAL_GPIO_Init+0x1f4>)
 8000f7a:	1904      	adds	r4, r0, r4
 8000f7c:	4266      	negs	r6, r4
 8000f7e:	4166      	adcs	r6, r4
 8000f80:	4274      	negs	r4, r6
 8000f82:	9401      	str	r4, [sp, #4]
 8000f84:	e050      	b.n	8001028 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 8000f86:	6882      	ldr	r2, [r0, #8]
 8000f88:	005e      	lsls	r6, r3, #1
 8000f8a:	46b3      	mov	fp, r6
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f8c:	002e      	movs	r6, r5
 8000f8e:	465f      	mov	r7, fp
 8000f90:	40be      	lsls	r6, r7
 8000f92:	43b2      	bics	r2, r6
 8000f94:	4692      	mov	sl, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f96:	68ca      	ldr	r2, [r1, #12]
 8000f98:	40ba      	lsls	r2, r7
 8000f9a:	4656      	mov	r6, sl
 8000f9c:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8000f9e:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fa0:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa2:	464e      	mov	r6, r9
 8000fa4:	43b2      	bics	r2, r6
 8000fa6:	4691      	mov	r9, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	684a      	ldr	r2, [r1, #4]
 8000faa:	0912      	lsrs	r2, r2, #4
 8000fac:	2601      	movs	r6, #1
 8000fae:	4032      	ands	r2, r6
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	464e      	mov	r6, r9
 8000fb4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000fb6:	6042      	str	r2, [r0, #4]
 8000fb8:	e040      	b.n	800103c <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fba:	2600      	movs	r6, #0
 8000fbc:	46b1      	mov	r9, r6
 8000fbe:	464f      	mov	r7, r9
 8000fc0:	465e      	mov	r6, fp
 8000fc2:	40b7      	lsls	r7, r6
 8000fc4:	46b9      	mov	r9, r7
 8000fc6:	4657      	mov	r7, sl
 8000fc8:	464e      	mov	r6, r9
 8000fca:	4337      	orrs	r7, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fcc:	6097      	str	r7, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fce:	4a60      	ldr	r2, [pc, #384]	; (8001150 <HAL_GPIO_Init+0x1f8>)
 8000fd0:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8000fd2:	43e6      	mvns	r6, r4
 8000fd4:	46b1      	mov	r9, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd6:	684e      	ldr	r6, [r1, #4]
 8000fd8:	03f6      	lsls	r6, r6, #15
 8000fda:	d500      	bpl.n	8000fde <HAL_GPIO_Init+0x86>
 8000fdc:	e0a7      	b.n	800112e <HAL_GPIO_Init+0x1d6>
        temp &= ~(iocurrent);
 8000fde:	464e      	mov	r6, r9
 8000fe0:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000fe2:	4e5b      	ldr	r6, [pc, #364]	; (8001150 <HAL_GPIO_Init+0x1f8>)
 8000fe4:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 8000fe6:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe8:	684e      	ldr	r6, [r1, #4]
 8000fea:	03b6      	lsls	r6, r6, #14
 8000fec:	d500      	bpl.n	8000ff0 <HAL_GPIO_Init+0x98>
 8000fee:	e0a0      	b.n	8001132 <HAL_GPIO_Init+0x1da>
        temp &= ~(iocurrent);
 8000ff0:	464e      	mov	r6, r9
 8000ff2:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000ff4:	4e56      	ldr	r6, [pc, #344]	; (8001150 <HAL_GPIO_Init+0x1f8>)
 8000ff6:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff8:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffa:	684e      	ldr	r6, [r1, #4]
 8000ffc:	02f6      	lsls	r6, r6, #11
 8000ffe:	d500      	bpl.n	8001002 <HAL_GPIO_Init+0xaa>
 8001000:	e099      	b.n	8001136 <HAL_GPIO_Init+0x1de>
        temp &= ~(iocurrent);
 8001002:	464e      	mov	r6, r9
 8001004:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001006:	4e52      	ldr	r6, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x1f8>)
 8001008:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 800100a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800100c:	684e      	ldr	r6, [r1, #4]
 800100e:	02b6      	lsls	r6, r6, #10
 8001010:	d500      	bpl.n	8001014 <HAL_GPIO_Init+0xbc>
 8001012:	e092      	b.n	800113a <HAL_GPIO_Init+0x1e2>
        temp &= ~(iocurrent);
 8001014:	464c      	mov	r4, r9
 8001016:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001018:	4c4d      	ldr	r4, [pc, #308]	; (8001150 <HAL_GPIO_Init+0x1f8>)
 800101a:	60e2      	str	r2, [r4, #12]
      }
    }

    position++;
 800101c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	680a      	ldr	r2, [r1, #0]
 8001020:	0014      	movs	r4, r2
 8001022:	40dc      	lsrs	r4, r3
 8001024:	d100      	bne.n	8001028 <HAL_GPIO_Init+0xd0>
 8001026:	e08a      	b.n	800113e <HAL_GPIO_Init+0x1e6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	2401      	movs	r4, #1
 800102a:	409c      	lsls	r4, r3
 800102c:	46a1      	mov	r9, r4
 800102e:	4014      	ands	r4, r2
    if (iocurrent != 0x00u)
 8001030:	d0f4      	beq.n	800101c <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001032:	684a      	ldr	r2, [r1, #4]
 8001034:	402a      	ands	r2, r5
 8001036:	3a01      	subs	r2, #1
 8001038:	2a01      	cmp	r2, #1
 800103a:	d9a4      	bls.n	8000f86 <HAL_GPIO_Init+0x2e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	684a      	ldr	r2, [r1, #4]
 800103e:	402a      	ands	r2, r5
 8001040:	2a03      	cmp	r2, #3
 8001042:	d02a      	beq.n	800109a <HAL_GPIO_Init+0x142>
        temp = GPIOx->PUPDR;
 8001044:	68c2      	ldr	r2, [r0, #12]
 8001046:	005f      	lsls	r7, r3, #1
 8001048:	46ba      	mov	sl, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800104a:	002f      	movs	r7, r5
 800104c:	4656      	mov	r6, sl
 800104e:	40b7      	lsls	r7, r6
 8001050:	43ba      	bics	r2, r7
 8001052:	4691      	mov	r9, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001054:	688a      	ldr	r2, [r1, #8]
 8001056:	4656      	mov	r6, sl
 8001058:	40b2      	lsls	r2, r6
 800105a:	464e      	mov	r6, r9
 800105c:	4332      	orrs	r2, r6
        GPIOx->PUPDR = temp;
 800105e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	684a      	ldr	r2, [r1, #4]
 8001062:	402a      	ands	r2, r5
 8001064:	2a02      	cmp	r2, #2
 8001066:	d118      	bne.n	800109a <HAL_GPIO_Init+0x142>
        temp = GPIOx->AFR[position >> 3u];
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	1882      	adds	r2, r0, r2
 800106e:	6a16      	ldr	r6, [r2, #32]
 8001070:	46b2      	mov	sl, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001072:	2607      	movs	r6, #7
 8001074:	401e      	ands	r6, r3
 8001076:	00b6      	lsls	r6, r6, #2
 8001078:	46b1      	mov	r9, r6
 800107a:	260f      	movs	r6, #15
 800107c:	464f      	mov	r7, r9
 800107e:	40be      	lsls	r6, r7
 8001080:	46b3      	mov	fp, r6
 8001082:	4656      	mov	r6, sl
 8001084:	465f      	mov	r7, fp
 8001086:	43be      	bics	r6, r7
 8001088:	46b2      	mov	sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108a:	690e      	ldr	r6, [r1, #16]
 800108c:	464f      	mov	r7, r9
 800108e:	40be      	lsls	r6, r7
 8001090:	46b1      	mov	r9, r6
 8001092:	4656      	mov	r6, sl
 8001094:	464f      	mov	r7, r9
 8001096:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8001098:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800109a:	6806      	ldr	r6, [r0, #0]
 800109c:	005f      	lsls	r7, r3, #1
 800109e:	46ba      	mov	sl, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a0:	002f      	movs	r7, r5
 80010a2:	4652      	mov	r2, sl
 80010a4:	4097      	lsls	r7, r2
 80010a6:	0032      	movs	r2, r6
 80010a8:	43ba      	bics	r2, r7
 80010aa:	4691      	mov	r9, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ac:	684a      	ldr	r2, [r1, #4]
 80010ae:	402a      	ands	r2, r5
 80010b0:	4657      	mov	r7, sl
 80010b2:	40ba      	lsls	r2, r7
 80010b4:	464f      	mov	r7, r9
 80010b6:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80010b8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ba:	684a      	ldr	r2, [r1, #4]
 80010bc:	4647      	mov	r7, r8
 80010be:	423a      	tst	r2, r7
 80010c0:	d0ac      	beq.n	800101c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4e24      	ldr	r6, [pc, #144]	; (8001154 <HAL_GPIO_Init+0x1fc>)
 80010c4:	69b2      	ldr	r2, [r6, #24]
 80010c6:	2701      	movs	r7, #1
 80010c8:	433a      	orrs	r2, r7
 80010ca:	61b2      	str	r2, [r6, #24]
 80010cc:	69b2      	ldr	r2, [r6, #24]
 80010ce:	403a      	ands	r2, r7
 80010d0:	9203      	str	r2, [sp, #12]
 80010d2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80010d4:	089a      	lsrs	r2, r3, #2
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4e1f      	ldr	r6, [pc, #124]	; (8001158 <HAL_GPIO_Init+0x200>)
 80010da:	46b1      	mov	r9, r6
 80010dc:	444a      	add	r2, r9
 80010de:	6896      	ldr	r6, [r2, #8]
 80010e0:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e2:	002f      	movs	r7, r5
 80010e4:	401f      	ands	r7, r3
 80010e6:	00be      	lsls	r6, r7, #2
 80010e8:	46b3      	mov	fp, r6
 80010ea:	260f      	movs	r6, #15
 80010ec:	0037      	movs	r7, r6
 80010ee:	465e      	mov	r6, fp
 80010f0:	40b7      	lsls	r7, r6
 80010f2:	46ba      	mov	sl, r7
 80010f4:	464f      	mov	r7, r9
 80010f6:	4656      	mov	r6, sl
 80010f8:	43b7      	bics	r7, r6
 80010fa:	46ba      	mov	sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010fc:	2690      	movs	r6, #144	; 0x90
 80010fe:	05f6      	lsls	r6, r6, #23
 8001100:	42b0      	cmp	r0, r6
 8001102:	d100      	bne.n	8001106 <HAL_GPIO_Init+0x1ae>
 8001104:	e759      	b.n	8000fba <HAL_GPIO_Init+0x62>
 8001106:	4e15      	ldr	r6, [pc, #84]	; (800115c <HAL_GPIO_Init+0x204>)
 8001108:	42b0      	cmp	r0, r6
 800110a:	d00a      	beq.n	8001122 <HAL_GPIO_Init+0x1ca>
 800110c:	4e14      	ldr	r6, [pc, #80]	; (8001160 <HAL_GPIO_Init+0x208>)
 800110e:	42b0      	cmp	r0, r6
 8001110:	d00a      	beq.n	8001128 <HAL_GPIO_Init+0x1d0>
 8001112:	9e01      	ldr	r6, [sp, #4]
 8001114:	2701      	movs	r7, #1
 8001116:	43be      	bics	r6, r7
 8001118:	46b1      	mov	r9, r6
 800111a:	2605      	movs	r6, #5
 800111c:	46b4      	mov	ip, r6
 800111e:	44e1      	add	r9, ip
 8001120:	e74d      	b.n	8000fbe <HAL_GPIO_Init+0x66>
 8001122:	2601      	movs	r6, #1
 8001124:	46b1      	mov	r9, r6
 8001126:	e74a      	b.n	8000fbe <HAL_GPIO_Init+0x66>
 8001128:	2602      	movs	r6, #2
 800112a:	46b1      	mov	r9, r6
 800112c:	e747      	b.n	8000fbe <HAL_GPIO_Init+0x66>
          temp |= iocurrent;
 800112e:	4322      	orrs	r2, r4
 8001130:	e757      	b.n	8000fe2 <HAL_GPIO_Init+0x8a>
          temp |= iocurrent;
 8001132:	4322      	orrs	r2, r4
 8001134:	e75e      	b.n	8000ff4 <HAL_GPIO_Init+0x9c>
          temp |= iocurrent;
 8001136:	4322      	orrs	r2, r4
 8001138:	e765      	b.n	8001006 <HAL_GPIO_Init+0xae>
          temp |= iocurrent;
 800113a:	4322      	orrs	r2, r4
 800113c:	e76c      	b.n	8001018 <HAL_GPIO_Init+0xc0>
  } 
}
 800113e:	b005      	add	sp, #20
 8001140:	bc3c      	pop	{r2, r3, r4, r5}
 8001142:	4690      	mov	r8, r2
 8001144:	4699      	mov	r9, r3
 8001146:	46a2      	mov	sl, r4
 8001148:	46ab      	mov	fp, r5
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114c:	b7fff400 	.word	0xb7fff400
 8001150:	40010400 	.word	0x40010400
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800

08001164 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001164:	6900      	ldr	r0, [r0, #16]
 8001166:	4008      	ands	r0, r1
 8001168:	1e41      	subs	r1, r0, #1
 800116a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800116c:	b2c0      	uxtb	r0, r0
  }
 800116e:	4770      	bx	lr

08001170 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001170:	2a00      	cmp	r2, #0
 8001172:	d101      	bne.n	8001178 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001174:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001176:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001178:	6181      	str	r1, [r0, #24]
 800117a:	e7fc      	b.n	8001176 <HAL_GPIO_WritePin+0x6>

0800117c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800117c:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4218      	tst	r0, r3
 8001184:	d100      	bne.n	8001188 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001186:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800118a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800118c:	f7ff f952 	bl	8000434 <HAL_GPIO_EXTI_Callback>
}
 8001190:	e7f9      	b.n	8001186 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	46ce      	mov	lr, r9
 800119c:	4647      	mov	r7, r8
 800119e:	b580      	push	{r7, lr}
 80011a0:	b083      	sub	sp, #12
 80011a2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a4:	d100      	bne.n	80011a8 <HAL_RCC_OscConfig+0x10>
 80011a6:	e24c      	b.n	8001642 <HAL_RCC_OscConfig+0x4aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	6803      	ldr	r3, [r0, #0]
 80011aa:	07db      	lsls	r3, r3, #31
 80011ac:	d527      	bpl.n	80011fe <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011ae:	4bb7      	ldr	r3, [pc, #732]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	230c      	movs	r3, #12
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d018      	beq.n	80011ec <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ba:	4bb4      	ldr	r3, [pc, #720]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	230c      	movs	r3, #12
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d00e      	beq.n	80011e4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	6863      	ldr	r3, [r4, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d03e      	beq.n	800124a <HAL_RCC_OscConfig+0xb2>
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d155      	bne.n	800127c <HAL_RCC_OscConfig+0xe4>
 80011d0:	4bae      	ldr	r3, [pc, #696]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	49ae      	ldr	r1, [pc, #696]	; (8001490 <HAL_RCC_OscConfig+0x2f8>)
 80011d6:	400a      	ands	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	49ad      	ldr	r1, [pc, #692]	; (8001494 <HAL_RCC_OscConfig+0x2fc>)
 80011de:	400a      	ands	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e038      	b.n	8001256 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e4:	4ba9      	ldr	r3, [pc, #676]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	03db      	lsls	r3, r3, #15
 80011ea:	d5ec      	bpl.n	80011c6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	4ba7      	ldr	r3, [pc, #668]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	039b      	lsls	r3, r3, #14
 80011f2:	d504      	bpl.n	80011fe <HAL_RCC_OscConfig+0x66>
        return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	6863      	ldr	r3, [r4, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <HAL_RCC_OscConfig+0x66>
 80011fc:	e222      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	079b      	lsls	r3, r3, #30
 8001202:	d578      	bpl.n	80012f6 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001204:	4ba1      	ldr	r3, [pc, #644]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	220c      	movs	r2, #12
 800120a:	421a      	tst	r2, r3
 800120c:	d062      	beq.n	80012d4 <HAL_RCC_OscConfig+0x13c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800120e:	4b9f      	ldr	r3, [pc, #636]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	230c      	movs	r3, #12
 8001214:	4013      	ands	r3, r2
 8001216:	2b08      	cmp	r3, #8
 8001218:	d058      	beq.n	80012cc <HAL_RCC_OscConfig+0x134>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121a:	68e3      	ldr	r3, [r4, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d100      	bne.n	8001222 <HAL_RCC_OscConfig+0x8a>
 8001220:	e08c      	b.n	800133c <HAL_RCC_OscConfig+0x1a4>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001222:	4a9a      	ldr	r2, [pc, #616]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	430b      	orrs	r3, r1
 800122a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fb58 	bl	80008e0 <HAL_GetTick>
 8001230:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	4e96      	ldr	r6, [pc, #600]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001234:	2502      	movs	r5, #2
 8001236:	6833      	ldr	r3, [r6, #0]
 8001238:	421d      	tst	r5, r3
 800123a:	d176      	bne.n	800132a <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fb50 	bl	80008e0 <HAL_GetTick>
 8001240:	1bc0      	subs	r0, r0, r7
 8001242:	2802      	cmp	r0, #2
 8001244:	d9f7      	bls.n	8001236 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001246:	2003      	movs	r0, #3
 8001248:	e1fc      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124a:	4a90      	ldr	r2, [pc, #576]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 800124c:	6811      	ldr	r1, [r2, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	025b      	lsls	r3, r3, #9
 8001252:	430b      	orrs	r3, r1
 8001254:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d027      	beq.n	80012ac <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 800125c:	f7ff fb40 	bl	80008e0 <HAL_GetTick>
 8001260:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4e8a      	ldr	r6, [pc, #552]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001264:	2580      	movs	r5, #128	; 0x80
 8001266:	02ad      	lsls	r5, r5, #10
 8001268:	6833      	ldr	r3, [r6, #0]
 800126a:	422b      	tst	r3, r5
 800126c:	d1c7      	bne.n	80011fe <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126e:	f7ff fb37 	bl	80008e0 <HAL_GetTick>
 8001272:	1bc0      	subs	r0, r0, r7
 8001274:	2864      	cmp	r0, #100	; 0x64
 8001276:	d9f7      	bls.n	8001268 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001278:	2003      	movs	r0, #3
 800127a:	e1e3      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	2b05      	cmp	r3, #5
 800127e:	d009      	beq.n	8001294 <HAL_RCC_OscConfig+0xfc>
 8001280:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4982      	ldr	r1, [pc, #520]	; (8001490 <HAL_RCC_OscConfig+0x2f8>)
 8001286:	400a      	ands	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4981      	ldr	r1, [pc, #516]	; (8001494 <HAL_RCC_OscConfig+0x2fc>)
 800128e:	400a      	ands	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e7e0      	b.n	8001256 <HAL_RCC_OscConfig+0xbe>
 8001294:	4b7d      	ldr	r3, [pc, #500]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001296:	6819      	ldr	r1, [r3, #0]
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	02d2      	lsls	r2, r2, #11
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	6819      	ldr	r1, [r3, #0]
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0252      	lsls	r2, r2, #9
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e7d4      	b.n	8001256 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 80012ac:	f7ff fb18 	bl	80008e0 <HAL_GetTick>
 80012b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4e76      	ldr	r6, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80012b4:	2580      	movs	r5, #128	; 0x80
 80012b6:	02ad      	lsls	r5, r5, #10
 80012b8:	6833      	ldr	r3, [r6, #0]
 80012ba:	422b      	tst	r3, r5
 80012bc:	d09f      	beq.n	80011fe <HAL_RCC_OscConfig+0x66>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012be:	f7ff fb0f 	bl	80008e0 <HAL_GetTick>
 80012c2:	1bc0      	subs	r0, r0, r7
 80012c4:	2864      	cmp	r0, #100	; 0x64
 80012c6:	d9f7      	bls.n	80012b8 <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
 80012c8:	2003      	movs	r0, #3
 80012ca:	e1bb      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	03db      	lsls	r3, r3, #15
 80012d2:	d4a2      	bmi.n	800121a <HAL_RCC_OscConfig+0x82>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d4:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	079b      	lsls	r3, r3, #30
 80012da:	d504      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80012dc:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	68e3      	ldr	r3, [r4, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d000      	beq.n	80012e6 <HAL_RCC_OscConfig+0x14e>
 80012e4:	e1ae      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4969      	ldr	r1, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80012e8:	680a      	ldr	r2, [r1, #0]
 80012ea:	6923      	ldr	r3, [r4, #16]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	20f8      	movs	r0, #248	; 0xf8
 80012f0:	4382      	bics	r2, r0
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	071b      	lsls	r3, r3, #28
 80012fa:	d547      	bpl.n	800138c <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fc:	69e3      	ldr	r3, [r4, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d030      	beq.n	8001364 <HAL_RCC_OscConfig+0x1cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4a62      	ldr	r2, [pc, #392]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001304:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001306:	2101      	movs	r1, #1
 8001308:	430b      	orrs	r3, r1
 800130a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fae8 	bl	80008e0 <HAL_GetTick>
 8001310:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4e5e      	ldr	r6, [pc, #376]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001314:	2502      	movs	r5, #2
 8001316:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001318:	421d      	tst	r5, r3
 800131a:	d137      	bne.n	800138c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff fae0 	bl	80008e0 <HAL_GetTick>
 8001320:	1bc0      	subs	r0, r0, r7
 8001322:	2802      	cmp	r0, #2
 8001324:	d9f7      	bls.n	8001316 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8001326:	2003      	movs	r0, #3
 8001328:	e18c      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4958      	ldr	r1, [pc, #352]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 800132c:	680a      	ldr	r2, [r1, #0]
 800132e:	6923      	ldr	r3, [r4, #16]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	20f8      	movs	r0, #248	; 0xf8
 8001334:	4382      	bics	r2, r0
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
 800133a:	e7dc      	b.n	80012f6 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800133c:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 800133e:	6813      	ldr	r3, [r2, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	438b      	bics	r3, r1
 8001344:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001346:	f7ff facb 	bl	80008e0 <HAL_GetTick>
 800134a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134c:	4e4f      	ldr	r6, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 800134e:	2502      	movs	r5, #2
 8001350:	6833      	ldr	r3, [r6, #0]
 8001352:	421d      	tst	r5, r3
 8001354:	d0cf      	beq.n	80012f6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fac3 	bl	80008e0 <HAL_GetTick>
 800135a:	1bc0      	subs	r0, r0, r7
 800135c:	2802      	cmp	r0, #2
 800135e:	d9f7      	bls.n	8001350 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8001360:	2003      	movs	r0, #3
 8001362:	e16f      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001364:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001366:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001368:	2101      	movs	r1, #1
 800136a:	438b      	bics	r3, r1
 800136c:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fab7 	bl	80008e0 <HAL_GetTick>
 8001372:	0007      	movs	r7, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	4e45      	ldr	r6, [pc, #276]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001376:	2502      	movs	r5, #2
 8001378:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800137a:	421d      	tst	r5, r3
 800137c:	d006      	beq.n	800138c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff faaf 	bl	80008e0 <HAL_GetTick>
 8001382:	1bc0      	subs	r0, r0, r7
 8001384:	2802      	cmp	r0, #2
 8001386:	d9f7      	bls.n	8001378 <HAL_RCC_OscConfig+0x1e0>
        {
          return HAL_TIMEOUT;
 8001388:	2003      	movs	r0, #3
 800138a:	e15b      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	075b      	lsls	r3, r3, #29
 8001390:	d400      	bmi.n	8001394 <HAL_RCC_OscConfig+0x1fc>
 8001392:	e088      	b.n	80014a6 <HAL_RCC_OscConfig+0x30e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001396:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001398:	2200      	movs	r2, #0
 800139a:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	d40b      	bmi.n	80013b8 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	4a3a      	ldr	r2, [pc, #232]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80013a2:	69d1      	ldr	r1, [r2, #28]
 80013a4:	2080      	movs	r0, #128	; 0x80
 80013a6:	0540      	lsls	r0, r0, #21
 80013a8:	4301      	orrs	r1, r0
 80013aa:	61d1      	str	r1, [r2, #28]
 80013ac:	69d3      	ldr	r3, [r2, #28]
 80013ae:	4003      	ands	r3, r0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013b4:	2301      	movs	r3, #1
 80013b6:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b37      	ldr	r3, [pc, #220]	; (8001498 <HAL_RCC_OscConfig+0x300>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	d50e      	bpl.n	80013de <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	68a3      	ldr	r3, [r4, #8]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d021      	beq.n	800140a <HAL_RCC_OscConfig+0x272>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d138      	bne.n	800143c <HAL_RCC_OscConfig+0x2a4>
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 80013cc:	6a1a      	ldr	r2, [r3, #32]
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	6a1a      	ldr	r2, [r3, #32]
 80013d6:	3103      	adds	r1, #3
 80013d8:	438a      	bics	r2, r1
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	e01a      	b.n	8001414 <HAL_RCC_OscConfig+0x27c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013de:	4a2e      	ldr	r2, [pc, #184]	; (8001498 <HAL_RCC_OscConfig+0x300>)
 80013e0:	6811      	ldr	r1, [r2, #0]
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	430b      	orrs	r3, r1
 80013e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013ea:	f7ff fa79 	bl	80008e0 <HAL_GetTick>
 80013ee:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	4f29      	ldr	r7, [pc, #164]	; (8001498 <HAL_RCC_OscConfig+0x300>)
 80013f2:	2680      	movs	r6, #128	; 0x80
 80013f4:	0076      	lsls	r6, r6, #1
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	4233      	tst	r3, r6
 80013fa:	d1e1      	bne.n	80013c0 <HAL_RCC_OscConfig+0x228>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7ff fa70 	bl	80008e0 <HAL_GetTick>
 8001400:	1b40      	subs	r0, r0, r5
 8001402:	2864      	cmp	r0, #100	; 0x64
 8001404:	d9f7      	bls.n	80013f6 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8001406:	2003      	movs	r0, #3
 8001408:	e11c      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140a:	4a20      	ldr	r2, [pc, #128]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 800140c:	6a13      	ldr	r3, [r2, #32]
 800140e:	2101      	movs	r1, #1
 8001410:	430b      	orrs	r3, r1
 8001412:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d026      	beq.n	8001468 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fa61 	bl	80008e0 <HAL_GetTick>
 800141e:	4681      	mov	r9, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001420:	4f1a      	ldr	r7, [pc, #104]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001422:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	4d1d      	ldr	r5, [pc, #116]	; (800149c <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	421e      	tst	r6, r3
 800142a:	d139      	bne.n	80014a0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142c:	f7ff fa58 	bl	80008e0 <HAL_GetTick>
 8001430:	464b      	mov	r3, r9
 8001432:	1ac0      	subs	r0, r0, r3
 8001434:	42a8      	cmp	r0, r5
 8001436:	d9f6      	bls.n	8001426 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001438:	2003      	movs	r0, #3
 800143a:	e103      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143c:	2b05      	cmp	r3, #5
 800143e:	d009      	beq.n	8001454 <HAL_RCC_OscConfig+0x2bc>
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	2101      	movs	r1, #1
 8001446:	438a      	bics	r2, r1
 8001448:	621a      	str	r2, [r3, #32]
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	3103      	adds	r1, #3
 800144e:	438a      	bics	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
 8001452:	e7df      	b.n	8001414 <HAL_RCC_OscConfig+0x27c>
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	2104      	movs	r1, #4
 800145a:	430a      	orrs	r2, r1
 800145c:	621a      	str	r2, [r3, #32]
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	3903      	subs	r1, #3
 8001462:	430a      	orrs	r2, r1
 8001464:	621a      	str	r2, [r3, #32]
 8001466:	e7d5      	b.n	8001414 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fa3a 	bl	80008e0 <HAL_GetTick>
 800146c:	4681      	mov	r9, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	4f07      	ldr	r7, [pc, #28]	; (800148c <HAL_RCC_OscConfig+0x2f4>)
 8001470:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	4d0a      	ldr	r5, [pc, #40]	; (800149c <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	421e      	tst	r6, r3
 8001478:	d012      	beq.n	80014a0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fa31 	bl	80008e0 <HAL_GetTick>
 800147e:	464b      	mov	r3, r9
 8001480:	1ac0      	subs	r0, r0, r3
 8001482:	42a8      	cmp	r0, r5
 8001484:	d9f6      	bls.n	8001474 <HAL_RCC_OscConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8001486:	2003      	movs	r0, #3
 8001488:	e0dc      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	40021000 	.word	0x40021000
 8001490:	fffeffff 	.word	0xfffeffff
 8001494:	fffbffff 	.word	0xfffbffff
 8001498:	40007000 	.word	0x40007000
 800149c:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014a0:	4643      	mov	r3, r8
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d037      	beq.n	8001516 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	06db      	lsls	r3, r3, #27
 80014aa:	d510      	bpl.n	80014ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014ac:	6963      	ldr	r3, [r4, #20]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d037      	beq.n	8001522 <HAL_RCC_OscConfig+0x38a>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014b2:	3305      	adds	r3, #5
 80014b4:	d156      	bne.n	8001564 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014b6:	4a67      	ldr	r2, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 80014b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80014ba:	2104      	movs	r1, #4
 80014bc:	438b      	bics	r3, r1
 80014be:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80014c2:	69a3      	ldr	r3, [r4, #24]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	20f8      	movs	r0, #248	; 0xf8
 80014c8:	4381      	bics	r1, r0
 80014ca:	430b      	orrs	r3, r1
 80014cc:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ce:	6a23      	ldr	r3, [r4, #32]
        }
      }
    }
  }

  return HAL_OK;
 80014d0:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d100      	bne.n	80014d8 <HAL_RCC_OscConfig+0x340>
 80014d6:	e0b5      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d8:	4a5e      	ldr	r2, [pc, #376]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 80014da:	6851      	ldr	r1, [r2, #4]
 80014dc:	220c      	movs	r2, #12
 80014de:	400a      	ands	r2, r1
 80014e0:	2a08      	cmp	r2, #8
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0x34e>
 80014e4:	e093      	b.n	800160e <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d054      	beq.n	8001594 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_DISABLE();
 80014ea:	4a5a      	ldr	r2, [pc, #360]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 80014ec:	6813      	ldr	r3, [r2, #0]
 80014ee:	495a      	ldr	r1, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x4c0>)
 80014f0:	400b      	ands	r3, r1
 80014f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014f4:	f7ff f9f4 	bl	80008e0 <HAL_GetTick>
 80014f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	4d56      	ldr	r5, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 80014fc:	2480      	movs	r4, #128	; 0x80
 80014fe:	04a4      	lsls	r4, r4, #18
 8001500:	682b      	ldr	r3, [r5, #0]
 8001502:	4223      	tst	r3, r4
 8001504:	d100      	bne.n	8001508 <HAL_RCC_OscConfig+0x370>
 8001506:	e080      	b.n	800160a <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff f9ea 	bl	80008e0 <HAL_GetTick>
 800150c:	1b80      	subs	r0, r0, r6
 800150e:	2802      	cmp	r0, #2
 8001510:	d9f6      	bls.n	8001500 <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 8001512:	2003      	movs	r0, #3
 8001514:	e096      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001516:	4a4f      	ldr	r2, [pc, #316]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 8001518:	69d3      	ldr	r3, [r2, #28]
 800151a:	4950      	ldr	r1, [pc, #320]	; (800165c <HAL_RCC_OscConfig+0x4c4>)
 800151c:	400b      	ands	r3, r1
 800151e:	61d3      	str	r3, [r2, #28]
 8001520:	e7c1      	b.n	80014a6 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 8001524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001526:	2104      	movs	r1, #4
 8001528:	430a      	orrs	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800152c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152e:	3903      	subs	r1, #3
 8001530:	430a      	orrs	r2, r1
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001534:	f7ff f9d4 	bl	80008e0 <HAL_GetTick>
 8001538:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800153a:	4e46      	ldr	r6, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 800153c:	2502      	movs	r5, #2
 800153e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001540:	421d      	tst	r5, r3
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001544:	f7ff f9cc 	bl	80008e0 <HAL_GetTick>
 8001548:	1bc0      	subs	r0, r0, r7
 800154a:	2802      	cmp	r0, #2
 800154c:	d9f7      	bls.n	800153e <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 800154e:	2003      	movs	r0, #3
 8001550:	e078      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001552:	4940      	ldr	r1, [pc, #256]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 8001554:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	20f8      	movs	r0, #248	; 0xf8
 800155c:	4382      	bics	r2, r0
 800155e:	4313      	orrs	r3, r2
 8001560:	634b      	str	r3, [r1, #52]	; 0x34
 8001562:	e7b4      	b.n	80014ce <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001564:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 8001566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001568:	2104      	movs	r1, #4
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800156e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001570:	3903      	subs	r1, #3
 8001572:	438a      	bics	r2, r1
 8001574:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001576:	f7ff f9b3 	bl	80008e0 <HAL_GetTick>
 800157a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800157c:	4e35      	ldr	r6, [pc, #212]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 800157e:	2502      	movs	r5, #2
 8001580:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001582:	421d      	tst	r5, r3
 8001584:	d0a3      	beq.n	80014ce <HAL_RCC_OscConfig+0x336>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001586:	f7ff f9ab 	bl	80008e0 <HAL_GetTick>
 800158a:	1bc0      	subs	r0, r0, r7
 800158c:	2802      	cmp	r0, #2
 800158e:	d9f7      	bls.n	8001580 <HAL_RCC_OscConfig+0x3e8>
          return HAL_TIMEOUT;
 8001590:	2003      	movs	r0, #3
 8001592:	e057      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_DISABLE();
 8001594:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	492f      	ldr	r1, [pc, #188]	; (8001658 <HAL_RCC_OscConfig+0x4c0>)
 800159a:	400b      	ands	r3, r1
 800159c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800159e:	f7ff f99f 	bl	80008e0 <HAL_GetTick>
 80015a2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	4e2b      	ldr	r6, [pc, #172]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 80015a6:	2580      	movs	r5, #128	; 0x80
 80015a8:	04ad      	lsls	r5, r5, #18
 80015aa:	6833      	ldr	r3, [r6, #0]
 80015ac:	422b      	tst	r3, r5
 80015ae:	d006      	beq.n	80015be <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff f996 	bl	80008e0 <HAL_GetTick>
 80015b4:	1bc0      	subs	r0, r0, r7
 80015b6:	2802      	cmp	r0, #2
 80015b8:	d9f7      	bls.n	80015aa <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 80015ba:	2003      	movs	r0, #3
 80015bc:	e042      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 80015c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c2:	210f      	movs	r1, #15
 80015c4:	438a      	bics	r2, r1
 80015c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015c8:	430a      	orrs	r2, r1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80015cc:	6859      	ldr	r1, [r3, #4]
 80015ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80015d2:	4302      	orrs	r2, r0
 80015d4:	4822      	ldr	r0, [pc, #136]	; (8001660 <HAL_RCC_OscConfig+0x4c8>)
 80015d6:	4001      	ands	r1, r0
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	0452      	lsls	r2, r2, #17
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015e6:	f7ff f97b 	bl	80008e0 <HAL_GetTick>
 80015ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ec:	4d19      	ldr	r5, [pc, #100]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 80015ee:	2480      	movs	r4, #128	; 0x80
 80015f0:	04a4      	lsls	r4, r4, #18
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	4223      	tst	r3, r4
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f972 	bl	80008e0 <HAL_GetTick>
 80015fc:	1b80      	subs	r0, r0, r6
 80015fe:	2802      	cmp	r0, #2
 8001600:	d9f7      	bls.n	80015f2 <HAL_RCC_OscConfig+0x45a>
            return HAL_TIMEOUT;
 8001602:	2003      	movs	r0, #3
 8001604:	e01e      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
  return HAL_OK;
 8001606:	2000      	movs	r0, #0
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
 800160a:	2000      	movs	r0, #0
 800160c:	e01a      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160e:	2b01      	cmp	r3, #1
 8001610:	d01d      	beq.n	800164e <HAL_RCC_OscConfig+0x4b6>
        pll_config  = RCC->CFGR;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x4bc>)
 8001614:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001616:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	4013      	ands	r3, r2
          return HAL_ERROR;
 800161e:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001620:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001622:	42ab      	cmp	r3, r5
 8001624:	d10e      	bne.n	8001644 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001626:	230f      	movs	r3, #15
 8001628:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800162c:	428b      	cmp	r3, r1
 800162e:	d109      	bne.n	8001644 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001630:	20f0      	movs	r0, #240	; 0xf0
 8001632:	0380      	lsls	r0, r0, #14
 8001634:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001636:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001638:	1a10      	subs	r0, r2, r0
 800163a:	1e42      	subs	r2, r0, #1
 800163c:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 800163e:	b2c0      	uxtb	r0, r0
 8001640:	e000      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
 8001642:	2001      	movs	r0, #1
}
 8001644:	b003      	add	sp, #12
 8001646:	bc0c      	pop	{r2, r3}
 8001648:	4690      	mov	r8, r2
 800164a:	4699      	mov	r9, r3
 800164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e7f8      	b.n	8001644 <HAL_RCC_OscConfig+0x4ac>
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40021000 	.word	0x40021000
 8001658:	feffffff 	.word	0xfeffffff
 800165c:	efffffff 	.word	0xefffffff
 8001660:	ffc2ffff 	.word	0xffc2ffff

08001664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001664:	b530      	push	{r4, r5, lr}
 8001666:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001668:	aa04      	add	r2, sp, #16
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x64>)
 800166c:	0018      	movs	r0, r3
 800166e:	c832      	ldmia	r0!, {r1, r4, r5}
 8001670:	c232      	stmia	r2!, {r1, r4, r5}
 8001672:	0011      	movs	r1, r2
 8001674:	6802      	ldr	r2, [r0, #0]
 8001676:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001678:	466a      	mov	r2, sp
 800167a:	3310      	adds	r3, #16
 800167c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800167e:	c213      	stmia	r2!, {r0, r1, r4}
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_GetSysClockFreq+0x68>)
 8001686:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001688:	230c      	movs	r3, #12
 800168a:	4013      	ands	r3, r2
 800168c:	2b08      	cmp	r3, #8
 800168e:	d119      	bne.n	80016c4 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001690:	0c91      	lsrs	r1, r2, #18
 8001692:	3307      	adds	r3, #7
 8001694:	4019      	ands	r1, r3
 8001696:	a804      	add	r0, sp, #16
 8001698:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800169a:	490c      	ldr	r1, [pc, #48]	; (80016cc <HAL_RCC_GetSysClockFreq+0x68>)
 800169c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800169e:	400b      	ands	r3, r1
 80016a0:	4669      	mov	r1, sp
 80016a2:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016a4:	03d3      	lsls	r3, r2, #15
 80016a6:	d408      	bmi.n	80016ba <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016a8:	0163      	lsls	r3, r4, #5
 80016aa:	1b1b      	subs	r3, r3, r4
 80016ac:	0198      	lsls	r0, r3, #6
 80016ae:	1ac0      	subs	r0, r0, r3
 80016b0:	00c0      	lsls	r0, r0, #3
 80016b2:	1900      	adds	r0, r0, r4
 80016b4:	0200      	lsls	r0, r0, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80016b6:	b009      	add	sp, #36	; 0x24
 80016b8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80016bc:	f7fe fd2c 	bl	8000118 <__udivsi3>
 80016c0:	4360      	muls	r0, r4
 80016c2:	e7f8      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80016c6:	e7f6      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x52>
 80016c8:	080026ac 	.word	0x080026ac
 80016cc:	40021000 	.word	0x40021000
 80016d0:	007a1200 	.word	0x007a1200

080016d4 <HAL_RCC_ClockConfig>:
{
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	46ce      	mov	lr, r9
 80016d8:	4647      	mov	r7, r8
 80016da:	b580      	push	{r7, lr}
 80016dc:	0004      	movs	r4, r0
 80016de:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d100      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x12>
 80016e4:	e081      	b.n	80017ea <HAL_RCC_ClockConfig+0x116>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_ClockConfig+0x120>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	4013      	ands	r3, r2
 80016ee:	428b      	cmp	r3, r1
 80016f0:	d20a      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4940      	ldr	r1, [pc, #256]	; (80017f4 <HAL_RCC_ClockConfig+0x120>)
 80016f4:	680b      	ldr	r3, [r1, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4393      	bics	r3, r2
 80016fa:	432b      	orrs	r3, r5
 80016fc:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	680b      	ldr	r3, [r1, #0]
 8001700:	401a      	ands	r2, r3
      return HAL_ERROR;
 8001702:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001704:	42aa      	cmp	r2, r5
 8001706:	d171      	bne.n	80017ec <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	079a      	lsls	r2, r3, #30
 800170c:	d50e      	bpl.n	800172c <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170e:	075b      	lsls	r3, r3, #29
 8001710:	d505      	bpl.n	800171e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001712:	4a39      	ldr	r2, [pc, #228]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 8001714:	6851      	ldr	r1, [r2, #4]
 8001716:	23e0      	movs	r3, #224	; 0xe0
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	430b      	orrs	r3, r1
 800171c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171e:	4a36      	ldr	r2, [pc, #216]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 8001720:	6853      	ldr	r3, [r2, #4]
 8001722:	21f0      	movs	r1, #240	; 0xf0
 8001724:	438b      	bics	r3, r1
 8001726:	68a1      	ldr	r1, [r4, #8]
 8001728:	430b      	orrs	r3, r1
 800172a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	07db      	lsls	r3, r3, #31
 8001730:	d530      	bpl.n	8001794 <HAL_RCC_ClockConfig+0xc0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	6862      	ldr	r2, [r4, #4]
 8001734:	2a01      	cmp	r2, #1
 8001736:	d021      	beq.n	800177c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001738:	2a02      	cmp	r2, #2
 800173a:	d025      	beq.n	8001788 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 800173e:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	079b      	lsls	r3, r3, #30
 8001744:	d552      	bpl.n	80017ec <HAL_RCC_ClockConfig+0x118>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	492c      	ldr	r1, [pc, #176]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 8001748:	684b      	ldr	r3, [r1, #4]
 800174a:	2003      	movs	r0, #3
 800174c:	4383      	bics	r3, r0
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001752:	f7ff f8c5 	bl	80008e0 <HAL_GetTick>
 8001756:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001758:	4f27      	ldr	r7, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 800175a:	260c      	movs	r6, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_RCC_ClockConfig+0x128>)
 800175e:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4032      	ands	r2, r6
 8001764:	6863      	ldr	r3, [r4, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d013      	beq.n	8001794 <HAL_RCC_ClockConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff f8b8 	bl	80008e0 <HAL_GetTick>
 8001770:	464b      	mov	r3, r9
 8001772:	1ac0      	subs	r0, r0, r3
 8001774:	4540      	cmp	r0, r8
 8001776:	d9f3      	bls.n	8001760 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8001778:	2003      	movs	r0, #3
 800177a:	e037      	b.n	80017ec <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 800177e:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8001780:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	039b      	lsls	r3, r3, #14
 8001784:	d4df      	bmi.n	8001746 <HAL_RCC_ClockConfig+0x72>
 8001786:	e031      	b.n	80017ec <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 800178a:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	019b      	lsls	r3, r3, #6
 8001790:	d4d9      	bmi.n	8001746 <HAL_RCC_ClockConfig+0x72>
 8001792:	e02b      	b.n	80017ec <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_RCC_ClockConfig+0x120>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	4013      	ands	r3, r2
 800179c:	42ab      	cmp	r3, r5
 800179e:	d90a      	bls.n	80017b6 <HAL_RCC_ClockConfig+0xe2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a0:	4914      	ldr	r1, [pc, #80]	; (80017f4 <HAL_RCC_ClockConfig+0x120>)
 80017a2:	680b      	ldr	r3, [r1, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4393      	bics	r3, r2
 80017a8:	432b      	orrs	r3, r5
 80017aa:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ac:	680b      	ldr	r3, [r1, #0]
 80017ae:	401a      	ands	r2, r3
      return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	42aa      	cmp	r2, r5
 80017b4:	d11a      	bne.n	80017ec <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	075b      	lsls	r3, r3, #29
 80017ba:	d506      	bpl.n	80017ca <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 80017be:	6853      	ldr	r3, [r2, #4]
 80017c0:	490f      	ldr	r1, [pc, #60]	; (8001800 <HAL_RCC_ClockConfig+0x12c>)
 80017c2:	400b      	ands	r3, r1
 80017c4:	68e1      	ldr	r1, [r4, #12]
 80017c6:	430b      	orrs	r3, r1
 80017c8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017ca:	f7ff ff4b 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x124>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	0f1b      	lsrs	r3, r3, #28
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x130>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	40d8      	lsrs	r0, r3
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x134>)
 80017de:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff f83b 	bl	800085c <HAL_InitTick>
  return HAL_OK;
 80017e6:	2000      	movs	r0, #0
 80017e8:	e000      	b.n	80017ec <HAL_RCC_ClockConfig+0x118>
    return HAL_ERROR;
 80017ea:	2001      	movs	r0, #1
}
 80017ec:	bc0c      	pop	{r2, r3}
 80017ee:	4690      	mov	r8, r2
 80017f0:	4699      	mov	r9, r3
 80017f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017f4:	40022000 	.word	0x40022000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	00001388 	.word	0x00001388
 8001800:	fffff8ff 	.word	0xfffff8ff
 8001804:	080026fc 	.word	0x080026fc
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_RCC_GetPCLK1Freq+0x14>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	055b      	lsls	r3, r3, #21
 8001812:	0f5b      	lsrs	r3, r3, #29
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800181a:	6810      	ldr	r0, [r2, #0]
 800181c:	40d8      	lsrs	r0, r3
}    
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	0800270c 	.word	0x0800270c
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	46ce      	mov	lr, r9
 8001830:	4647      	mov	r7, r8
 8001832:	b580      	push	{r7, lr}
 8001834:	b083      	sub	sp, #12
 8001836:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001838:	6803      	ldr	r3, [r0, #0]
 800183a:	03db      	lsls	r3, r3, #15
 800183c:	d536      	bpl.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001840:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	d40a      	bmi.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	4a3c      	ldr	r2, [pc, #240]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800184a:	69d1      	ldr	r1, [r2, #28]
 800184c:	2080      	movs	r0, #128	; 0x80
 800184e:	0540      	lsls	r0, r0, #21
 8001850:	4301      	orrs	r1, r0
 8001852:	61d1      	str	r1, [r2, #28]
 8001854:	69d3      	ldr	r3, [r2, #28]
 8001856:	4003      	ands	r3, r0
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800185c:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b38      	ldr	r3, [pc, #224]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	05db      	lsls	r3, r3, #23
 8001864:	d53c      	bpl.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001866:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	22c0      	movs	r2, #192	; 0xc0
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001870:	d013      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001872:	6861      	ldr	r1, [r4, #4]
 8001874:	400a      	ands	r2, r1
 8001876:	429a      	cmp	r2, r3
 8001878:	d00f      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800187c:	6a18      	ldr	r0, [r3, #32]
 800187e:	4a31      	ldr	r2, [pc, #196]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001880:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001882:	6a1e      	ldr	r6, [r3, #32]
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0249      	lsls	r1, r1, #9
 8001888:	4331      	orrs	r1, r6
 800188a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800188c:	6a19      	ldr	r1, [r3, #32]
 800188e:	4e2e      	ldr	r6, [pc, #184]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001890:	4031      	ands	r1, r6
 8001892:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001894:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001896:	07c3      	lsls	r3, r0, #31
 8001898:	d439      	bmi.n	800190e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800189c:	6a13      	ldr	r3, [r2, #32]
 800189e:	4929      	ldr	r1, [pc, #164]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80018a0:	400b      	ands	r3, r1
 80018a2:	6861      	ldr	r1, [r4, #4]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018a8:	2d01      	cmp	r5, #1
 80018aa:	d042      	beq.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	07db      	lsls	r3, r3, #31
 80018b0:	d506      	bpl.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80018b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018b6:	2103      	movs	r1, #3
 80018b8:	438b      	bics	r3, r1
 80018ba:	68a1      	ldr	r1, [r4, #8]
 80018bc:	430b      	orrs	r3, r1
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018c0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	069b      	lsls	r3, r3, #26
 80018c6:	d506      	bpl.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80018ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018cc:	2110      	movs	r1, #16
 80018ce:	438b      	bics	r3, r1
 80018d0:	68e1      	ldr	r1, [r4, #12]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80018d6:	b003      	add	sp, #12
 80018d8:	bc0c      	pop	{r2, r3}
 80018da:	4690      	mov	r8, r2
 80018dc:	4699      	mov	r9, r3
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80018e2:	6811      	ldr	r1, [r2, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80018ec:	f7fe fff8 	bl	80008e0 <HAL_GetTick>
 80018f0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4f13      	ldr	r7, [pc, #76]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80018f4:	2680      	movs	r6, #128	; 0x80
 80018f6:	0076      	lsls	r6, r6, #1
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4233      	tst	r3, r6
 80018fc:	d1b3      	bne.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7fe ffef 	bl	80008e0 <HAL_GetTick>
 8001902:	4643      	mov	r3, r8
 8001904:	1ac0      	subs	r0, r0, r3
 8001906:	2864      	cmp	r0, #100	; 0x64
 8001908:	d9f6      	bls.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 800190a:	2003      	movs	r0, #3
 800190c:	e7e3      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 800190e:	f7fe ffe7 	bl	80008e0 <HAL_GetTick>
 8001912:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	4f09      	ldr	r7, [pc, #36]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001916:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 800191a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	421e      	tst	r6, r3
 8001920:	d1bb      	bne.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7fe ffdd 	bl	80008e0 <HAL_GetTick>
 8001926:	464b      	mov	r3, r9
 8001928:	1ac0      	subs	r0, r0, r3
 800192a:	4540      	cmp	r0, r8
 800192c:	d9f6      	bls.n	800191c <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
 800192e:	2003      	movs	r0, #3
 8001930:	e7d1      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	69d3      	ldr	r3, [r2, #28]
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001936:	400b      	ands	r3, r1
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	e7b7      	b.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x80>
 800193c:	40021000 	.word	0x40021000
 8001940:	40007000 	.word	0x40007000
 8001944:	fffffcff 	.word	0xfffffcff
 8001948:	fffeffff 	.word	0xfffeffff
 800194c:	00001388 	.word	0x00001388
 8001950:	efffffff 	.word	0xefffffff

08001954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	0004      	movs	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001958:	6801      	ldr	r1, [r0, #0]
 800195a:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800195c:	6883      	ldr	r3, [r0, #8]
 800195e:	6900      	ldr	r0, [r0, #16]
 8001960:	4303      	orrs	r3, r0
 8001962:	6960      	ldr	r0, [r4, #20]
 8001964:	4303      	orrs	r3, r0
 8001966:	69e0      	ldr	r0, [r4, #28]
 8001968:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800196a:	483e      	ldr	r0, [pc, #248]	; (8001a64 <UART_SetConfig+0x110>)
 800196c:	4002      	ands	r2, r0
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	6853      	ldr	r3, [r2, #4]
 8001976:	493c      	ldr	r1, [pc, #240]	; (8001a68 <UART_SetConfig+0x114>)
 8001978:	400b      	ands	r3, r1
 800197a:	68e1      	ldr	r1, [r4, #12]
 800197c:	430b      	orrs	r3, r1
 800197e:	6053      	str	r3, [r2, #4]
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001980:	6821      	ldr	r1, [r4, #0]
 8001982:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001984:	69a3      	ldr	r3, [r4, #24]
 8001986:	6a20      	ldr	r0, [r4, #32]
 8001988:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800198a:	4838      	ldr	r0, [pc, #224]	; (8001a6c <UART_SetConfig+0x118>)
 800198c:	4002      	ands	r2, r0
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <UART_SetConfig+0x11c>)
 8001994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001996:	2303      	movs	r3, #3
 8001998:	4013      	ands	r3, r2
 800199a:	2b01      	cmp	r3, #1
 800199c:	d01b      	beq.n	80019d6 <UART_SetConfig+0x82>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <UART_SetConfig+0x5a>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d037      	beq.n	8001a16 <UART_SetConfig+0xc2>
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d00e      	beq.n	80019c8 <UART_SetConfig+0x74>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 80019aa:	2201      	movs	r2, #1
 80019ac:	e02e      	b.n	8001a0c <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	69e2      	ldr	r2, [r4, #28]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d052      	beq.n	8001a5e <UART_SetConfig+0x10a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80019b8:	f7ff ff28 	bl	800180c <HAL_RCC_GetPCLK1Freq>
        break;
 80019bc:	e012      	b.n	80019e4 <UART_SetConfig+0x90>
        pclk = (uint32_t) HSI_VALUE;
 80019be:	482d      	ldr	r0, [pc, #180]	; (8001a74 <UART_SetConfig+0x120>)
 80019c0:	e035      	b.n	8001a2e <UART_SetConfig+0xda>
        pclk = (uint32_t) LSE_VALUE;
 80019c2:	2080      	movs	r0, #128	; 0x80
 80019c4:	0200      	lsls	r0, r0, #8
 80019c6:	e032      	b.n	8001a2e <UART_SetConfig+0xda>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	69e2      	ldr	r2, [r4, #28]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d0f5      	beq.n	80019be <UART_SetConfig+0x6a>
        pclk = (uint32_t) HSI_VALUE;
 80019d2:	4828      	ldr	r0, [pc, #160]	; (8001a74 <UART_SetConfig+0x120>)
 80019d4:	e009      	b.n	80019ea <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	69e2      	ldr	r2, [r4, #28]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d021      	beq.n	8001a24 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 80019e0:	f7ff fe40 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 80019e4:	2200      	movs	r2, #0
        break;
    }

    if (pclk != 0U)
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d010      	beq.n	8001a0c <UART_SetConfig+0xb8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	1818      	adds	r0, r3, r0
 80019f0:	6861      	ldr	r1, [r4, #4]
 80019f2:	f7fe fb91 	bl	8000118 <__udivsi3>
 80019f6:	0403      	lsls	r3, r0, #16
 80019f8:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019fa:	0018      	movs	r0, r3
 80019fc:	3810      	subs	r0, #16
 80019fe:	491e      	ldr	r1, [pc, #120]	; (8001a78 <UART_SetConfig+0x124>)
      {
        huart->Instance->BRR = usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 8001a00:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a02:	4288      	cmp	r0, r1
 8001a04:	d802      	bhi.n	8001a0c <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	60d3      	str	r3, [r2, #12]
 8001a0a:	2200      	movs	r2, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8001a10:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8001a12:	0010      	movs	r0, r2
 8001a14:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	69e2      	ldr	r2, [r4, #28]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d0d0      	beq.n	80019c2 <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 8001a20:	0018      	movs	r0, r3
 8001a22:	e7e2      	b.n	80019ea <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a24:	f7ff fe1e 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001a28:	2200      	movs	r2, #0
    if (pclk != 0U)
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d0ee      	beq.n	8001a0c <UART_SetConfig+0xb8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a2e:	0040      	lsls	r0, r0, #1
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	18c0      	adds	r0, r0, r3
 8001a36:	6861      	ldr	r1, [r4, #4]
 8001a38:	f7fe fb6e 	bl	8000118 <__udivsi3>
 8001a3c:	0403      	lsls	r3, r0, #16
 8001a3e:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a40:	001d      	movs	r5, r3
 8001a42:	3d10      	subs	r5, #16
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <UART_SetConfig+0x124>)
        ret = HAL_ERROR;
 8001a46:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a48:	428d      	cmp	r5, r1
 8001a4a:	d8df      	bhi.n	8001a0c <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <UART_SetConfig+0x128>)
 8001a4e:	4010      	ands	r0, r2
        huart->Instance->BRR = brrtemp;
 8001a50:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a52:	071b      	lsls	r3, r3, #28
 8001a54:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8001a56:	4303      	orrs	r3, r0
 8001a58:	60d3      	str	r3, [r2, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	e7d6      	b.n	8001a0c <UART_SetConfig+0xb8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a5e:	f7ff fed5 	bl	800180c <HAL_RCC_GetPCLK1Freq>
        break;
 8001a62:	e7e1      	b.n	8001a28 <UART_SetConfig+0xd4>
 8001a64:	ffff69f3 	.word	0xffff69f3
 8001a68:	ffffcfff 	.word	0xffffcfff
 8001a6c:	fffff4ff 	.word	0xfffff4ff
 8001a70:	40021000 	.word	0x40021000
 8001a74:	007a1200 	.word	0x007a1200
 8001a78:	0000ffef 	.word	0x0000ffef
 8001a7c:	0000fff0 	.word	0x0000fff0

08001a80 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a82:	07db      	lsls	r3, r3, #31
 8001a84:	d506      	bpl.n	8001a94 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a86:	6802      	ldr	r2, [r0, #0]
 8001a88:	6853      	ldr	r3, [r2, #4]
 8001a8a:	492c      	ldr	r1, [pc, #176]	; (8001b3c <UART_AdvFeatureConfig+0xbc>)
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a96:	079b      	lsls	r3, r3, #30
 8001a98:	d506      	bpl.n	8001aa8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	6853      	ldr	r3, [r2, #4]
 8001a9e:	4928      	ldr	r1, [pc, #160]	; (8001b40 <UART_AdvFeatureConfig+0xc0>)
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001aa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001aaa:	075b      	lsls	r3, r3, #29
 8001aac:	d506      	bpl.n	8001abc <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001aae:	6802      	ldr	r2, [r0, #0]
 8001ab0:	6853      	ldr	r3, [r2, #4]
 8001ab2:	4924      	ldr	r1, [pc, #144]	; (8001b44 <UART_AdvFeatureConfig+0xc4>)
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001abe:	071b      	lsls	r3, r3, #28
 8001ac0:	d506      	bpl.n	8001ad0 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ac2:	6802      	ldr	r2, [r0, #0]
 8001ac4:	6853      	ldr	r3, [r2, #4]
 8001ac6:	4920      	ldr	r1, [pc, #128]	; (8001b48 <UART_AdvFeatureConfig+0xc8>)
 8001ac8:	400b      	ands	r3, r1
 8001aca:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ad2:	06db      	lsls	r3, r3, #27
 8001ad4:	d506      	bpl.n	8001ae4 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ad6:	6802      	ldr	r2, [r0, #0]
 8001ad8:	6893      	ldr	r3, [r2, #8]
 8001ada:	491c      	ldr	r1, [pc, #112]	; (8001b4c <UART_AdvFeatureConfig+0xcc>)
 8001adc:	400b      	ands	r3, r1
 8001ade:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ae6:	069b      	lsls	r3, r3, #26
 8001ae8:	d506      	bpl.n	8001af8 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001aea:	6802      	ldr	r2, [r0, #0]
 8001aec:	6893      	ldr	r3, [r2, #8]
 8001aee:	4918      	ldr	r1, [pc, #96]	; (8001b50 <UART_AdvFeatureConfig+0xd0>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001af8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001afa:	065b      	lsls	r3, r3, #25
 8001afc:	d50b      	bpl.n	8001b16 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001afe:	6802      	ldr	r2, [r0, #0]
 8001b00:	6853      	ldr	r3, [r2, #4]
 8001b02:	4914      	ldr	r1, [pc, #80]	; (8001b54 <UART_AdvFeatureConfig+0xd4>)
 8001b04:	400b      	ands	r3, r1
 8001b06:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	035b      	lsls	r3, r3, #13
 8001b10:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d00a      	beq.n	8001b2c <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b16:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	d506      	bpl.n	8001b2a <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b1c:	6802      	ldr	r2, [r0, #0]
 8001b1e:	6853      	ldr	r3, [r2, #4]
 8001b20:	490d      	ldr	r1, [pc, #52]	; (8001b58 <UART_AdvFeatureConfig+0xd8>)
 8001b22:	400b      	ands	r3, r1
 8001b24:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6053      	str	r3, [r2, #4]
  }
}
 8001b2a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b2c:	6802      	ldr	r2, [r0, #0]
 8001b2e:	6853      	ldr	r3, [r2, #4]
 8001b30:	490a      	ldr	r1, [pc, #40]	; (8001b5c <UART_AdvFeatureConfig+0xdc>)
 8001b32:	400b      	ands	r3, r1
 8001b34:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001b36:	430b      	orrs	r3, r1
 8001b38:	6053      	str	r3, [r2, #4]
 8001b3a:	e7ec      	b.n	8001b16 <UART_AdvFeatureConfig+0x96>
 8001b3c:	fffdffff 	.word	0xfffdffff
 8001b40:	fffeffff 	.word	0xfffeffff
 8001b44:	fffbffff 	.word	0xfffbffff
 8001b48:	ffff7fff 	.word	0xffff7fff
 8001b4c:	ffffefff 	.word	0xffffefff
 8001b50:	ffffdfff 	.word	0xffffdfff
 8001b54:	ffefffff 	.word	0xffefffff
 8001b58:	fff7ffff 	.word	0xfff7ffff
 8001b5c:	ff9fffff 	.word	0xff9fffff

08001b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	46d6      	mov	lr, sl
 8001b64:	464f      	mov	r7, r9
 8001b66:	4646      	mov	r6, r8
 8001b68:	b5c0      	push	{r6, r7, lr}
 8001b6a:	0007      	movs	r7, r0
 8001b6c:	000c      	movs	r4, r1
 8001b6e:	0016      	movs	r6, r2
 8001b70:	4698      	mov	r8, r3
 8001b72:	9d08      	ldr	r5, [sp, #32]
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b74:	2304      	movs	r3, #4
 8001b76:	4699      	mov	r9, r3
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	69d3      	ldr	r3, [r2, #28]
 8001b82:	4023      	ands	r3, r4
 8001b84:	1b1b      	subs	r3, r3, r4
 8001b86:	4259      	negs	r1, r3
 8001b88:	414b      	adcs	r3, r1
 8001b8a:	42b3      	cmp	r3, r6
 8001b8c:	d153      	bne.n	8001c36 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8001b8e:	1c6b      	adds	r3, r5, #1
 8001b90:	d0f6      	beq.n	8001b80 <UART_WaitOnFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7fe fea5 	bl	80008e0 <HAL_GetTick>
 8001b96:	4643      	mov	r3, r8
 8001b98:	1ac0      	subs	r0, r0, r3
 8001b9a:	42a8      	cmp	r0, r5
 8001b9c:	d82d      	bhi.n	8001bfa <UART_WaitOnFlagUntilTimeout+0x9a>
 8001b9e:	2d00      	cmp	r5, #0
 8001ba0:	d02b      	beq.n	8001bfa <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	4211      	tst	r1, r2
 8001baa:	d0e8      	beq.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x1e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001bac:	69da      	ldr	r2, [r3, #28]
 8001bae:	4651      	mov	r1, sl
 8001bb0:	420a      	tst	r2, r1
 8001bb2:	d0e4      	beq.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x1e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bba:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f382 8810 	msr	PRIMASK, r2

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	680b      	ldr	r3, [r1, #0]
 8001bc8:	4c1e      	ldr	r4, [pc, #120]	; (8001c44 <UART_WaitOnFlagUntilTimeout+0xe4>)
 8001bca:	4023      	ands	r3, r4
 8001bcc:	600b      	str	r3, [r1, #0]
 8001bce:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	688b      	ldr	r3, [r1, #8]
 8001bde:	4393      	bics	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
 8001be2:	f380 8810 	msr	PRIMASK, r0

          huart->gState = HAL_UART_STATE_READY;
 8001be6:	2320      	movs	r3, #32
 8001be8:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001bea:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bec:	327f      	adds	r2, #127	; 0x7f
 8001bee:	50bb      	str	r3, [r7, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bf0:	3354      	adds	r3, #84	; 0x54
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	54fa      	strb	r2, [r7, r3]

          return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	e01e      	b.n	8001c38 <UART_WaitOnFlagUntilTimeout+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bfa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	680b      	ldr	r3, [r1, #0]
 8001c08:	4c0e      	ldr	r4, [pc, #56]	; (8001c44 <UART_WaitOnFlagUntilTimeout+0xe4>)
 8001c0a:	4023      	ands	r3, r4
 8001c0c:	600b      	str	r3, [r1, #0]
 8001c0e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c12:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c16:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	688b      	ldr	r3, [r1, #8]
 8001c1e:	4393      	bics	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
 8001c22:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8001c26:	2320      	movs	r3, #32
 8001c28:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001c2c:	3354      	adds	r3, #84	; 0x54
 8001c2e:	2200      	movs	r2, #0
 8001c30:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
 8001c34:	e000      	b.n	8001c38 <UART_WaitOnFlagUntilTimeout+0xd8>
        }
      }
    }
  }
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
}
 8001c38:	bc1c      	pop	{r2, r3, r4}
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	46a2      	mov	sl, r4
 8001c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	fffffe5f 	.word	0xfffffe5f

08001c48 <HAL_UART_Transmit>:
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	46ce      	mov	lr, r9
 8001c4c:	b500      	push	{lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	0004      	movs	r4, r0
 8001c52:	000e      	movs	r6, r1
 8001c54:	0017      	movs	r7, r2
 8001c56:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c58:	6f83      	ldr	r3, [r0, #120]	; 0x78
    return HAL_BUSY;
 8001c5a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d167      	bne.n	8001d30 <HAL_UART_Transmit+0xe8>
    if ((pData == NULL) || (Size == 0U))
 8001c60:	2900      	cmp	r1, #0
 8001c62:	d064      	beq.n	8001d2e <HAL_UART_Transmit+0xe6>
      return  HAL_ERROR;
 8001c64:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d062      	beq.n	8001d30 <HAL_UART_Transmit+0xe8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	015b      	lsls	r3, r3, #5
 8001c6e:	68a2      	ldr	r2, [r4, #8]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d023      	beq.n	8001cbc <HAL_UART_Transmit+0x74>
    __HAL_LOCK(huart);
 8001c74:	2374      	movs	r3, #116	; 0x74
 8001c76:	5ce3      	ldrb	r3, [r4, r3]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d05d      	beq.n	8001d38 <HAL_UART_Transmit+0xf0>
 8001c7c:	2374      	movs	r3, #116	; 0x74
 8001c7e:	2201      	movs	r2, #1
 8001c80:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c82:	330c      	adds	r3, #12
 8001c84:	2200      	movs	r2, #0
 8001c86:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c88:	3b5f      	subs	r3, #95	; 0x5f
 8001c8a:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001c8c:	f7fe fe28 	bl	80008e0 <HAL_GetTick>
 8001c90:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 8001c92:	2350      	movs	r3, #80	; 0x50
 8001c94:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 8001c96:	3302      	adds	r3, #2
 8001c98:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca2:	68a2      	ldr	r2, [r4, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d00f      	beq.n	8001cc8 <HAL_UART_Transmit+0x80>
    __HAL_UNLOCK(huart);
 8001ca8:	2374      	movs	r3, #116	; 0x74
 8001caa:	2200      	movs	r2, #0
 8001cac:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8001cae:	3b22      	subs	r3, #34	; 0x22
 8001cb0:	5ae3      	ldrh	r3, [r4, r3]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d02e      	beq.n	8001d16 <HAL_UART_Transmit+0xce>
      huart->TxXferCount--;
 8001cb8:	2752      	movs	r7, #82	; 0x52
 8001cba:	e01c      	b.n	8001cf6 <HAL_UART_Transmit+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cbc:	6923      	ldr	r3, [r4, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1d8      	bne.n	8001c74 <HAL_UART_Transmit+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cc2:	07cb      	lsls	r3, r1, #31
 8001cc4:	d5d6      	bpl.n	8001c74 <HAL_UART_Transmit+0x2c>
 8001cc6:	e033      	b.n	8001d30 <HAL_UART_Transmit+0xe8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc8:	6923      	ldr	r3, [r4, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ec      	bne.n	8001ca8 <HAL_UART_Transmit+0x60>
      pdata16bits = (uint16_t *) pData;
 8001cce:	46b1      	mov	r9, r6
      pdata8bits  = NULL;
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	e7e9      	b.n	8001ca8 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cd4:	464b      	mov	r3, r9
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	0ddb      	lsrs	r3, r3, #23
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	44e1      	add	r9, ip
      huart->TxXferCount--;
 8001ce6:	5be3      	ldrh	r3, [r4, r7]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	53e3      	strh	r3, [r4, r7]
    while (huart->TxXferCount > 0U)
 8001cee:	5be3      	ldrh	r3, [r4, r7]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00f      	beq.n	8001d16 <HAL_UART_Transmit+0xce>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf6:	9500      	str	r5, [sp, #0]
 8001cf8:	9b03      	ldr	r3, [sp, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f7ff ff2e 	bl	8001b60 <UART_WaitOnFlagUntilTimeout>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d119      	bne.n	8001d3c <HAL_UART_Transmit+0xf4>
      if (pdata8bits == NULL)
 8001d08:	2e00      	cmp	r6, #0
 8001d0a:	d0e3      	beq.n	8001cd4 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d0c:	7833      	ldrb	r3, [r6, #0]
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8001d12:	3601      	adds	r6, #1
 8001d14:	e7e7      	b.n	8001ce6 <HAL_UART_Transmit+0x9e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d16:	9500      	str	r5, [sp, #0]
 8001d18:	9b03      	ldr	r3, [sp, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	0020      	movs	r0, r4
 8001d20:	f7ff ff1e 	bl	8001b60 <UART_WaitOnFlagUntilTimeout>
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d10b      	bne.n	8001d40 <HAL_UART_Transmit+0xf8>
    huart->gState = HAL_UART_STATE_READY;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001d2c:	e000      	b.n	8001d30 <HAL_UART_Transmit+0xe8>
      return  HAL_ERROR;
 8001d2e:	2001      	movs	r0, #1
}
 8001d30:	b004      	add	sp, #16
 8001d32:	bc04      	pop	{r2}
 8001d34:	4691      	mov	r9, r2
 8001d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8001d38:	2002      	movs	r0, #2
 8001d3a:	e7f9      	b.n	8001d30 <HAL_UART_Transmit+0xe8>
        return HAL_TIMEOUT;
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	e7f7      	b.n	8001d30 <HAL_UART_Transmit+0xe8>
      return HAL_TIMEOUT;
 8001d40:	2003      	movs	r0, #3
 8001d42:	e7f5      	b.n	8001d30 <HAL_UART_Transmit+0xe8>

08001d44 <UART_CheckIdleState>:
{
 8001d44:	b530      	push	{r4, r5, lr}
 8001d46:	b083      	sub	sp, #12
 8001d48:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001d50:	f7fe fdc6 	bl	80008e0 <HAL_GetTick>
 8001d54:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	071b      	lsls	r3, r3, #28
 8001d5c:	d40d      	bmi.n	8001d7a <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d5e:	6823      	ldr	r3, [r4, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	075b      	lsls	r3, r3, #29
 8001d64:	d416      	bmi.n	8001d94 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001d66:	2320      	movs	r3, #32
 8001d68:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001d6a:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8001d70:	2274      	movs	r2, #116	; 0x74
 8001d72:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001d74:	2000      	movs	r0, #0
}
 8001d76:	b003      	add	sp, #12
 8001d78:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <UART_CheckIdleState+0x6c>)
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	0003      	movs	r3, r0
 8001d82:	2200      	movs	r2, #0
 8001d84:	0389      	lsls	r1, r1, #14
 8001d86:	0020      	movs	r0, r4
 8001d88:	f7ff feea 	bl	8001b60 <UART_WaitOnFlagUntilTimeout>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d0e6      	beq.n	8001d5e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
 8001d92:	e7f0      	b.n	8001d76 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <UART_CheckIdleState+0x6c>)
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	002b      	movs	r3, r5
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	03c9      	lsls	r1, r1, #15
 8001da0:	0020      	movs	r0, r4
 8001da2:	f7ff fedd 	bl	8001b60 <UART_WaitOnFlagUntilTimeout>
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d0dd      	beq.n	8001d66 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8001daa:	2003      	movs	r0, #3
 8001dac:	e7e3      	b.n	8001d76 <UART_CheckIdleState+0x32>
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	01ffffff 	.word	0x01ffffff

08001db4 <HAL_UART_Init>:
{
 8001db4:	b510      	push	{r4, lr}
 8001db6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001db8:	d02e      	beq.n	8001e18 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001dba:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d021      	beq.n	8001e04 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001dc0:	2324      	movs	r3, #36	; 0x24
 8001dc2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	438b      	bics	r3, r1
 8001dcc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f7ff fdc0 	bl	8001954 <UART_SetConfig>
 8001dd4:	2801      	cmp	r0, #1
 8001dd6:	d014      	beq.n	8001e02 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	6853      	ldr	r3, [r2, #4]
 8001de2:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_UART_Init+0x68>)
 8001de4:	400b      	ands	r3, r1
 8001de6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	6893      	ldr	r3, [r2, #8]
 8001dec:	2108      	movs	r1, #8
 8001dee:	438b      	bics	r3, r1
 8001df0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	6813      	ldr	r3, [r2, #0]
 8001df6:	3907      	subs	r1, #7
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001dfc:	0020      	movs	r0, r4
 8001dfe:	f7ff ffa1 	bl	8001d44 <UART_CheckIdleState>
}
 8001e02:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e04:	3374      	adds	r3, #116	; 0x74
 8001e06:	2200      	movs	r2, #0
 8001e08:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001e0a:	f7fe fcc9 	bl	80007a0 <HAL_UART_MspInit>
 8001e0e:	e7d7      	b.n	8001dc0 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001e10:	0020      	movs	r0, r4
 8001e12:	f7ff fe35 	bl	8001a80 <UART_AdvFeatureConfig>
 8001e16:	e7e2      	b.n	8001dde <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
 8001e1a:	e7f2      	b.n	8001e02 <HAL_UART_Init+0x4e>
 8001e1c:	fffff7ff 	.word	0xfffff7ff

08001e20 <__errno>:
 8001e20:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <__errno+0x8>)
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	4770      	bx	lr
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	20000010 	.word	0x20000010

08001e2c <__libc_init_array>:
 8001e2c:	b570      	push	{r4, r5, r6, lr}
 8001e2e:	2600      	movs	r6, #0
 8001e30:	4d0c      	ldr	r5, [pc, #48]	; (8001e64 <__libc_init_array+0x38>)
 8001e32:	4c0d      	ldr	r4, [pc, #52]	; (8001e68 <__libc_init_array+0x3c>)
 8001e34:	1b64      	subs	r4, r4, r5
 8001e36:	10a4      	asrs	r4, r4, #2
 8001e38:	42a6      	cmp	r6, r4
 8001e3a:	d109      	bne.n	8001e50 <__libc_init_array+0x24>
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	f000 fc29 	bl	8002694 <_init>
 8001e42:	4d0a      	ldr	r5, [pc, #40]	; (8001e6c <__libc_init_array+0x40>)
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <__libc_init_array+0x44>)
 8001e46:	1b64      	subs	r4, r4, r5
 8001e48:	10a4      	asrs	r4, r4, #2
 8001e4a:	42a6      	cmp	r6, r4
 8001e4c:	d105      	bne.n	8001e5a <__libc_init_array+0x2e>
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}
 8001e50:	00b3      	lsls	r3, r6, #2
 8001e52:	58eb      	ldr	r3, [r5, r3]
 8001e54:	4798      	blx	r3
 8001e56:	3601      	adds	r6, #1
 8001e58:	e7ee      	b.n	8001e38 <__libc_init_array+0xc>
 8001e5a:	00b3      	lsls	r3, r6, #2
 8001e5c:	58eb      	ldr	r3, [r5, r3]
 8001e5e:	4798      	blx	r3
 8001e60:	3601      	adds	r6, #1
 8001e62:	e7f2      	b.n	8001e4a <__libc_init_array+0x1e>
 8001e64:	08002748 	.word	0x08002748
 8001e68:	08002748 	.word	0x08002748
 8001e6c:	08002748 	.word	0x08002748
 8001e70:	0800274c 	.word	0x0800274c

08001e74 <memcpy>:
 8001e74:	2300      	movs	r3, #0
 8001e76:	b510      	push	{r4, lr}
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d100      	bne.n	8001e7e <memcpy+0xa>
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	5ccc      	ldrb	r4, [r1, r3]
 8001e80:	54c4      	strb	r4, [r0, r3]
 8001e82:	3301      	adds	r3, #1
 8001e84:	e7f8      	b.n	8001e78 <memcpy+0x4>

08001e86 <memset>:
 8001e86:	0003      	movs	r3, r0
 8001e88:	1812      	adds	r2, r2, r0
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d100      	bne.n	8001e90 <memset+0xa>
 8001e8e:	4770      	bx	lr
 8001e90:	7019      	strb	r1, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	e7f9      	b.n	8001e8a <memset+0x4>
	...

08001e98 <siprintf>:
 8001e98:	b40e      	push	{r1, r2, r3}
 8001e9a:	b500      	push	{lr}
 8001e9c:	490b      	ldr	r1, [pc, #44]	; (8001ecc <siprintf+0x34>)
 8001e9e:	b09c      	sub	sp, #112	; 0x70
 8001ea0:	ab1d      	add	r3, sp, #116	; 0x74
 8001ea2:	9002      	str	r0, [sp, #8]
 8001ea4:	9006      	str	r0, [sp, #24]
 8001ea6:	9107      	str	r1, [sp, #28]
 8001ea8:	9104      	str	r1, [sp, #16]
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <siprintf+0x38>)
 8001eac:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <siprintf+0x3c>)
 8001eae:	cb04      	ldmia	r3!, {r2}
 8001eb0:	9105      	str	r1, [sp, #20]
 8001eb2:	6800      	ldr	r0, [r0, #0]
 8001eb4:	a902      	add	r1, sp, #8
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	f000 f870 	bl	8001f9c <_svfiprintf_r>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9a02      	ldr	r2, [sp, #8]
 8001ec0:	7013      	strb	r3, [r2, #0]
 8001ec2:	b01c      	add	sp, #112	; 0x70
 8001ec4:	bc08      	pop	{r3}
 8001ec6:	b003      	add	sp, #12
 8001ec8:	4718      	bx	r3
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	7fffffff 	.word	0x7fffffff
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	ffff0208 	.word	0xffff0208

08001ed8 <__ssputs_r>:
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	688e      	ldr	r6, [r1, #8]
 8001edc:	b085      	sub	sp, #20
 8001ede:	0007      	movs	r7, r0
 8001ee0:	000c      	movs	r4, r1
 8001ee2:	9203      	str	r2, [sp, #12]
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	429e      	cmp	r6, r3
 8001ee8:	d83c      	bhi.n	8001f64 <__ssputs_r+0x8c>
 8001eea:	2390      	movs	r3, #144	; 0x90
 8001eec:	898a      	ldrh	r2, [r1, #12]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	421a      	tst	r2, r3
 8001ef2:	d034      	beq.n	8001f5e <__ssputs_r+0x86>
 8001ef4:	2503      	movs	r5, #3
 8001ef6:	6909      	ldr	r1, [r1, #16]
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	1a5b      	subs	r3, r3, r1
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	6963      	ldr	r3, [r4, #20]
 8001f00:	9802      	ldr	r0, [sp, #8]
 8001f02:	435d      	muls	r5, r3
 8001f04:	0feb      	lsrs	r3, r5, #31
 8001f06:	195d      	adds	r5, r3, r5
 8001f08:	9b01      	ldr	r3, [sp, #4]
 8001f0a:	106d      	asrs	r5, r5, #1
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	181b      	adds	r3, r3, r0
 8001f10:	42ab      	cmp	r3, r5
 8001f12:	d900      	bls.n	8001f16 <__ssputs_r+0x3e>
 8001f14:	001d      	movs	r5, r3
 8001f16:	0553      	lsls	r3, r2, #21
 8001f18:	d532      	bpl.n	8001f80 <__ssputs_r+0xa8>
 8001f1a:	0029      	movs	r1, r5
 8001f1c:	0038      	movs	r0, r7
 8001f1e:	f000 fb19 	bl	8002554 <_malloc_r>
 8001f22:	1e06      	subs	r6, r0, #0
 8001f24:	d109      	bne.n	8001f3a <__ssputs_r+0x62>
 8001f26:	230c      	movs	r3, #12
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	2340      	movs	r3, #64	; 0x40
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	89a2      	ldrh	r2, [r4, #12]
 8001f30:	4240      	negs	r0, r0
 8001f32:	4313      	orrs	r3, r2
 8001f34:	81a3      	strh	r3, [r4, #12]
 8001f36:	b005      	add	sp, #20
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	9a02      	ldr	r2, [sp, #8]
 8001f3c:	6921      	ldr	r1, [r4, #16]
 8001f3e:	f7ff ff99 	bl	8001e74 <memcpy>
 8001f42:	89a3      	ldrh	r3, [r4, #12]
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <__ssputs_r+0xc0>)
 8001f46:	401a      	ands	r2, r3
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	81a3      	strh	r3, [r4, #12]
 8001f4e:	9b02      	ldr	r3, [sp, #8]
 8001f50:	6126      	str	r6, [r4, #16]
 8001f52:	18f6      	adds	r6, r6, r3
 8001f54:	6026      	str	r6, [r4, #0]
 8001f56:	6165      	str	r5, [r4, #20]
 8001f58:	9e01      	ldr	r6, [sp, #4]
 8001f5a:	1aed      	subs	r5, r5, r3
 8001f5c:	60a5      	str	r5, [r4, #8]
 8001f5e:	9b01      	ldr	r3, [sp, #4]
 8001f60:	429e      	cmp	r6, r3
 8001f62:	d900      	bls.n	8001f66 <__ssputs_r+0x8e>
 8001f64:	9e01      	ldr	r6, [sp, #4]
 8001f66:	0032      	movs	r2, r6
 8001f68:	9903      	ldr	r1, [sp, #12]
 8001f6a:	6820      	ldr	r0, [r4, #0]
 8001f6c:	f000 fa95 	bl	800249a <memmove>
 8001f70:	68a3      	ldr	r3, [r4, #8]
 8001f72:	2000      	movs	r0, #0
 8001f74:	1b9b      	subs	r3, r3, r6
 8001f76:	60a3      	str	r3, [r4, #8]
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	199e      	adds	r6, r3, r6
 8001f7c:	6026      	str	r6, [r4, #0]
 8001f7e:	e7da      	b.n	8001f36 <__ssputs_r+0x5e>
 8001f80:	002a      	movs	r2, r5
 8001f82:	0038      	movs	r0, r7
 8001f84:	f000 fb44 	bl	8002610 <_realloc_r>
 8001f88:	1e06      	subs	r6, r0, #0
 8001f8a:	d1e0      	bne.n	8001f4e <__ssputs_r+0x76>
 8001f8c:	6921      	ldr	r1, [r4, #16]
 8001f8e:	0038      	movs	r0, r7
 8001f90:	f000 fa96 	bl	80024c0 <_free_r>
 8001f94:	e7c7      	b.n	8001f26 <__ssputs_r+0x4e>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	fffffb7f 	.word	0xfffffb7f

08001f9c <_svfiprintf_r>:
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	b0a1      	sub	sp, #132	; 0x84
 8001fa0:	9003      	str	r0, [sp, #12]
 8001fa2:	001d      	movs	r5, r3
 8001fa4:	898b      	ldrh	r3, [r1, #12]
 8001fa6:	000f      	movs	r7, r1
 8001fa8:	0016      	movs	r6, r2
 8001faa:	061b      	lsls	r3, r3, #24
 8001fac:	d511      	bpl.n	8001fd2 <_svfiprintf_r+0x36>
 8001fae:	690b      	ldr	r3, [r1, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <_svfiprintf_r+0x36>
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	f000 facd 	bl	8002554 <_malloc_r>
 8001fba:	6038      	str	r0, [r7, #0]
 8001fbc:	6138      	str	r0, [r7, #16]
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d105      	bne.n	8001fce <_svfiprintf_r+0x32>
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	9a03      	ldr	r2, [sp, #12]
 8001fc6:	3801      	subs	r0, #1
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	b021      	add	sp, #132	; 0x84
 8001fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fce:	2340      	movs	r3, #64	; 0x40
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	ac08      	add	r4, sp, #32
 8001fd6:	6163      	str	r3, [r4, #20]
 8001fd8:	3320      	adds	r3, #32
 8001fda:	7663      	strb	r3, [r4, #25]
 8001fdc:	3310      	adds	r3, #16
 8001fde:	76a3      	strb	r3, [r4, #26]
 8001fe0:	9507      	str	r5, [sp, #28]
 8001fe2:	0035      	movs	r5, r6
 8001fe4:	782b      	ldrb	r3, [r5, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <_svfiprintf_r+0x52>
 8001fea:	2b25      	cmp	r3, #37	; 0x25
 8001fec:	d146      	bne.n	800207c <_svfiprintf_r+0xe0>
 8001fee:	1bab      	subs	r3, r5, r6
 8001ff0:	9305      	str	r3, [sp, #20]
 8001ff2:	d00c      	beq.n	800200e <_svfiprintf_r+0x72>
 8001ff4:	0032      	movs	r2, r6
 8001ff6:	0039      	movs	r1, r7
 8001ff8:	9803      	ldr	r0, [sp, #12]
 8001ffa:	f7ff ff6d 	bl	8001ed8 <__ssputs_r>
 8001ffe:	1c43      	adds	r3, r0, #1
 8002000:	d100      	bne.n	8002004 <_svfiprintf_r+0x68>
 8002002:	e0ae      	b.n	8002162 <_svfiprintf_r+0x1c6>
 8002004:	6962      	ldr	r2, [r4, #20]
 8002006:	9b05      	ldr	r3, [sp, #20]
 8002008:	4694      	mov	ip, r2
 800200a:	4463      	add	r3, ip
 800200c:	6163      	str	r3, [r4, #20]
 800200e:	782b      	ldrb	r3, [r5, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <_svfiprintf_r+0x7a>
 8002014:	e0a5      	b.n	8002162 <_svfiprintf_r+0x1c6>
 8002016:	2201      	movs	r2, #1
 8002018:	2300      	movs	r3, #0
 800201a:	4252      	negs	r2, r2
 800201c:	6062      	str	r2, [r4, #4]
 800201e:	a904      	add	r1, sp, #16
 8002020:	3254      	adds	r2, #84	; 0x54
 8002022:	1852      	adds	r2, r2, r1
 8002024:	1c6e      	adds	r6, r5, #1
 8002026:	6023      	str	r3, [r4, #0]
 8002028:	60e3      	str	r3, [r4, #12]
 800202a:	60a3      	str	r3, [r4, #8]
 800202c:	7013      	strb	r3, [r2, #0]
 800202e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002030:	7831      	ldrb	r1, [r6, #0]
 8002032:	2205      	movs	r2, #5
 8002034:	4853      	ldr	r0, [pc, #332]	; (8002184 <_svfiprintf_r+0x1e8>)
 8002036:	f000 fa25 	bl	8002484 <memchr>
 800203a:	1c75      	adds	r5, r6, #1
 800203c:	2800      	cmp	r0, #0
 800203e:	d11f      	bne.n	8002080 <_svfiprintf_r+0xe4>
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	06d3      	lsls	r3, r2, #27
 8002044:	d504      	bpl.n	8002050 <_svfiprintf_r+0xb4>
 8002046:	2353      	movs	r3, #83	; 0x53
 8002048:	a904      	add	r1, sp, #16
 800204a:	185b      	adds	r3, r3, r1
 800204c:	2120      	movs	r1, #32
 800204e:	7019      	strb	r1, [r3, #0]
 8002050:	0713      	lsls	r3, r2, #28
 8002052:	d504      	bpl.n	800205e <_svfiprintf_r+0xc2>
 8002054:	2353      	movs	r3, #83	; 0x53
 8002056:	a904      	add	r1, sp, #16
 8002058:	185b      	adds	r3, r3, r1
 800205a:	212b      	movs	r1, #43	; 0x2b
 800205c:	7019      	strb	r1, [r3, #0]
 800205e:	7833      	ldrb	r3, [r6, #0]
 8002060:	2b2a      	cmp	r3, #42	; 0x2a
 8002062:	d016      	beq.n	8002092 <_svfiprintf_r+0xf6>
 8002064:	0035      	movs	r5, r6
 8002066:	2100      	movs	r1, #0
 8002068:	200a      	movs	r0, #10
 800206a:	68e3      	ldr	r3, [r4, #12]
 800206c:	782a      	ldrb	r2, [r5, #0]
 800206e:	1c6e      	adds	r6, r5, #1
 8002070:	3a30      	subs	r2, #48	; 0x30
 8002072:	2a09      	cmp	r2, #9
 8002074:	d94e      	bls.n	8002114 <_svfiprintf_r+0x178>
 8002076:	2900      	cmp	r1, #0
 8002078:	d018      	beq.n	80020ac <_svfiprintf_r+0x110>
 800207a:	e010      	b.n	800209e <_svfiprintf_r+0x102>
 800207c:	3501      	adds	r5, #1
 800207e:	e7b1      	b.n	8001fe4 <_svfiprintf_r+0x48>
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <_svfiprintf_r+0x1e8>)
 8002082:	6822      	ldr	r2, [r4, #0]
 8002084:	1ac0      	subs	r0, r0, r3
 8002086:	2301      	movs	r3, #1
 8002088:	4083      	lsls	r3, r0
 800208a:	4313      	orrs	r3, r2
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	002e      	movs	r6, r5
 8002090:	e7ce      	b.n	8002030 <_svfiprintf_r+0x94>
 8002092:	9b07      	ldr	r3, [sp, #28]
 8002094:	1d19      	adds	r1, r3, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	9107      	str	r1, [sp, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db01      	blt.n	80020a2 <_svfiprintf_r+0x106>
 800209e:	930b      	str	r3, [sp, #44]	; 0x2c
 80020a0:	e004      	b.n	80020ac <_svfiprintf_r+0x110>
 80020a2:	425b      	negs	r3, r3
 80020a4:	60e3      	str	r3, [r4, #12]
 80020a6:	2302      	movs	r3, #2
 80020a8:	4313      	orrs	r3, r2
 80020aa:	6023      	str	r3, [r4, #0]
 80020ac:	782b      	ldrb	r3, [r5, #0]
 80020ae:	2b2e      	cmp	r3, #46	; 0x2e
 80020b0:	d10a      	bne.n	80020c8 <_svfiprintf_r+0x12c>
 80020b2:	786b      	ldrb	r3, [r5, #1]
 80020b4:	2b2a      	cmp	r3, #42	; 0x2a
 80020b6:	d135      	bne.n	8002124 <_svfiprintf_r+0x188>
 80020b8:	9b07      	ldr	r3, [sp, #28]
 80020ba:	3502      	adds	r5, #2
 80020bc:	1d1a      	adds	r2, r3, #4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	9207      	str	r2, [sp, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db2b      	blt.n	800211e <_svfiprintf_r+0x182>
 80020c6:	9309      	str	r3, [sp, #36]	; 0x24
 80020c8:	4e2f      	ldr	r6, [pc, #188]	; (8002188 <_svfiprintf_r+0x1ec>)
 80020ca:	7829      	ldrb	r1, [r5, #0]
 80020cc:	2203      	movs	r2, #3
 80020ce:	0030      	movs	r0, r6
 80020d0:	f000 f9d8 	bl	8002484 <memchr>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d006      	beq.n	80020e6 <_svfiprintf_r+0x14a>
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	1b80      	subs	r0, r0, r6
 80020dc:	4083      	lsls	r3, r0
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	3501      	adds	r5, #1
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	7829      	ldrb	r1, [r5, #0]
 80020e8:	2206      	movs	r2, #6
 80020ea:	4828      	ldr	r0, [pc, #160]	; (800218c <_svfiprintf_r+0x1f0>)
 80020ec:	1c6e      	adds	r6, r5, #1
 80020ee:	7621      	strb	r1, [r4, #24]
 80020f0:	f000 f9c8 	bl	8002484 <memchr>
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d03c      	beq.n	8002172 <_svfiprintf_r+0x1d6>
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <_svfiprintf_r+0x1f4>)
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d125      	bne.n	800214a <_svfiprintf_r+0x1ae>
 80020fe:	2207      	movs	r2, #7
 8002100:	9b07      	ldr	r3, [sp, #28]
 8002102:	3307      	adds	r3, #7
 8002104:	4393      	bics	r3, r2
 8002106:	3308      	adds	r3, #8
 8002108:	9307      	str	r3, [sp, #28]
 800210a:	6963      	ldr	r3, [r4, #20]
 800210c:	9a04      	ldr	r2, [sp, #16]
 800210e:	189b      	adds	r3, r3, r2
 8002110:	6163      	str	r3, [r4, #20]
 8002112:	e766      	b.n	8001fe2 <_svfiprintf_r+0x46>
 8002114:	4343      	muls	r3, r0
 8002116:	2101      	movs	r1, #1
 8002118:	189b      	adds	r3, r3, r2
 800211a:	0035      	movs	r5, r6
 800211c:	e7a6      	b.n	800206c <_svfiprintf_r+0xd0>
 800211e:	2301      	movs	r3, #1
 8002120:	425b      	negs	r3, r3
 8002122:	e7d0      	b.n	80020c6 <_svfiprintf_r+0x12a>
 8002124:	2300      	movs	r3, #0
 8002126:	200a      	movs	r0, #10
 8002128:	001a      	movs	r2, r3
 800212a:	3501      	adds	r5, #1
 800212c:	6063      	str	r3, [r4, #4]
 800212e:	7829      	ldrb	r1, [r5, #0]
 8002130:	1c6e      	adds	r6, r5, #1
 8002132:	3930      	subs	r1, #48	; 0x30
 8002134:	2909      	cmp	r1, #9
 8002136:	d903      	bls.n	8002140 <_svfiprintf_r+0x1a4>
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0c5      	beq.n	80020c8 <_svfiprintf_r+0x12c>
 800213c:	9209      	str	r2, [sp, #36]	; 0x24
 800213e:	e7c3      	b.n	80020c8 <_svfiprintf_r+0x12c>
 8002140:	4342      	muls	r2, r0
 8002142:	2301      	movs	r3, #1
 8002144:	1852      	adds	r2, r2, r1
 8002146:	0035      	movs	r5, r6
 8002148:	e7f1      	b.n	800212e <_svfiprintf_r+0x192>
 800214a:	ab07      	add	r3, sp, #28
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	003a      	movs	r2, r7
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <_svfiprintf_r+0x1f8>)
 8002152:	0021      	movs	r1, r4
 8002154:	9803      	ldr	r0, [sp, #12]
 8002156:	e000      	b.n	800215a <_svfiprintf_r+0x1be>
 8002158:	bf00      	nop
 800215a:	9004      	str	r0, [sp, #16]
 800215c:	9b04      	ldr	r3, [sp, #16]
 800215e:	3301      	adds	r3, #1
 8002160:	d1d3      	bne.n	800210a <_svfiprintf_r+0x16e>
 8002162:	89bb      	ldrh	r3, [r7, #12]
 8002164:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002166:	065b      	lsls	r3, r3, #25
 8002168:	d400      	bmi.n	800216c <_svfiprintf_r+0x1d0>
 800216a:	e72e      	b.n	8001fca <_svfiprintf_r+0x2e>
 800216c:	2001      	movs	r0, #1
 800216e:	4240      	negs	r0, r0
 8002170:	e72b      	b.n	8001fca <_svfiprintf_r+0x2e>
 8002172:	ab07      	add	r3, sp, #28
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	003a      	movs	r2, r7
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <_svfiprintf_r+0x1f8>)
 800217a:	0021      	movs	r1, r4
 800217c:	9803      	ldr	r0, [sp, #12]
 800217e:	f000 f879 	bl	8002274 <_printf_i>
 8002182:	e7ea      	b.n	800215a <_svfiprintf_r+0x1be>
 8002184:	08002714 	.word	0x08002714
 8002188:	0800271a 	.word	0x0800271a
 800218c:	0800271e 	.word	0x0800271e
 8002190:	00000000 	.word	0x00000000
 8002194:	08001ed9 	.word	0x08001ed9

08002198 <_printf_common>:
 8002198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800219a:	0015      	movs	r5, r2
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	688a      	ldr	r2, [r1, #8]
 80021a0:	690b      	ldr	r3, [r1, #16]
 80021a2:	9000      	str	r0, [sp, #0]
 80021a4:	000c      	movs	r4, r1
 80021a6:	4293      	cmp	r3, r2
 80021a8:	da00      	bge.n	80021ac <_printf_common+0x14>
 80021aa:	0013      	movs	r3, r2
 80021ac:	0022      	movs	r2, r4
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	3243      	adds	r2, #67	; 0x43
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d001      	beq.n	80021bc <_printf_common+0x24>
 80021b8:	3301      	adds	r3, #1
 80021ba:	602b      	str	r3, [r5, #0]
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	d502      	bpl.n	80021c8 <_printf_common+0x30>
 80021c2:	682b      	ldr	r3, [r5, #0]
 80021c4:	3302      	adds	r3, #2
 80021c6:	602b      	str	r3, [r5, #0]
 80021c8:	2706      	movs	r7, #6
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	401f      	ands	r7, r3
 80021ce:	d027      	beq.n	8002220 <_printf_common+0x88>
 80021d0:	0023      	movs	r3, r4
 80021d2:	3343      	adds	r3, #67	; 0x43
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	1e5a      	subs	r2, r3, #1
 80021d8:	4193      	sbcs	r3, r2
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	0692      	lsls	r2, r2, #26
 80021de:	d430      	bmi.n	8002242 <_printf_common+0xaa>
 80021e0:	0022      	movs	r2, r4
 80021e2:	9901      	ldr	r1, [sp, #4]
 80021e4:	3243      	adds	r2, #67	; 0x43
 80021e6:	9800      	ldr	r0, [sp, #0]
 80021e8:	9e08      	ldr	r6, [sp, #32]
 80021ea:	47b0      	blx	r6
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	d025      	beq.n	800223c <_printf_common+0xa4>
 80021f0:	2306      	movs	r3, #6
 80021f2:	6820      	ldr	r0, [r4, #0]
 80021f4:	682a      	ldr	r2, [r5, #0]
 80021f6:	68e1      	ldr	r1, [r4, #12]
 80021f8:	4003      	ands	r3, r0
 80021fa:	2500      	movs	r5, #0
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d103      	bne.n	8002208 <_printf_common+0x70>
 8002200:	1a8d      	subs	r5, r1, r2
 8002202:	43eb      	mvns	r3, r5
 8002204:	17db      	asrs	r3, r3, #31
 8002206:	401d      	ands	r5, r3
 8002208:	68a3      	ldr	r3, [r4, #8]
 800220a:	6922      	ldr	r2, [r4, #16]
 800220c:	4293      	cmp	r3, r2
 800220e:	dd01      	ble.n	8002214 <_printf_common+0x7c>
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	18ed      	adds	r5, r5, r3
 8002214:	2700      	movs	r7, #0
 8002216:	42bd      	cmp	r5, r7
 8002218:	d120      	bne.n	800225c <_printf_common+0xc4>
 800221a:	2000      	movs	r0, #0
 800221c:	e010      	b.n	8002240 <_printf_common+0xa8>
 800221e:	3701      	adds	r7, #1
 8002220:	68e3      	ldr	r3, [r4, #12]
 8002222:	682a      	ldr	r2, [r5, #0]
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	42bb      	cmp	r3, r7
 8002228:	ddd2      	ble.n	80021d0 <_printf_common+0x38>
 800222a:	0022      	movs	r2, r4
 800222c:	2301      	movs	r3, #1
 800222e:	3219      	adds	r2, #25
 8002230:	9901      	ldr	r1, [sp, #4]
 8002232:	9800      	ldr	r0, [sp, #0]
 8002234:	9e08      	ldr	r6, [sp, #32]
 8002236:	47b0      	blx	r6
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d1f0      	bne.n	800221e <_printf_common+0x86>
 800223c:	2001      	movs	r0, #1
 800223e:	4240      	negs	r0, r0
 8002240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002242:	2030      	movs	r0, #48	; 0x30
 8002244:	18e1      	adds	r1, r4, r3
 8002246:	3143      	adds	r1, #67	; 0x43
 8002248:	7008      	strb	r0, [r1, #0]
 800224a:	0021      	movs	r1, r4
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	3145      	adds	r1, #69	; 0x45
 8002250:	7809      	ldrb	r1, [r1, #0]
 8002252:	18a2      	adds	r2, r4, r2
 8002254:	3243      	adds	r2, #67	; 0x43
 8002256:	3302      	adds	r3, #2
 8002258:	7011      	strb	r1, [r2, #0]
 800225a:	e7c1      	b.n	80021e0 <_printf_common+0x48>
 800225c:	0022      	movs	r2, r4
 800225e:	2301      	movs	r3, #1
 8002260:	321a      	adds	r2, #26
 8002262:	9901      	ldr	r1, [sp, #4]
 8002264:	9800      	ldr	r0, [sp, #0]
 8002266:	9e08      	ldr	r6, [sp, #32]
 8002268:	47b0      	blx	r6
 800226a:	1c43      	adds	r3, r0, #1
 800226c:	d0e6      	beq.n	800223c <_printf_common+0xa4>
 800226e:	3701      	adds	r7, #1
 8002270:	e7d1      	b.n	8002216 <_printf_common+0x7e>
	...

08002274 <_printf_i>:
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	9204      	str	r2, [sp, #16]
 800227a:	000a      	movs	r2, r1
 800227c:	3243      	adds	r2, #67	; 0x43
 800227e:	9305      	str	r3, [sp, #20]
 8002280:	9003      	str	r0, [sp, #12]
 8002282:	9202      	str	r2, [sp, #8]
 8002284:	7e0a      	ldrb	r2, [r1, #24]
 8002286:	000c      	movs	r4, r1
 8002288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800228a:	2a6e      	cmp	r2, #110	; 0x6e
 800228c:	d100      	bne.n	8002290 <_printf_i+0x1c>
 800228e:	e086      	b.n	800239e <_printf_i+0x12a>
 8002290:	d81f      	bhi.n	80022d2 <_printf_i+0x5e>
 8002292:	2a63      	cmp	r2, #99	; 0x63
 8002294:	d033      	beq.n	80022fe <_printf_i+0x8a>
 8002296:	d808      	bhi.n	80022aa <_printf_i+0x36>
 8002298:	2a00      	cmp	r2, #0
 800229a:	d100      	bne.n	800229e <_printf_i+0x2a>
 800229c:	e08c      	b.n	80023b8 <_printf_i+0x144>
 800229e:	2a58      	cmp	r2, #88	; 0x58
 80022a0:	d04d      	beq.n	800233e <_printf_i+0xca>
 80022a2:	0025      	movs	r5, r4
 80022a4:	3542      	adds	r5, #66	; 0x42
 80022a6:	702a      	strb	r2, [r5, #0]
 80022a8:	e030      	b.n	800230c <_printf_i+0x98>
 80022aa:	2a64      	cmp	r2, #100	; 0x64
 80022ac:	d001      	beq.n	80022b2 <_printf_i+0x3e>
 80022ae:	2a69      	cmp	r2, #105	; 0x69
 80022b0:	d1f7      	bne.n	80022a2 <_printf_i+0x2e>
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	6825      	ldr	r5, [r4, #0]
 80022b6:	1d0a      	adds	r2, r1, #4
 80022b8:	0628      	lsls	r0, r5, #24
 80022ba:	d529      	bpl.n	8002310 <_printf_i+0x9c>
 80022bc:	6808      	ldr	r0, [r1, #0]
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	2800      	cmp	r0, #0
 80022c2:	da03      	bge.n	80022cc <_printf_i+0x58>
 80022c4:	232d      	movs	r3, #45	; 0x2d
 80022c6:	9a02      	ldr	r2, [sp, #8]
 80022c8:	4240      	negs	r0, r0
 80022ca:	7013      	strb	r3, [r2, #0]
 80022cc:	4e6b      	ldr	r6, [pc, #428]	; (800247c <_printf_i+0x208>)
 80022ce:	270a      	movs	r7, #10
 80022d0:	e04f      	b.n	8002372 <_printf_i+0xfe>
 80022d2:	2a73      	cmp	r2, #115	; 0x73
 80022d4:	d074      	beq.n	80023c0 <_printf_i+0x14c>
 80022d6:	d808      	bhi.n	80022ea <_printf_i+0x76>
 80022d8:	2a6f      	cmp	r2, #111	; 0x6f
 80022da:	d01f      	beq.n	800231c <_printf_i+0xa8>
 80022dc:	2a70      	cmp	r2, #112	; 0x70
 80022de:	d1e0      	bne.n	80022a2 <_printf_i+0x2e>
 80022e0:	2220      	movs	r2, #32
 80022e2:	6809      	ldr	r1, [r1, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	6022      	str	r2, [r4, #0]
 80022e8:	e003      	b.n	80022f2 <_printf_i+0x7e>
 80022ea:	2a75      	cmp	r2, #117	; 0x75
 80022ec:	d016      	beq.n	800231c <_printf_i+0xa8>
 80022ee:	2a78      	cmp	r2, #120	; 0x78
 80022f0:	d1d7      	bne.n	80022a2 <_printf_i+0x2e>
 80022f2:	0022      	movs	r2, r4
 80022f4:	2178      	movs	r1, #120	; 0x78
 80022f6:	3245      	adds	r2, #69	; 0x45
 80022f8:	7011      	strb	r1, [r2, #0]
 80022fa:	4e61      	ldr	r6, [pc, #388]	; (8002480 <_printf_i+0x20c>)
 80022fc:	e022      	b.n	8002344 <_printf_i+0xd0>
 80022fe:	0025      	movs	r5, r4
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	3542      	adds	r5, #66	; 0x42
 8002304:	1d11      	adds	r1, r2, #4
 8002306:	6019      	str	r1, [r3, #0]
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	702b      	strb	r3, [r5, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	e065      	b.n	80023dc <_printf_i+0x168>
 8002310:	6808      	ldr	r0, [r1, #0]
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	0669      	lsls	r1, r5, #25
 8002316:	d5d3      	bpl.n	80022c0 <_printf_i+0x4c>
 8002318:	b200      	sxth	r0, r0
 800231a:	e7d1      	b.n	80022c0 <_printf_i+0x4c>
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	6825      	ldr	r5, [r4, #0]
 8002320:	1d08      	adds	r0, r1, #4
 8002322:	6018      	str	r0, [r3, #0]
 8002324:	6808      	ldr	r0, [r1, #0]
 8002326:	062e      	lsls	r6, r5, #24
 8002328:	d505      	bpl.n	8002336 <_printf_i+0xc2>
 800232a:	4e54      	ldr	r6, [pc, #336]	; (800247c <_printf_i+0x208>)
 800232c:	2708      	movs	r7, #8
 800232e:	2a6f      	cmp	r2, #111	; 0x6f
 8002330:	d01b      	beq.n	800236a <_printf_i+0xf6>
 8002332:	270a      	movs	r7, #10
 8002334:	e019      	b.n	800236a <_printf_i+0xf6>
 8002336:	066d      	lsls	r5, r5, #25
 8002338:	d5f7      	bpl.n	800232a <_printf_i+0xb6>
 800233a:	b280      	uxth	r0, r0
 800233c:	e7f5      	b.n	800232a <_printf_i+0xb6>
 800233e:	3145      	adds	r1, #69	; 0x45
 8002340:	4e4e      	ldr	r6, [pc, #312]	; (800247c <_printf_i+0x208>)
 8002342:	700a      	strb	r2, [r1, #0]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	6822      	ldr	r2, [r4, #0]
 8002348:	1d01      	adds	r1, r0, #4
 800234a:	6800      	ldr	r0, [r0, #0]
 800234c:	6019      	str	r1, [r3, #0]
 800234e:	0615      	lsls	r5, r2, #24
 8002350:	d521      	bpl.n	8002396 <_printf_i+0x122>
 8002352:	07d3      	lsls	r3, r2, #31
 8002354:	d502      	bpl.n	800235c <_printf_i+0xe8>
 8002356:	2320      	movs	r3, #32
 8002358:	431a      	orrs	r2, r3
 800235a:	6022      	str	r2, [r4, #0]
 800235c:	2710      	movs	r7, #16
 800235e:	2800      	cmp	r0, #0
 8002360:	d103      	bne.n	800236a <_printf_i+0xf6>
 8002362:	2320      	movs	r3, #32
 8002364:	6822      	ldr	r2, [r4, #0]
 8002366:	439a      	bics	r2, r3
 8002368:	6022      	str	r2, [r4, #0]
 800236a:	0023      	movs	r3, r4
 800236c:	2200      	movs	r2, #0
 800236e:	3343      	adds	r3, #67	; 0x43
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	6863      	ldr	r3, [r4, #4]
 8002374:	60a3      	str	r3, [r4, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db58      	blt.n	800242c <_printf_i+0x1b8>
 800237a:	2204      	movs	r2, #4
 800237c:	6821      	ldr	r1, [r4, #0]
 800237e:	4391      	bics	r1, r2
 8002380:	6021      	str	r1, [r4, #0]
 8002382:	2800      	cmp	r0, #0
 8002384:	d154      	bne.n	8002430 <_printf_i+0x1bc>
 8002386:	9d02      	ldr	r5, [sp, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05a      	beq.n	8002442 <_printf_i+0x1ce>
 800238c:	0025      	movs	r5, r4
 800238e:	7833      	ldrb	r3, [r6, #0]
 8002390:	3542      	adds	r5, #66	; 0x42
 8002392:	702b      	strb	r3, [r5, #0]
 8002394:	e055      	b.n	8002442 <_printf_i+0x1ce>
 8002396:	0655      	lsls	r5, r2, #25
 8002398:	d5db      	bpl.n	8002352 <_printf_i+0xde>
 800239a:	b280      	uxth	r0, r0
 800239c:	e7d9      	b.n	8002352 <_printf_i+0xde>
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	680d      	ldr	r5, [r1, #0]
 80023a2:	1d10      	adds	r0, r2, #4
 80023a4:	6949      	ldr	r1, [r1, #20]
 80023a6:	6018      	str	r0, [r3, #0]
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	062e      	lsls	r6, r5, #24
 80023ac:	d501      	bpl.n	80023b2 <_printf_i+0x13e>
 80023ae:	6019      	str	r1, [r3, #0]
 80023b0:	e002      	b.n	80023b8 <_printf_i+0x144>
 80023b2:	066d      	lsls	r5, r5, #25
 80023b4:	d5fb      	bpl.n	80023ae <_printf_i+0x13a>
 80023b6:	8019      	strh	r1, [r3, #0]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9d02      	ldr	r5, [sp, #8]
 80023bc:	6123      	str	r3, [r4, #16]
 80023be:	e04f      	b.n	8002460 <_printf_i+0x1ec>
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	1d11      	adds	r1, r2, #4
 80023c4:	6019      	str	r1, [r3, #0]
 80023c6:	6815      	ldr	r5, [r2, #0]
 80023c8:	2100      	movs	r1, #0
 80023ca:	6862      	ldr	r2, [r4, #4]
 80023cc:	0028      	movs	r0, r5
 80023ce:	f000 f859 	bl	8002484 <memchr>
 80023d2:	2800      	cmp	r0, #0
 80023d4:	d001      	beq.n	80023da <_printf_i+0x166>
 80023d6:	1b40      	subs	r0, r0, r5
 80023d8:	6060      	str	r0, [r4, #4]
 80023da:	6863      	ldr	r3, [r4, #4]
 80023dc:	6123      	str	r3, [r4, #16]
 80023de:	2300      	movs	r3, #0
 80023e0:	9a02      	ldr	r2, [sp, #8]
 80023e2:	7013      	strb	r3, [r2, #0]
 80023e4:	e03c      	b.n	8002460 <_printf_i+0x1ec>
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	002a      	movs	r2, r5
 80023ea:	9904      	ldr	r1, [sp, #16]
 80023ec:	9803      	ldr	r0, [sp, #12]
 80023ee:	9d05      	ldr	r5, [sp, #20]
 80023f0:	47a8      	blx	r5
 80023f2:	1c43      	adds	r3, r0, #1
 80023f4:	d03e      	beq.n	8002474 <_printf_i+0x200>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	079b      	lsls	r3, r3, #30
 80023fa:	d415      	bmi.n	8002428 <_printf_i+0x1b4>
 80023fc:	9b07      	ldr	r3, [sp, #28]
 80023fe:	68e0      	ldr	r0, [r4, #12]
 8002400:	4298      	cmp	r0, r3
 8002402:	da39      	bge.n	8002478 <_printf_i+0x204>
 8002404:	0018      	movs	r0, r3
 8002406:	e037      	b.n	8002478 <_printf_i+0x204>
 8002408:	0022      	movs	r2, r4
 800240a:	2301      	movs	r3, #1
 800240c:	3219      	adds	r2, #25
 800240e:	9904      	ldr	r1, [sp, #16]
 8002410:	9803      	ldr	r0, [sp, #12]
 8002412:	9e05      	ldr	r6, [sp, #20]
 8002414:	47b0      	blx	r6
 8002416:	1c43      	adds	r3, r0, #1
 8002418:	d02c      	beq.n	8002474 <_printf_i+0x200>
 800241a:	3501      	adds	r5, #1
 800241c:	68e3      	ldr	r3, [r4, #12]
 800241e:	9a07      	ldr	r2, [sp, #28]
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	42ab      	cmp	r3, r5
 8002424:	dcf0      	bgt.n	8002408 <_printf_i+0x194>
 8002426:	e7e9      	b.n	80023fc <_printf_i+0x188>
 8002428:	2500      	movs	r5, #0
 800242a:	e7f7      	b.n	800241c <_printf_i+0x1a8>
 800242c:	2800      	cmp	r0, #0
 800242e:	d0ad      	beq.n	800238c <_printf_i+0x118>
 8002430:	9d02      	ldr	r5, [sp, #8]
 8002432:	0039      	movs	r1, r7
 8002434:	f7fd fef6 	bl	8000224 <__aeabi_uidivmod>
 8002438:	5c73      	ldrb	r3, [r6, r1]
 800243a:	3d01      	subs	r5, #1
 800243c:	702b      	strb	r3, [r5, #0]
 800243e:	2800      	cmp	r0, #0
 8002440:	d1f7      	bne.n	8002432 <_printf_i+0x1be>
 8002442:	2f08      	cmp	r7, #8
 8002444:	d109      	bne.n	800245a <_printf_i+0x1e6>
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	07db      	lsls	r3, r3, #31
 800244a:	d506      	bpl.n	800245a <_printf_i+0x1e6>
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	6922      	ldr	r2, [r4, #16]
 8002450:	4293      	cmp	r3, r2
 8002452:	dc02      	bgt.n	800245a <_printf_i+0x1e6>
 8002454:	2330      	movs	r3, #48	; 0x30
 8002456:	3d01      	subs	r5, #1
 8002458:	702b      	strb	r3, [r5, #0]
 800245a:	9b02      	ldr	r3, [sp, #8]
 800245c:	1b5b      	subs	r3, r3, r5
 800245e:	6123      	str	r3, [r4, #16]
 8002460:	9b05      	ldr	r3, [sp, #20]
 8002462:	aa07      	add	r2, sp, #28
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	0021      	movs	r1, r4
 8002468:	9b04      	ldr	r3, [sp, #16]
 800246a:	9803      	ldr	r0, [sp, #12]
 800246c:	f7ff fe94 	bl	8002198 <_printf_common>
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d1b8      	bne.n	80023e6 <_printf_i+0x172>
 8002474:	2001      	movs	r0, #1
 8002476:	4240      	negs	r0, r0
 8002478:	b009      	add	sp, #36	; 0x24
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247c:	08002725 	.word	0x08002725
 8002480:	08002736 	.word	0x08002736

08002484 <memchr>:
 8002484:	b2c9      	uxtb	r1, r1
 8002486:	1882      	adds	r2, r0, r2
 8002488:	4290      	cmp	r0, r2
 800248a:	d101      	bne.n	8002490 <memchr+0xc>
 800248c:	2000      	movs	r0, #0
 800248e:	4770      	bx	lr
 8002490:	7803      	ldrb	r3, [r0, #0]
 8002492:	428b      	cmp	r3, r1
 8002494:	d0fb      	beq.n	800248e <memchr+0xa>
 8002496:	3001      	adds	r0, #1
 8002498:	e7f6      	b.n	8002488 <memchr+0x4>

0800249a <memmove>:
 800249a:	b510      	push	{r4, lr}
 800249c:	4288      	cmp	r0, r1
 800249e:	d902      	bls.n	80024a6 <memmove+0xc>
 80024a0:	188b      	adds	r3, r1, r2
 80024a2:	4298      	cmp	r0, r3
 80024a4:	d303      	bcc.n	80024ae <memmove+0x14>
 80024a6:	2300      	movs	r3, #0
 80024a8:	e007      	b.n	80024ba <memmove+0x20>
 80024aa:	5c8b      	ldrb	r3, [r1, r2]
 80024ac:	5483      	strb	r3, [r0, r2]
 80024ae:	3a01      	subs	r2, #1
 80024b0:	d2fb      	bcs.n	80024aa <memmove+0x10>
 80024b2:	bd10      	pop	{r4, pc}
 80024b4:	5ccc      	ldrb	r4, [r1, r3]
 80024b6:	54c4      	strb	r4, [r0, r3]
 80024b8:	3301      	adds	r3, #1
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d1fa      	bne.n	80024b4 <memmove+0x1a>
 80024be:	e7f8      	b.n	80024b2 <memmove+0x18>

080024c0 <_free_r>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	0005      	movs	r5, r0
 80024c4:	2900      	cmp	r1, #0
 80024c6:	d010      	beq.n	80024ea <_free_r+0x2a>
 80024c8:	1f0c      	subs	r4, r1, #4
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	da00      	bge.n	80024d2 <_free_r+0x12>
 80024d0:	18e4      	adds	r4, r4, r3
 80024d2:	0028      	movs	r0, r5
 80024d4:	f000 f8d4 	bl	8002680 <__malloc_lock>
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <_free_r+0x90>)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <_free_r+0x2c>
 80024e0:	6063      	str	r3, [r4, #4]
 80024e2:	6014      	str	r4, [r2, #0]
 80024e4:	0028      	movs	r0, r5
 80024e6:	f000 f8cc 	bl	8002682 <__malloc_unlock>
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	d909      	bls.n	8002504 <_free_r+0x44>
 80024f0:	6821      	ldr	r1, [r4, #0]
 80024f2:	1860      	adds	r0, r4, r1
 80024f4:	4283      	cmp	r3, r0
 80024f6:	d1f3      	bne.n	80024e0 <_free_r+0x20>
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	1841      	adds	r1, r0, r1
 80024fe:	6021      	str	r1, [r4, #0]
 8002500:	e7ee      	b.n	80024e0 <_free_r+0x20>
 8002502:	0013      	movs	r3, r2
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	2a00      	cmp	r2, #0
 8002508:	d001      	beq.n	800250e <_free_r+0x4e>
 800250a:	42a2      	cmp	r2, r4
 800250c:	d9f9      	bls.n	8002502 <_free_r+0x42>
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	1858      	adds	r0, r3, r1
 8002512:	42a0      	cmp	r0, r4
 8002514:	d10b      	bne.n	800252e <_free_r+0x6e>
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	1809      	adds	r1, r1, r0
 800251a:	1858      	adds	r0, r3, r1
 800251c:	6019      	str	r1, [r3, #0]
 800251e:	4282      	cmp	r2, r0
 8002520:	d1e0      	bne.n	80024e4 <_free_r+0x24>
 8002522:	6810      	ldr	r0, [r2, #0]
 8002524:	6852      	ldr	r2, [r2, #4]
 8002526:	1841      	adds	r1, r0, r1
 8002528:	6019      	str	r1, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	e7da      	b.n	80024e4 <_free_r+0x24>
 800252e:	42a0      	cmp	r0, r4
 8002530:	d902      	bls.n	8002538 <_free_r+0x78>
 8002532:	230c      	movs	r3, #12
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	e7d5      	b.n	80024e4 <_free_r+0x24>
 8002538:	6821      	ldr	r1, [r4, #0]
 800253a:	1860      	adds	r0, r4, r1
 800253c:	4282      	cmp	r2, r0
 800253e:	d103      	bne.n	8002548 <_free_r+0x88>
 8002540:	6810      	ldr	r0, [r2, #0]
 8002542:	6852      	ldr	r2, [r2, #4]
 8002544:	1841      	adds	r1, r0, r1
 8002546:	6021      	str	r1, [r4, #0]
 8002548:	6062      	str	r2, [r4, #4]
 800254a:	605c      	str	r4, [r3, #4]
 800254c:	e7ca      	b.n	80024e4 <_free_r+0x24>
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	200000a4 	.word	0x200000a4

08002554 <_malloc_r>:
 8002554:	2303      	movs	r3, #3
 8002556:	b570      	push	{r4, r5, r6, lr}
 8002558:	1ccd      	adds	r5, r1, #3
 800255a:	439d      	bics	r5, r3
 800255c:	3508      	adds	r5, #8
 800255e:	0006      	movs	r6, r0
 8002560:	2d0c      	cmp	r5, #12
 8002562:	d21e      	bcs.n	80025a2 <_malloc_r+0x4e>
 8002564:	250c      	movs	r5, #12
 8002566:	42a9      	cmp	r1, r5
 8002568:	d81d      	bhi.n	80025a6 <_malloc_r+0x52>
 800256a:	0030      	movs	r0, r6
 800256c:	f000 f888 	bl	8002680 <__malloc_lock>
 8002570:	4a25      	ldr	r2, [pc, #148]	; (8002608 <_malloc_r+0xb4>)
 8002572:	6814      	ldr	r4, [r2, #0]
 8002574:	0021      	movs	r1, r4
 8002576:	2900      	cmp	r1, #0
 8002578:	d119      	bne.n	80025ae <_malloc_r+0x5a>
 800257a:	4c24      	ldr	r4, [pc, #144]	; (800260c <_malloc_r+0xb8>)
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <_malloc_r+0x36>
 8002582:	0030      	movs	r0, r6
 8002584:	f000 f86a 	bl	800265c <_sbrk_r>
 8002588:	6020      	str	r0, [r4, #0]
 800258a:	0029      	movs	r1, r5
 800258c:	0030      	movs	r0, r6
 800258e:	f000 f865 	bl	800265c <_sbrk_r>
 8002592:	1c43      	adds	r3, r0, #1
 8002594:	d12b      	bne.n	80025ee <_malloc_r+0x9a>
 8002596:	230c      	movs	r3, #12
 8002598:	0030      	movs	r0, r6
 800259a:	6033      	str	r3, [r6, #0]
 800259c:	f000 f871 	bl	8002682 <__malloc_unlock>
 80025a0:	e003      	b.n	80025aa <_malloc_r+0x56>
 80025a2:	2d00      	cmp	r5, #0
 80025a4:	dadf      	bge.n	8002566 <_malloc_r+0x12>
 80025a6:	230c      	movs	r3, #12
 80025a8:	6033      	str	r3, [r6, #0]
 80025aa:	2000      	movs	r0, #0
 80025ac:	bd70      	pop	{r4, r5, r6, pc}
 80025ae:	680b      	ldr	r3, [r1, #0]
 80025b0:	1b5b      	subs	r3, r3, r5
 80025b2:	d419      	bmi.n	80025e8 <_malloc_r+0x94>
 80025b4:	2b0b      	cmp	r3, #11
 80025b6:	d903      	bls.n	80025c0 <_malloc_r+0x6c>
 80025b8:	600b      	str	r3, [r1, #0]
 80025ba:	18cc      	adds	r4, r1, r3
 80025bc:	6025      	str	r5, [r4, #0]
 80025be:	e003      	b.n	80025c8 <_malloc_r+0x74>
 80025c0:	684b      	ldr	r3, [r1, #4]
 80025c2:	428c      	cmp	r4, r1
 80025c4:	d10d      	bne.n	80025e2 <_malloc_r+0x8e>
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	0030      	movs	r0, r6
 80025ca:	f000 f85a 	bl	8002682 <__malloc_unlock>
 80025ce:	0020      	movs	r0, r4
 80025d0:	2207      	movs	r2, #7
 80025d2:	300b      	adds	r0, #11
 80025d4:	1d23      	adds	r3, r4, #4
 80025d6:	4390      	bics	r0, r2
 80025d8:	1ac3      	subs	r3, r0, r3
 80025da:	d0e7      	beq.n	80025ac <_malloc_r+0x58>
 80025dc:	425a      	negs	r2, r3
 80025de:	50e2      	str	r2, [r4, r3]
 80025e0:	e7e4      	b.n	80025ac <_malloc_r+0x58>
 80025e2:	6063      	str	r3, [r4, #4]
 80025e4:	000c      	movs	r4, r1
 80025e6:	e7ef      	b.n	80025c8 <_malloc_r+0x74>
 80025e8:	000c      	movs	r4, r1
 80025ea:	6849      	ldr	r1, [r1, #4]
 80025ec:	e7c3      	b.n	8002576 <_malloc_r+0x22>
 80025ee:	2303      	movs	r3, #3
 80025f0:	1cc4      	adds	r4, r0, #3
 80025f2:	439c      	bics	r4, r3
 80025f4:	42a0      	cmp	r0, r4
 80025f6:	d0e1      	beq.n	80025bc <_malloc_r+0x68>
 80025f8:	1a21      	subs	r1, r4, r0
 80025fa:	0030      	movs	r0, r6
 80025fc:	f000 f82e 	bl	800265c <_sbrk_r>
 8002600:	1c43      	adds	r3, r0, #1
 8002602:	d1db      	bne.n	80025bc <_malloc_r+0x68>
 8002604:	e7c7      	b.n	8002596 <_malloc_r+0x42>
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	200000a4 	.word	0x200000a4
 800260c:	200000a8 	.word	0x200000a8

08002610 <_realloc_r>:
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002612:	0007      	movs	r7, r0
 8002614:	000d      	movs	r5, r1
 8002616:	0016      	movs	r6, r2
 8002618:	2900      	cmp	r1, #0
 800261a:	d105      	bne.n	8002628 <_realloc_r+0x18>
 800261c:	0011      	movs	r1, r2
 800261e:	f7ff ff99 	bl	8002554 <_malloc_r>
 8002622:	0004      	movs	r4, r0
 8002624:	0020      	movs	r0, r4
 8002626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002628:	2a00      	cmp	r2, #0
 800262a:	d103      	bne.n	8002634 <_realloc_r+0x24>
 800262c:	f7ff ff48 	bl	80024c0 <_free_r>
 8002630:	0034      	movs	r4, r6
 8002632:	e7f7      	b.n	8002624 <_realloc_r+0x14>
 8002634:	f000 f826 	bl	8002684 <_malloc_usable_size_r>
 8002638:	002c      	movs	r4, r5
 800263a:	42b0      	cmp	r0, r6
 800263c:	d2f2      	bcs.n	8002624 <_realloc_r+0x14>
 800263e:	0031      	movs	r1, r6
 8002640:	0038      	movs	r0, r7
 8002642:	f7ff ff87 	bl	8002554 <_malloc_r>
 8002646:	1e04      	subs	r4, r0, #0
 8002648:	d0ec      	beq.n	8002624 <_realloc_r+0x14>
 800264a:	0029      	movs	r1, r5
 800264c:	0032      	movs	r2, r6
 800264e:	f7ff fc11 	bl	8001e74 <memcpy>
 8002652:	0029      	movs	r1, r5
 8002654:	0038      	movs	r0, r7
 8002656:	f7ff ff33 	bl	80024c0 <_free_r>
 800265a:	e7e3      	b.n	8002624 <_realloc_r+0x14>

0800265c <_sbrk_r>:
 800265c:	2300      	movs	r3, #0
 800265e:	b570      	push	{r4, r5, r6, lr}
 8002660:	4c06      	ldr	r4, [pc, #24]	; (800267c <_sbrk_r+0x20>)
 8002662:	0005      	movs	r5, r0
 8002664:	0008      	movs	r0, r1
 8002666:	6023      	str	r3, [r4, #0]
 8002668:	f7fe f85c 	bl	8000724 <_sbrk>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d103      	bne.n	8002678 <_sbrk_r+0x1c>
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d000      	beq.n	8002678 <_sbrk_r+0x1c>
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	bd70      	pop	{r4, r5, r6, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	20000194 	.word	0x20000194

08002680 <__malloc_lock>:
 8002680:	4770      	bx	lr

08002682 <__malloc_unlock>:
 8002682:	4770      	bx	lr

08002684 <_malloc_usable_size_r>:
 8002684:	1f0b      	subs	r3, r1, #4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	1f18      	subs	r0, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	da01      	bge.n	8002692 <_malloc_usable_size_r+0xe>
 800268e:	580b      	ldr	r3, [r1, r0]
 8002690:	18c0      	adds	r0, r0, r3
 8002692:	4770      	bx	lr

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
