
UART_DMA_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000313c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003458  08003458  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08003458  08003458  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003458  08003458  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08003460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200001e4  08003644  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08003644  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac31  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c8d  00000000  00000000  0002ae3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000668  00000000  00000000  0002cad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ff56  00000000  00000000  0002d750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000081f2  00000000  00000000  0003d6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005c238  00000000  00000000  00045898  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a1ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000a1b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003b8e  00000000  00000000  000a32ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031e4 	.word	0x080031e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	080031e4 	.word	0x080031e4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000244:	b500      	push	{lr}
 8000246:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000248:	4a09      	ldr	r2, [pc, #36]	; (8000270 <MX_DMA_Init+0x2c>)
 800024a:	6951      	ldr	r1, [r2, #20]
 800024c:	2301      	movs	r3, #1
 800024e:	4319      	orrs	r1, r3
 8000250:	6151      	str	r1, [r2, #20]
 8000252:	6952      	ldr	r2, [r2, #20]
 8000254:	4013      	ands	r3, r2
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800025a:	2200      	movs	r2, #0
 800025c:	2100      	movs	r1, #0
 800025e:	200a      	movs	r0, #10
 8000260:	f000 fad8 	bl	8000814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000264:	200a      	movs	r0, #10
 8000266:	f000 fb07 	bl	8000878 <HAL_NVIC_EnableIRQ>

}
 800026a:	b003      	add	sp, #12
 800026c:	bd00      	pop	{pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	40021000 	.word	0x40021000

08000274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000274:	b510      	push	{r4, lr}
 8000276:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	2214      	movs	r2, #20
 800027a:	2100      	movs	r1, #0
 800027c:	a803      	add	r0, sp, #12
 800027e:	f001 fe8a 	bl	8001f96 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <MX_GPIO_Init+0x5c>)
 8000284:	6959      	ldr	r1, [r3, #20]
 8000286:	2080      	movs	r0, #128	; 0x80
 8000288:	03c0      	lsls	r0, r0, #15
 800028a:	4301      	orrs	r1, r0
 800028c:	6159      	str	r1, [r3, #20]
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	4002      	ands	r2, r0
 8000292:	9201      	str	r2, [sp, #4]
 8000294:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	400b      	ands	r3, r1
 80002a4:	9302      	str	r3, [sp, #8]
 80002a6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT_Pin|USR_LED_Pin, GPIO_PIN_RESET);
 80002a8:	2490      	movs	r4, #144	; 0x90
 80002aa:	05e4      	lsls	r4, r4, #23
 80002ac:	2200      	movs	r2, #0
 80002ae:	2109      	movs	r1, #9
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 fd2b 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_OUT_Pin|USR_LED_Pin;
 80002b6:	2309      	movs	r3, #9
 80002b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	3b08      	subs	r3, #8
 80002bc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	a903      	add	r1, sp, #12
 80002c6:	0020      	movs	r0, r4
 80002c8:	f000 fc1a 	bl	8000b00 <HAL_GPIO_Init>

}
 80002cc:	b008      	add	sp, #32
 80002ce:	bd10      	pop	{r4, pc}
 80002d0:	40021000 	.word	0x40021000

080002d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d8:	2228      	movs	r2, #40	; 0x28
 80002da:	2100      	movs	r1, #0
 80002dc:	a80a      	add	r0, sp, #40	; 0x28
 80002de:	f001 fe5a 	bl	8001f96 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e2:	2210      	movs	r2, #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	a804      	add	r0, sp, #16
 80002e8:	f001 fe55 	bl	8001f96 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	2210      	movs	r2, #16
 80002ee:	2100      	movs	r1, #0
 80002f0:	4668      	mov	r0, sp
 80002f2:	f001 fe50 	bl	8001f96 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2501      	movs	r5, #1
 80002f8:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	9509      	str	r5, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fc:	2402      	movs	r4, #2
 80002fe:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	035b      	lsls	r3, r3, #13
 800030a:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	a808      	add	r0, sp, #32
 800030e:	f000 fd0b 	bl	8000d28 <HAL_RCC_OscConfig>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	2307      	movs	r3, #7
 8000314:	9304      	str	r3, [sp, #16]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2400      	movs	r4, #0
 800031a:	9406      	str	r4, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	9407      	str	r4, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031e:	2101      	movs	r1, #1
 8000320:	a804      	add	r0, sp, #16
 8000322:	f000 ff9f 	bl	8001264 <HAL_RCC_ClockConfig>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000326:	9500      	str	r5, [sp, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000328:	9402      	str	r4, [sp, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032a:	4668      	mov	r0, sp
 800032c:	f001 f846 	bl	80013bc <HAL_RCCEx_PeriphCLKConfig>
	{
		Error_Handler();
	}
}
 8000330:	b015      	add	sp, #84	; 0x54
 8000332:	bd30      	pop	{r4, r5, pc}

08000334 <main>:
{
 8000334:	b570      	push	{r4, r5, r6, lr}
	HAL_Init();
 8000336:	f000 fa4b 	bl	80007d0 <HAL_Init>
	SystemClock_Config();
 800033a:	f7ff ffcb 	bl	80002d4 <SystemClock_Config>
	MX_GPIO_Init();
 800033e:	f7ff ff99 	bl	8000274 <MX_GPIO_Init>
	MX_DMA_Init();
 8000342:	f7ff ff7f 	bl	8000244 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000346:	f000 f97f 	bl	8000648 <MX_USART1_UART_Init>
	sprintf(txBuffer, "UART DMA Test\n\r");
 800034a:	4c0b      	ldr	r4, [pc, #44]	; (8000378 <main+0x44>)
 800034c:	2210      	movs	r2, #16
 800034e:	490b      	ldr	r1, [pc, #44]	; (800037c <main+0x48>)
 8000350:	0020      	movs	r0, r4
 8000352:	f001 fe17 	bl	8001f84 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 8000356:	0020      	movs	r0, r4
 8000358:	f7ff fee0 	bl	800011c <strlen>
 800035c:	b282      	uxth	r2, r0
 800035e:	4d08      	ldr	r5, [pc, #32]	; (8000380 <main+0x4c>)
 8000360:	230a      	movs	r3, #10
 8000362:	0021      	movs	r1, r4
 8000364:	0028      	movs	r0, r5
 8000366:	f001 fc65 	bl	8001c34 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)rxData, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	4905      	ldr	r1, [pc, #20]	; (8000384 <main+0x50>)
 800036e:	0028      	movs	r0, r5
 8000370:	f001 fda4 	bl	8001ebc <HAL_UART_Receive_DMA>
 8000374:	e7fe      	b.n	8000374 <main+0x40>
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	2000022c 	.word	0x2000022c
 800037c:	08003274 	.word	0x08003274
 8000380:	20000288 	.word	0x20000288
 8000384:	2000020c 	.word	0x2000020c

08000388 <processUART>:
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)rxData, 1);
}

int processUART(char data)
{
 8000388:	b510      	push	{r4, lr}
	if((data != 0x0D) && (data != 0x0A))
 800038a:	280d      	cmp	r0, #13
 800038c:	d012      	beq.n	80003b4 <processUART+0x2c>
 800038e:	280a      	cmp	r0, #10
 8000390:	d010      	beq.n	80003b4 <processUART+0x2c>
	{
		rxBuffer[rxIndex] = data;
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <processUART+0x48>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4a0f      	ldr	r2, [pc, #60]	; (80003d4 <processUART+0x4c>)
 8000398:	54d0      	strb	r0, [r2, r3]
		if(rxIndex <= 3)
 800039a:	2b03      	cmp	r3, #3
 800039c:	d805      	bhi.n	80003aa <processUART+0x22>
		{
			tempBuf[tempIndex] = data;
 800039e:	490e      	ldr	r1, [pc, #56]	; (80003d8 <processUART+0x50>)
 80003a0:	780a      	ldrb	r2, [r1, #0]
 80003a2:	4c0e      	ldr	r4, [pc, #56]	; (80003dc <processUART+0x54>)
 80003a4:	54a0      	strb	r0, [r4, r2]
			tempIndex++;
 80003a6:	3201      	adds	r2, #1
 80003a8:	700a      	strb	r2, [r1, #0]
		}
		rxIndex++;
 80003aa:	3301      	adds	r3, #1
 80003ac:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <processUART+0x48>)
 80003ae:	7013      	strb	r3, [r2, #0]
		return 0;
 80003b0:	2000      	movs	r0, #0
 80003b2:	e00b      	b.n	80003cc <processUART+0x44>
	}
	else
	{
		rxBuffer[rxIndex] = '\0';
 80003b4:	4906      	ldr	r1, [pc, #24]	; (80003d0 <processUART+0x48>)
 80003b6:	780a      	ldrb	r2, [r1, #0]
 80003b8:	2300      	movs	r3, #0
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <processUART+0x4c>)
 80003bc:	5483      	strb	r3, [r0, r2]
		tempBuf[tempIndex] = '\0';
 80003be:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <processUART+0x50>)
 80003c0:	7810      	ldrb	r0, [r2, #0]
 80003c2:	4c06      	ldr	r4, [pc, #24]	; (80003dc <processUART+0x54>)
 80003c4:	5423      	strb	r3, [r4, r0]
		rxIndex = 0;
 80003c6:	700b      	strb	r3, [r1, #0]
		tempIndex = 0;
 80003c8:	7013      	strb	r3, [r2, #0]
		return 1;
 80003ca:	2001      	movs	r0, #1
	}
}
 80003cc:	bd10      	pop	{r4, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	20000240 	.word	0x20000240
 80003d4:	20000220 	.word	0x20000220
 80003d8:	20000241 	.word	0x20000241
 80003dc:	20000218 	.word	0x20000218

080003e0 <HAL_UART_RxCpltCallback>:
{
 80003e0:	b570      	push	{r4, r5, r6, lr}
	char data = rxData[0];
 80003e2:	4b60      	ldr	r3, [pc, #384]	; (8000564 <HAL_UART_RxCpltCallback+0x184>)
	rxComplete = processUART(data);
 80003e4:	7818      	ldrb	r0, [r3, #0]
 80003e6:	f7ff ffcf 	bl	8000388 <processUART>
 80003ea:	b2c0      	uxtb	r0, r0
 80003ec:	4b5e      	ldr	r3, [pc, #376]	; (8000568 <HAL_UART_RxCpltCallback+0x188>)
 80003ee:	7018      	strb	r0, [r3, #0]
	if(rxComplete == HIGH)
 80003f0:	2801      	cmp	r0, #1
 80003f2:	d005      	beq.n	8000400 <HAL_UART_RxCpltCallback+0x20>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)rxData, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	495b      	ldr	r1, [pc, #364]	; (8000564 <HAL_UART_RxCpltCallback+0x184>)
 80003f8:	485c      	ldr	r0, [pc, #368]	; (800056c <HAL_UART_RxCpltCallback+0x18c>)
 80003fa:	f001 fd5f 	bl	8001ebc <HAL_UART_Receive_DMA>
}
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
		if(strcmp(tempBuf, "ADC:") == 0)
 8000400:	495b      	ldr	r1, [pc, #364]	; (8000570 <HAL_UART_RxCpltCallback+0x190>)
 8000402:	485c      	ldr	r0, [pc, #368]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 8000404:	f7ff fe80 	bl	8000108 <strcmp>
 8000408:	2800      	cmp	r0, #0
 800040a:	d12e      	bne.n	800046a <HAL_UART_RxCpltCallback+0x8a>
			int len = strlen(rxBuffer);
 800040c:	485a      	ldr	r0, [pc, #360]	; (8000578 <HAL_UART_RxCpltCallback+0x198>)
 800040e:	f7ff fe85 	bl	800011c <strlen>
 8000412:	0005      	movs	r5, r0
 8000414:	0004      	movs	r4, r0
			for(int i=4;i<len;i++)
 8000416:	2804      	cmp	r0, #4
 8000418:	dd08      	ble.n	800042c <HAL_UART_RxCpltCallback+0x4c>
 800041a:	2304      	movs	r3, #4
				tempBuf[i-4] = rxBuffer[i];
 800041c:	4e55      	ldr	r6, [pc, #340]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 800041e:	4856      	ldr	r0, [pc, #344]	; (8000578 <HAL_UART_RxCpltCallback+0x198>)
 8000420:	1f1a      	subs	r2, r3, #4
 8000422:	5cc1      	ldrb	r1, [r0, r3]
 8000424:	54b1      	strb	r1, [r6, r2]
			for(int i=4;i<len;i++)
 8000426:	3301      	adds	r3, #1
 8000428:	429c      	cmp	r4, r3
 800042a:	d1f9      	bne.n	8000420 <HAL_UART_RxCpltCallback+0x40>
			tempBuf[len-4] = '\0';
 800042c:	4851      	ldr	r0, [pc, #324]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 800042e:	1945      	adds	r5, r0, r5
 8000430:	3d04      	subs	r5, #4
 8000432:	2300      	movs	r3, #0
 8000434:	702b      	strb	r3, [r5, #0]
			sscanf(tempBuf, "%d", &adcThresh);
 8000436:	4c51      	ldr	r4, [pc, #324]	; (800057c <HAL_UART_RxCpltCallback+0x19c>)
 8000438:	0022      	movs	r2, r4
 800043a:	4951      	ldr	r1, [pc, #324]	; (8000580 <HAL_UART_RxCpltCallback+0x1a0>)
 800043c:	f001 fdd4 	bl	8001fe8 <siscanf>
			sprintf(txBuffer, "ADC:%d\n\r", adcThresh);
 8000440:	6822      	ldr	r2, [r4, #0]
 8000442:	4c50      	ldr	r4, [pc, #320]	; (8000584 <HAL_UART_RxCpltCallback+0x1a4>)
 8000444:	4950      	ldr	r1, [pc, #320]	; (8000588 <HAL_UART_RxCpltCallback+0x1a8>)
 8000446:	0020      	movs	r0, r4
 8000448:	f001 fdae 	bl	8001fa8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 800044c:	0020      	movs	r0, r4
 800044e:	f7ff fe65 	bl	800011c <strlen>
 8000452:	b282      	uxth	r2, r0
 8000454:	230a      	movs	r3, #10
 8000456:	0021      	movs	r1, r4
 8000458:	4844      	ldr	r0, [pc, #272]	; (800056c <HAL_UART_RxCpltCallback+0x18c>)
 800045a:	f001 fbeb 	bl	8001c34 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOA, USR_LED_Pin|LED_OUT_Pin);
 800045e:	2090      	movs	r0, #144	; 0x90
 8000460:	2109      	movs	r1, #9
 8000462:	05c0      	lsls	r0, r0, #23
 8000464:	f000 fc58 	bl	8000d18 <HAL_GPIO_TogglePin>
 8000468:	e7c4      	b.n	80003f4 <HAL_UART_RxCpltCallback+0x14>
		else if(strcmp(tempBuf, "ADC?") == 0)
 800046a:	4948      	ldr	r1, [pc, #288]	; (800058c <HAL_UART_RxCpltCallback+0x1ac>)
 800046c:	4841      	ldr	r0, [pc, #260]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 800046e:	f7ff fe4b 	bl	8000108 <strcmp>
 8000472:	2800      	cmp	r0, #0
 8000474:	d034      	beq.n	80004e0 <HAL_UART_RxCpltCallback+0x100>
		else if(strcmp(tempBuf, "Tim:") == 0)
 8000476:	4946      	ldr	r1, [pc, #280]	; (8000590 <HAL_UART_RxCpltCallback+0x1b0>)
 8000478:	483e      	ldr	r0, [pc, #248]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 800047a:	f7ff fe45 	bl	8000108 <strcmp>
 800047e:	2800      	cmp	r0, #0
 8000480:	d144      	bne.n	800050c <HAL_UART_RxCpltCallback+0x12c>
			int len = strlen(rxBuffer);
 8000482:	483d      	ldr	r0, [pc, #244]	; (8000578 <HAL_UART_RxCpltCallback+0x198>)
 8000484:	f7ff fe4a 	bl	800011c <strlen>
 8000488:	0005      	movs	r5, r0
 800048a:	0004      	movs	r4, r0
			for(int i=4;i<len;i++)
 800048c:	2804      	cmp	r0, #4
 800048e:	dd08      	ble.n	80004a2 <HAL_UART_RxCpltCallback+0xc2>
 8000490:	2304      	movs	r3, #4
				tempBuf[i-4] = rxBuffer[i];
 8000492:	4e38      	ldr	r6, [pc, #224]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 8000494:	4838      	ldr	r0, [pc, #224]	; (8000578 <HAL_UART_RxCpltCallback+0x198>)
 8000496:	1f1a      	subs	r2, r3, #4
 8000498:	5cc1      	ldrb	r1, [r0, r3]
 800049a:	54b1      	strb	r1, [r6, r2]
			for(int i=4;i<len;i++)
 800049c:	3301      	adds	r3, #1
 800049e:	429c      	cmp	r4, r3
 80004a0:	d1f9      	bne.n	8000496 <HAL_UART_RxCpltCallback+0xb6>
			tempBuf[len-4] = '\0';
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 80004a4:	1945      	adds	r5, r0, r5
 80004a6:	3d04      	subs	r5, #4
 80004a8:	2300      	movs	r3, #0
 80004aa:	702b      	strb	r3, [r5, #0]
			sscanf(tempBuf, "%d", &timerThresh);
 80004ac:	4c39      	ldr	r4, [pc, #228]	; (8000594 <HAL_UART_RxCpltCallback+0x1b4>)
 80004ae:	0022      	movs	r2, r4
 80004b0:	4933      	ldr	r1, [pc, #204]	; (8000580 <HAL_UART_RxCpltCallback+0x1a0>)
 80004b2:	f001 fd99 	bl	8001fe8 <siscanf>
			sprintf(txBuffer, "Tim:%d\n\r", timerThresh);
 80004b6:	6822      	ldr	r2, [r4, #0]
 80004b8:	4c32      	ldr	r4, [pc, #200]	; (8000584 <HAL_UART_RxCpltCallback+0x1a4>)
 80004ba:	4937      	ldr	r1, [pc, #220]	; (8000598 <HAL_UART_RxCpltCallback+0x1b8>)
 80004bc:	0020      	movs	r0, r4
 80004be:	f001 fd73 	bl	8001fa8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 80004c2:	0020      	movs	r0, r4
 80004c4:	f7ff fe2a 	bl	800011c <strlen>
 80004c8:	b282      	uxth	r2, r0
 80004ca:	230a      	movs	r3, #10
 80004cc:	0021      	movs	r1, r4
 80004ce:	4827      	ldr	r0, [pc, #156]	; (800056c <HAL_UART_RxCpltCallback+0x18c>)
 80004d0:	f001 fbb0 	bl	8001c34 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOA, USR_LED_Pin|LED_OUT_Pin);
 80004d4:	2090      	movs	r0, #144	; 0x90
 80004d6:	2109      	movs	r1, #9
 80004d8:	05c0      	lsls	r0, r0, #23
 80004da:	f000 fc1d 	bl	8000d18 <HAL_GPIO_TogglePin>
 80004de:	e789      	b.n	80003f4 <HAL_UART_RxCpltCallback+0x14>
			sprintf(txBuffer, "ADC:%d\n\r", adcThresh);
 80004e0:	4b26      	ldr	r3, [pc, #152]	; (800057c <HAL_UART_RxCpltCallback+0x19c>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4c27      	ldr	r4, [pc, #156]	; (8000584 <HAL_UART_RxCpltCallback+0x1a4>)
 80004e6:	4928      	ldr	r1, [pc, #160]	; (8000588 <HAL_UART_RxCpltCallback+0x1a8>)
 80004e8:	0020      	movs	r0, r4
 80004ea:	f001 fd5d 	bl	8001fa8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 80004ee:	0020      	movs	r0, r4
 80004f0:	f7ff fe14 	bl	800011c <strlen>
 80004f4:	b282      	uxth	r2, r0
 80004f6:	230a      	movs	r3, #10
 80004f8:	0021      	movs	r1, r4
 80004fa:	481c      	ldr	r0, [pc, #112]	; (800056c <HAL_UART_RxCpltCallback+0x18c>)
 80004fc:	f001 fb9a 	bl	8001c34 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOA, USR_LED_Pin|LED_OUT_Pin);
 8000500:	2090      	movs	r0, #144	; 0x90
 8000502:	2109      	movs	r1, #9
 8000504:	05c0      	lsls	r0, r0, #23
 8000506:	f000 fc07 	bl	8000d18 <HAL_GPIO_TogglePin>
 800050a:	e773      	b.n	80003f4 <HAL_UART_RxCpltCallback+0x14>
		else if(strcmp(tempBuf, "Tim?") == 0)
 800050c:	4923      	ldr	r1, [pc, #140]	; (800059c <HAL_UART_RxCpltCallback+0x1bc>)
 800050e:	4819      	ldr	r0, [pc, #100]	; (8000574 <HAL_UART_RxCpltCallback+0x194>)
 8000510:	f7ff fdfa 	bl	8000108 <strcmp>
 8000514:	2800      	cmp	r0, #0
 8000516:	d00f      	beq.n	8000538 <HAL_UART_RxCpltCallback+0x158>
			sprintf(txBuffer, "Invalid Data\n\r");
 8000518:	4c1a      	ldr	r4, [pc, #104]	; (8000584 <HAL_UART_RxCpltCallback+0x1a4>)
 800051a:	220f      	movs	r2, #15
 800051c:	4920      	ldr	r1, [pc, #128]	; (80005a0 <HAL_UART_RxCpltCallback+0x1c0>)
 800051e:	0020      	movs	r0, r4
 8000520:	f001 fd30 	bl	8001f84 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 8000524:	0020      	movs	r0, r4
 8000526:	f7ff fdf9 	bl	800011c <strlen>
 800052a:	b282      	uxth	r2, r0
 800052c:	230a      	movs	r3, #10
 800052e:	0021      	movs	r1, r4
 8000530:	480e      	ldr	r0, [pc, #56]	; (800056c <HAL_UART_RxCpltCallback+0x18c>)
 8000532:	f001 fb7f 	bl	8001c34 <HAL_UART_Transmit>
 8000536:	e75d      	b.n	80003f4 <HAL_UART_RxCpltCallback+0x14>
			sprintf(txBuffer, "Tim:%d\n\r", timerThresh);
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <HAL_UART_RxCpltCallback+0x1b4>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4c11      	ldr	r4, [pc, #68]	; (8000584 <HAL_UART_RxCpltCallback+0x1a4>)
 800053e:	4916      	ldr	r1, [pc, #88]	; (8000598 <HAL_UART_RxCpltCallback+0x1b8>)
 8000540:	0020      	movs	r0, r4
 8000542:	f001 fd31 	bl	8001fa8 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 10);
 8000546:	0020      	movs	r0, r4
 8000548:	f7ff fde8 	bl	800011c <strlen>
 800054c:	b282      	uxth	r2, r0
 800054e:	230a      	movs	r3, #10
 8000550:	0021      	movs	r1, r4
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <HAL_UART_RxCpltCallback+0x18c>)
 8000554:	f001 fb6e 	bl	8001c34 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOA, USR_LED_Pin|LED_OUT_Pin);
 8000558:	2090      	movs	r0, #144	; 0x90
 800055a:	2109      	movs	r1, #9
 800055c:	05c0      	lsls	r0, r0, #23
 800055e:	f000 fbdb 	bl	8000d18 <HAL_GPIO_TogglePin>
 8000562:	e747      	b.n	80003f4 <HAL_UART_RxCpltCallback+0x14>
 8000564:	2000020c 	.word	0x2000020c
 8000568:	20000215 	.word	0x20000215
 800056c:	20000288 	.word	0x20000288
 8000570:	08003228 	.word	0x08003228
 8000574:	20000218 	.word	0x20000218
 8000578:	20000220 	.word	0x20000220
 800057c:	20000000 	.word	0x20000000
 8000580:	08003230 	.word	0x08003230
 8000584:	2000022c 	.word	0x2000022c
 8000588:	08003234 	.word	0x08003234
 800058c:	08003240 	.word	0x08003240
 8000590:	08003248 	.word	0x08003248
 8000594:	20000004 	.word	0x20000004
 8000598:	08003250 	.word	0x08003250
 800059c:	0800325c 	.word	0x0800325c
 80005a0:	08003264 	.word	0x08003264

080005a4 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80005a4:	4770      	bx	lr
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_MspInit+0x2c>)
 80005ac:	6999      	ldr	r1, [r3, #24]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4311      	orrs	r1, r2
 80005b2:	6199      	str	r1, [r3, #24]
 80005b4:	6999      	ldr	r1, [r3, #24]
 80005b6:	400a      	ands	r2, r1
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	69da      	ldr	r2, [r3, #28]
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0549      	lsls	r1, r1, #21
 80005c2:	430a      	orrs	r2, r1
 80005c4:	61da      	str	r2, [r3, #28]
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	400b      	ands	r3, r1
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ce:	b002      	add	sp, #8
 80005d0:	4770      	bx	lr
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005d8:	4770      	bx	lr

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	e7fe      	b.n	80005da <HardFault_Handler>

080005dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005de:	4770      	bx	lr

080005e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e2:	f000 f905 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e6:	bd10      	pop	{r4, pc}

080005e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80005e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80005ea:	4802      	ldr	r0, [pc, #8]	; (80005f4 <DMA1_Channel2_3_IRQHandler+0xc>)
 80005ec:	f000 fa32 	bl	8000a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000244 	.word	0x20000244

080005f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005fa:	4802      	ldr	r0, [pc, #8]	; (8000604 <USART1_IRQHandler+0xc>)
 80005fc:	f000 ffe0 	bl	80015c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000288 	.word	0x20000288

08000608 <_sbrk>:
 8000608:	b510      	push	{r4, lr}
 800060a:	0003      	movs	r3, r0
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <_sbrk+0x34>)
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	2a00      	cmp	r2, #0
 8000612:	d008      	beq.n	8000626 <_sbrk+0x1e>
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <_sbrk+0x34>)
 8000616:	6810      	ldr	r0, [r2, #0]
 8000618:	18c3      	adds	r3, r0, r3
 800061a:	466a      	mov	r2, sp
 800061c:	4293      	cmp	r3, r2
 800061e:	d806      	bhi.n	800062e <_sbrk+0x26>
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <_sbrk+0x34>)
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	bd10      	pop	{r4, pc}
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <_sbrk+0x34>)
 8000628:	4905      	ldr	r1, [pc, #20]	; (8000640 <_sbrk+0x38>)
 800062a:	6011      	str	r1, [r2, #0]
 800062c:	e7f2      	b.n	8000614 <_sbrk+0xc>
 800062e:	f001 fc7f 	bl	8001f30 <__errno>
 8000632:	230c      	movs	r3, #12
 8000634:	6003      	str	r3, [r0, #0]
 8000636:	2001      	movs	r0, #1
 8000638:	4240      	negs	r0, r0
 800063a:	e7f3      	b.n	8000624 <_sbrk+0x1c>
 800063c:	20000200 	.word	0x20000200
 8000640:	20000318 	.word	0x20000318

08000644 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000644:	4770      	bx	lr
	...

08000648 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000648:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_USART1_UART_Init+0x34>)
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART1_UART_Init+0x38>)
 800064e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000650:	23e1      	movs	r3, #225	; 0xe1
 8000652:	025b      	lsls	r3, r3, #9
 8000654:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	2300      	movs	r3, #0
 8000658:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800065a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800065e:	220c      	movs	r2, #12
 8000660:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000668:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	f001 fb99 	bl	8001da0 <HAL_UART_Init>
 800066e:	2800      	cmp	r0, #0
 8000670:	d100      	bne.n	8000674 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000672:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000674:	f7ff ff96 	bl	80005a4 <Error_Handler>
}
 8000678:	e7fb      	b.n	8000672 <MX_USART1_UART_Init+0x2a>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000288 	.word	0x20000288
 8000680:	40013800 	.word	0x40013800

08000684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000684:	b510      	push	{r4, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	2214      	movs	r2, #20
 800068c:	2100      	movs	r1, #0
 800068e:	a803      	add	r0, sp, #12
 8000690:	f001 fc81 	bl	8001f96 <memset>
  if(uartHandle->Instance==USART1)
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <HAL_UART_MspInit+0x9c>)
 8000696:	6822      	ldr	r2, [r4, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d001      	beq.n	80006a0 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800069c:	b008      	add	sp, #32
 800069e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006a2:	6999      	ldr	r1, [r3, #24]
 80006a4:	2080      	movs	r0, #128	; 0x80
 80006a6:	01c0      	lsls	r0, r0, #7
 80006a8:	4301      	orrs	r1, r0
 80006aa:	6199      	str	r1, [r3, #24]
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	4002      	ands	r2, r0
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	0289      	lsls	r1, r1, #10
 80006ba:	430a      	orrs	r2, r1
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	400b      	ands	r3, r1
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d0:	3301      	adds	r3, #1
 80006d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006d4:	3b02      	subs	r3, #2
 80006d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	2090      	movs	r0, #144	; 0x90
 80006da:	a903      	add	r1, sp, #12
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	f000 fa0f 	bl	8000b00 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <HAL_UART_MspInit+0xa4>)
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_UART_MspInit+0xa8>)
 80006e6:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e8:	2300      	movs	r3, #0
 80006ea:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ec:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	60c2      	str	r2, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006f2:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006f4:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80006f6:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006f8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80006fa:	f000 f8e5 	bl	80008c8 <HAL_DMA_Init>
 80006fe:	2800      	cmp	r0, #0
 8000700:	d10b      	bne.n	800071a <HAL_UART_MspInit+0x96>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_UART_MspInit+0xa4>)
 8000704:	6723      	str	r3, [r4, #112]	; 0x70
 8000706:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	201b      	movs	r0, #27
 800070e:	f000 f881 	bl	8000814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000712:	201b      	movs	r0, #27
 8000714:	f000 f8b0 	bl	8000878 <HAL_NVIC_EnableIRQ>
}
 8000718:	e7c0      	b.n	800069c <HAL_UART_MspInit+0x18>
      Error_Handler();
 800071a:	f7ff ff43 	bl	80005a4 <Error_Handler>
 800071e:	e7f0      	b.n	8000702 <HAL_UART_MspInit+0x7e>
 8000720:	40013800 	.word	0x40013800
 8000724:	40021000 	.word	0x40021000
 8000728:	20000244 	.word	0x20000244
 800072c:	40020030 	.word	0x40020030

08000730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000732:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490e      	ldr	r1, [pc, #56]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0b      	ldr	r4, [pc, #44]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800075a:	f7ff ff73 	bl	8000644 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800075e:	f001 fbed 	bl	8001f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff fde7 	bl	8000334 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   r0, =_estack
 8000768:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000774:	08003460 	.word	0x08003460
  ldr r2, =_sbss
 8000778:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800077c:	20000314 	.word	0x20000314

08000780 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_IRQHandler>
	...

08000784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b510      	push	{r4, lr}
 8000786:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_InitTick+0x40>)
 800078a:	7819      	ldrb	r1, [r3, #0]
 800078c:	20fa      	movs	r0, #250	; 0xfa
 800078e:	0080      	lsls	r0, r0, #2
 8000790:	f7ff fccc 	bl	800012c <__udivsi3>
 8000794:	0001      	movs	r1, r0
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_InitTick+0x44>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	f7ff fcc7 	bl	800012c <__udivsi3>
 800079e:	f000 f877 	bl	8000890 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d101      	bne.n	80007ac <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	2c03      	cmp	r4, #3
 80007aa:	d901      	bls.n	80007b0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	3001      	adds	r0, #1
 80007b2:	2200      	movs	r2, #0
 80007b4:	0021      	movs	r1, r4
 80007b6:	4240      	negs	r0, r0
 80007b8:	f000 f82c 	bl	8000814 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <HAL_InitTick+0x48>)
 80007be:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	e7f3      	b.n	80007ac <HAL_InitTick+0x28>
 80007c4:	2000000c 	.word	0x2000000c
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000010 	.word	0x20000010

080007d0 <HAL_Init>:
{
 80007d0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d2:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_Init+0x1c>)
 80007d4:	6813      	ldr	r3, [r2, #0]
 80007d6:	2110      	movs	r1, #16
 80007d8:	430b      	orrs	r3, r1
 80007da:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff ffd1 	bl	8000784 <HAL_InitTick>
  HAL_MspInit();
 80007e2:	f7ff fee1 	bl	80005a8 <HAL_MspInit>
}
 80007e6:	2000      	movs	r0, #0
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007f0:	4a03      	ldr	r2, [pc, #12]	; (8000800 <HAL_IncTick+0x10>)
 80007f2:	6811      	ldr	r1, [r2, #0]
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_IncTick+0x14>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	185b      	adds	r3, r3, r1
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	4770      	bx	lr
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	2000030c 	.word	0x2000030c
 8000804:	2000000c 	.word	0x2000000c

08000808 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000808:	4b01      	ldr	r3, [pc, #4]	; (8000810 <HAL_GetTick+0x8>)
 800080a:	6818      	ldr	r0, [r3, #0]
}
 800080c:	4770      	bx	lr
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	2000030c 	.word	0x2000030c

08000814 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000814:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000816:	2800      	cmp	r0, #0
 8000818:	db14      	blt.n	8000844 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081a:	0884      	lsrs	r4, r0, #2
 800081c:	00a4      	lsls	r4, r4, #2
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_NVIC_SetPriority+0x5c>)
 8000820:	469c      	mov	ip, r3
 8000822:	4464      	add	r4, ip
 8000824:	26c0      	movs	r6, #192	; 0xc0
 8000826:	00b6      	lsls	r6, r6, #2
 8000828:	59a5      	ldr	r5, [r4, r6]
 800082a:	2203      	movs	r2, #3
 800082c:	4010      	ands	r0, r2
 800082e:	00c0      	lsls	r0, r0, #3
 8000830:	23ff      	movs	r3, #255	; 0xff
 8000832:	001a      	movs	r2, r3
 8000834:	4082      	lsls	r2, r0
 8000836:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000838:	0189      	lsls	r1, r1, #6
 800083a:	400b      	ands	r3, r1
 800083c:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083e:	432b      	orrs	r3, r5
 8000840:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000842:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	b2c0      	uxtb	r0, r0
 8000846:	220f      	movs	r2, #15
 8000848:	4002      	ands	r2, r0
 800084a:	3a08      	subs	r2, #8
 800084c:	0892      	lsrs	r2, r2, #2
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_NVIC_SetPriority+0x60>)
 8000852:	18d3      	adds	r3, r2, r3
 8000854:	69dd      	ldr	r5, [r3, #28]
 8000856:	2403      	movs	r4, #3
 8000858:	4020      	ands	r0, r4
 800085a:	00c0      	lsls	r0, r0, #3
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	0014      	movs	r4, r2
 8000860:	4084      	lsls	r4, r0
 8000862:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000864:	0189      	lsls	r1, r1, #6
 8000866:	4011      	ands	r1, r2
 8000868:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086a:	4329      	orrs	r1, r5
 800086c:	61d9      	str	r1, [r3, #28]
 800086e:	e7e8      	b.n	8000842 <HAL_NVIC_SetPriority+0x2e>
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000878:	2800      	cmp	r0, #0
 800087a:	db05      	blt.n	8000888 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087c:	231f      	movs	r3, #31
 800087e:	4018      	ands	r0, r3
 8000880:	3b1e      	subs	r3, #30
 8000882:	4083      	lsls	r3, r0
 8000884:	4a01      	ldr	r2, [pc, #4]	; (800088c <HAL_NVIC_EnableIRQ+0x14>)
 8000886:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000888:	4770      	bx	lr
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	e000e100 	.word	0xe000e100

08000890 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	1e43      	subs	r3, r0, #1
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000894:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000896:	4293      	cmp	r3, r2
 8000898:	d80e      	bhi.n	80008b8 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_SYSTICK_Config+0x30>)
 800089c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089e:	4809      	ldr	r0, [pc, #36]	; (80008c4 <HAL_SYSTICK_Config+0x34>)
 80008a0:	6a03      	ldr	r3, [r0, #32]
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	21c0      	movs	r1, #192	; 0xc0
 80008a8:	0609      	lsls	r1, r1, #24
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ae:	2300      	movs	r3, #0
 80008b0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b2:	3307      	adds	r3, #7
 80008b4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008b8:	4770      	bx	lr
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	00ffffff 	.word	0x00ffffff
 80008c0:	e000e010 	.word	0xe000e010
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80008cc:	2001      	movs	r0, #1
  if(NULL == hdma)
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d028      	beq.n	8000924 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008d2:	2521      	movs	r5, #33	; 0x21
 80008d4:	2302      	movs	r3, #2
 80008d6:	5563      	strb	r3, [r4, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80008d8:	6821      	ldr	r1, [r4, #0]
 80008da:	680b      	ldr	r3, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <HAL_DMA_Init+0x60>)
 80008de:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	68a0      	ldr	r0, [r4, #8]
 80008e4:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e6:	68e0      	ldr	r0, [r4, #12]
 80008e8:	4303      	orrs	r3, r0
 80008ea:	6920      	ldr	r0, [r4, #16]
 80008ec:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ee:	6960      	ldr	r0, [r4, #20]
 80008f0:	4303      	orrs	r3, r0
 80008f2:	69a0      	ldr	r0, [r4, #24]
 80008f4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f6:	69e0      	ldr	r0, [r4, #28]
 80008f8:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80008fa:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80008fc:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_DMA_Init+0x64>)
 8000902:	4694      	mov	ip, r2
 8000904:	4463      	add	r3, ip
 8000906:	0018      	movs	r0, r3
 8000908:	2114      	movs	r1, #20
 800090a:	f7ff fc0f 	bl	800012c <__udivsi3>
 800090e:	0080      	lsls	r0, r0, #2
 8000910:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <HAL_DMA_Init+0x68>)
 8000914:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800091a:	2201      	movs	r2, #1
 800091c:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 800091e:	321f      	adds	r2, #31
 8000920:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000922:	2000      	movs	r0, #0
}  
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	ffffc00f 	.word	0xffffc00f
 800092c:	bffdfff8 	.word	0xbffdfff8
 8000930:	40020000 	.word	0x40020000

08000934 <HAL_DMA_Start_IT>:
{
 8000934:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000936:	2420      	movs	r4, #32
 8000938:	5d04      	ldrb	r4, [r0, r4]
 800093a:	2c01      	cmp	r4, #1
 800093c:	d041      	beq.n	80009c2 <HAL_DMA_Start_IT+0x8e>
 800093e:	2420      	movs	r4, #32
 8000940:	2501      	movs	r5, #1
 8000942:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000944:	3401      	adds	r4, #1
 8000946:	5d04      	ldrb	r4, [r0, r4]
 8000948:	2c01      	cmp	r4, #1
 800094a:	d004      	beq.n	8000956 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 800094c:	2320      	movs	r3, #32
 800094e:	2200      	movs	r2, #0
 8000950:	54c2      	strb	r2, [r0, r3]
    status = HAL_BUSY;
 8000952:	2002      	movs	r0, #2
} 
 8000954:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000956:	3420      	adds	r4, #32
 8000958:	3501      	adds	r5, #1
 800095a:	5505      	strb	r5, [r0, r4]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800095c:	2400      	movs	r4, #0
 800095e:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000960:	6806      	ldr	r6, [r0, #0]
 8000962:	6835      	ldr	r5, [r6, #0]
 8000964:	3401      	adds	r4, #1
 8000966:	43a5      	bics	r5, r4
 8000968:	6035      	str	r5, [r6, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800096a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800096c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800096e:	40b4      	lsls	r4, r6
 8000970:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8000972:	6804      	ldr	r4, [r0, #0]
 8000974:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000976:	6843      	ldr	r3, [r0, #4]
 8000978:	2b10      	cmp	r3, #16
 800097a:	d012      	beq.n	80009a2 <HAL_DMA_Start_IT+0x6e>
    hdma->Instance->CPAR = SrcAddress;
 800097c:	6803      	ldr	r3, [r0, #0]
 800097e:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000980:	6803      	ldr	r3, [r0, #0]
 8000982:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000984:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000986:	2b00      	cmp	r3, #0
 8000988:	d010      	beq.n	80009ac <HAL_DMA_Start_IT+0x78>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800098a:	6802      	ldr	r2, [r0, #0]
 800098c:	6813      	ldr	r3, [r2, #0]
 800098e:	210e      	movs	r1, #14
 8000990:	430b      	orrs	r3, r1
 8000992:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000994:	6802      	ldr	r2, [r0, #0]
 8000996:	6813      	ldr	r3, [r2, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	430b      	orrs	r3, r1
 800099c:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800099e:	2000      	movs	r0, #0
 80009a0:	e7d8      	b.n	8000954 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 80009a2:	6803      	ldr	r3, [r0, #0]
 80009a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80009a6:	6803      	ldr	r3, [r0, #0]
 80009a8:	60d9      	str	r1, [r3, #12]
 80009aa:	e7eb      	b.n	8000984 <HAL_DMA_Start_IT+0x50>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80009ac:	6802      	ldr	r2, [r0, #0]
 80009ae:	6813      	ldr	r3, [r2, #0]
 80009b0:	210a      	movs	r1, #10
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009b6:	6802      	ldr	r2, [r0, #0]
 80009b8:	6813      	ldr	r3, [r2, #0]
 80009ba:	3906      	subs	r1, #6
 80009bc:	438b      	bics	r3, r1
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	e7e8      	b.n	8000994 <HAL_DMA_Start_IT+0x60>
  __HAL_LOCK(hdma);
 80009c2:	2002      	movs	r0, #2
 80009c4:	e7c6      	b.n	8000954 <HAL_DMA_Start_IT+0x20>

080009c6 <HAL_DMA_Abort>:
{
 80009c6:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c8:	2321      	movs	r3, #33	; 0x21
 80009ca:	5cc3      	ldrb	r3, [r0, r3]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d006      	beq.n	80009de <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d0:	2304      	movs	r3, #4
 80009d2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80009d4:	331c      	adds	r3, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80009da:	2001      	movs	r0, #1
}
 80009dc:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009de:	6802      	ldr	r2, [r0, #0]
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	210e      	movs	r1, #14
 80009e4:	438b      	bics	r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009e8:	6801      	ldr	r1, [r0, #0]
 80009ea:	680a      	ldr	r2, [r1, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	439a      	bics	r2, r3
 80009f0:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80009f4:	0019      	movs	r1, r3
 80009f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80009f8:	40a1      	lsls	r1, r4
 80009fa:	6051      	str	r1, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 80009fc:	2221      	movs	r2, #33	; 0x21
 80009fe:	5483      	strb	r3, [r0, r2]
  __HAL_UNLOCK(hdma);
 8000a00:	331f      	adds	r3, #31
 8000a02:	2200      	movs	r2, #0
 8000a04:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000a06:	2000      	movs	r0, #0
 8000a08:	e7e8      	b.n	80009dc <HAL_DMA_Abort+0x16>

08000a0a <HAL_DMA_Abort_IT>:
{  
 8000a0a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a0c:	2321      	movs	r3, #33	; 0x21
 8000a0e:	5cc3      	ldrb	r3, [r0, r3]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d003      	beq.n	8000a1c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a14:	2304      	movs	r3, #4
 8000a16:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
}
 8000a1a:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a1c:	6802      	ldr	r2, [r0, #0]
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	210e      	movs	r1, #14
 8000a22:	438b      	bics	r3, r1
 8000a24:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a26:	6801      	ldr	r1, [r0, #0]
 8000a28:	680a      	ldr	r2, [r1, #0]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	439a      	bics	r2, r3
 8000a2e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000a32:	0019      	movs	r1, r3
 8000a34:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000a36:	40a1      	lsls	r1, r4
 8000a38:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000a3a:	2221      	movs	r2, #33	; 0x21
 8000a3c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000a3e:	331f      	adds	r3, #31
 8000a40:	2200      	movs	r2, #0
 8000a42:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000a44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000a4a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e7e4      	b.n	8000a1a <HAL_DMA_Abort_IT+0x10>
 8000a50:	2000      	movs	r0, #0
 8000a52:	e7e2      	b.n	8000a1a <HAL_DMA_Abort_IT+0x10>

08000a54 <HAL_DMA_IRQHandler>:
{
 8000a54:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a56:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000a58:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000a5a:	6804      	ldr	r4, [r0, #0]
 8000a5c:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a5e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000a60:	2304      	movs	r3, #4
 8000a62:	408b      	lsls	r3, r1
 8000a64:	421a      	tst	r2, r3
 8000a66:	d012      	beq.n	8000a8e <HAL_DMA_IRQHandler+0x3a>
 8000a68:	076b      	lsls	r3, r5, #29
 8000a6a:	d510      	bpl.n	8000a8e <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	069b      	lsls	r3, r3, #26
 8000a70:	d403      	bmi.n	8000a7a <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	2204      	movs	r2, #4
 8000a76:	4393      	bics	r3, r2
 8000a78:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000a7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000a80:	408b      	lsls	r3, r1
 8000a82:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000a84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d000      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8000a8a:	4798      	blx	r3
}  
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a8e:	2302      	movs	r3, #2
 8000a90:	408b      	lsls	r3, r1
 8000a92:	421a      	tst	r2, r3
 8000a94:	d018      	beq.n	8000ac8 <HAL_DMA_IRQHandler+0x74>
 8000a96:	07ab      	lsls	r3, r5, #30
 8000a98:	d516      	bpl.n	8000ac8 <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	069b      	lsls	r3, r3, #26
 8000a9e:	d406      	bmi.n	8000aae <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	220a      	movs	r2, #10
 8000aa4:	4393      	bics	r3, r2
 8000aa6:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000aa8:	2321      	movs	r3, #33	; 0x21
 8000aaa:	3a09      	subs	r2, #9
 8000aac:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000aae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000ab4:	408b      	lsls	r3, r1
 8000ab6:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000ab8:	2320      	movs	r3, #32
 8000aba:	2200      	movs	r2, #0
 8000abc:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000abe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0e3      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8000ac4:	4798      	blx	r3
 8000ac6:	e7e1      	b.n	8000a8c <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ac8:	2308      	movs	r3, #8
 8000aca:	408b      	lsls	r3, r1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d0dd      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x38>
 8000ad0:	072b      	lsls	r3, r5, #28
 8000ad2:	d5db      	bpl.n	8000a8c <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	220e      	movs	r2, #14
 8000ad8:	4393      	bics	r3, r2
 8000ada:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000adc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000ade:	2301      	movs	r3, #1
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000ae4:	40a1      	lsls	r1, r4
 8000ae6:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ae8:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000aea:	2221      	movs	r2, #33	; 0x21
 8000aec:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 8000aee:	331f      	adds	r3, #31
 8000af0:	2200      	movs	r2, #0
 8000af2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000af4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0c8      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8000afa:	4798      	blx	r3
}  
 8000afc:	e7c6      	b.n	8000a8c <HAL_DMA_IRQHandler+0x38>
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	46de      	mov	lr, fp
 8000b04:	4657      	mov	r7, sl
 8000b06:	464e      	mov	r6, r9
 8000b08:	4645      	mov	r5, r8
 8000b0a:	b5e0      	push	{r5, r6, r7, lr}
 8000b0c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	680a      	ldr	r2, [r1, #0]
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	d100      	bne.n	8000b16 <HAL_GPIO_Init+0x16>
 8000b14:	e0e7      	b.n	8000ce6 <HAL_GPIO_Init+0x1e6>
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b18:	2503      	movs	r5, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1a:	24c0      	movs	r4, #192	; 0xc0
 8000b1c:	02a4      	lsls	r4, r4, #10
 8000b1e:	46a0      	mov	r8, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b20:	4c74      	ldr	r4, [pc, #464]	; (8000cf4 <HAL_GPIO_Init+0x1f4>)
 8000b22:	1904      	adds	r4, r0, r4
 8000b24:	4266      	negs	r6, r4
 8000b26:	4166      	adcs	r6, r4
 8000b28:	4274      	negs	r4, r6
 8000b2a:	9401      	str	r4, [sp, #4]
 8000b2c:	e050      	b.n	8000bd0 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 8000b2e:	6882      	ldr	r2, [r0, #8]
 8000b30:	005e      	lsls	r6, r3, #1
 8000b32:	46b3      	mov	fp, r6
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b34:	002e      	movs	r6, r5
 8000b36:	465f      	mov	r7, fp
 8000b38:	40be      	lsls	r6, r7
 8000b3a:	43b2      	bics	r2, r6
 8000b3c:	4692      	mov	sl, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b3e:	68ca      	ldr	r2, [r1, #12]
 8000b40:	40ba      	lsls	r2, r7
 8000b42:	4656      	mov	r6, sl
 8000b44:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8000b46:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b48:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4a:	464e      	mov	r6, r9
 8000b4c:	43b2      	bics	r2, r6
 8000b4e:	4691      	mov	r9, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b50:	684a      	ldr	r2, [r1, #4]
 8000b52:	0912      	lsrs	r2, r2, #4
 8000b54:	2601      	movs	r6, #1
 8000b56:	4032      	ands	r2, r6
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	464e      	mov	r6, r9
 8000b5c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000b5e:	6042      	str	r2, [r0, #4]
 8000b60:	e040      	b.n	8000be4 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b62:	2600      	movs	r6, #0
 8000b64:	46b1      	mov	r9, r6
 8000b66:	464f      	mov	r7, r9
 8000b68:	465e      	mov	r6, fp
 8000b6a:	40b7      	lsls	r7, r6
 8000b6c:	46b9      	mov	r9, r7
 8000b6e:	4657      	mov	r7, sl
 8000b70:	464e      	mov	r6, r9
 8000b72:	4337      	orrs	r7, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b74:	6097      	str	r7, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b76:	4a60      	ldr	r2, [pc, #384]	; (8000cf8 <HAL_GPIO_Init+0x1f8>)
 8000b78:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8000b7a:	43e6      	mvns	r6, r4
 8000b7c:	46b1      	mov	r9, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b7e:	684e      	ldr	r6, [r1, #4]
 8000b80:	03f6      	lsls	r6, r6, #15
 8000b82:	d500      	bpl.n	8000b86 <HAL_GPIO_Init+0x86>
 8000b84:	e0a7      	b.n	8000cd6 <HAL_GPIO_Init+0x1d6>
        temp &= ~(iocurrent);
 8000b86:	464e      	mov	r6, r9
 8000b88:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000b8a:	4e5b      	ldr	r6, [pc, #364]	; (8000cf8 <HAL_GPIO_Init+0x1f8>)
 8000b8c:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 8000b8e:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b90:	684e      	ldr	r6, [r1, #4]
 8000b92:	03b6      	lsls	r6, r6, #14
 8000b94:	d500      	bpl.n	8000b98 <HAL_GPIO_Init+0x98>
 8000b96:	e0a0      	b.n	8000cda <HAL_GPIO_Init+0x1da>
        temp &= ~(iocurrent);
 8000b98:	464e      	mov	r6, r9
 8000b9a:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000b9c:	4e56      	ldr	r6, [pc, #344]	; (8000cf8 <HAL_GPIO_Init+0x1f8>)
 8000b9e:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba0:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ba2:	684e      	ldr	r6, [r1, #4]
 8000ba4:	02f6      	lsls	r6, r6, #11
 8000ba6:	d500      	bpl.n	8000baa <HAL_GPIO_Init+0xaa>
 8000ba8:	e099      	b.n	8000cde <HAL_GPIO_Init+0x1de>
        temp &= ~(iocurrent);
 8000baa:	464e      	mov	r6, r9
 8000bac:	4032      	ands	r2, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000bae:	4e52      	ldr	r6, [pc, #328]	; (8000cf8 <HAL_GPIO_Init+0x1f8>)
 8000bb0:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8000bb2:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb4:	684e      	ldr	r6, [r1, #4]
 8000bb6:	02b6      	lsls	r6, r6, #10
 8000bb8:	d500      	bpl.n	8000bbc <HAL_GPIO_Init+0xbc>
 8000bba:	e092      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
        temp &= ~(iocurrent);
 8000bbc:	464c      	mov	r4, r9
 8000bbe:	4022      	ands	r2, r4
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000bc0:	4c4d      	ldr	r4, [pc, #308]	; (8000cf8 <HAL_GPIO_Init+0x1f8>)
 8000bc2:	60e2      	str	r2, [r4, #12]
      }
    }

    position++;
 8000bc4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	680a      	ldr	r2, [r1, #0]
 8000bc8:	0014      	movs	r4, r2
 8000bca:	40dc      	lsrs	r4, r3
 8000bcc:	d100      	bne.n	8000bd0 <HAL_GPIO_Init+0xd0>
 8000bce:	e08a      	b.n	8000ce6 <HAL_GPIO_Init+0x1e6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd0:	2401      	movs	r4, #1
 8000bd2:	409c      	lsls	r4, r3
 8000bd4:	46a1      	mov	r9, r4
 8000bd6:	4014      	ands	r4, r2
    if (iocurrent != 0x00u)
 8000bd8:	d0f4      	beq.n	8000bc4 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bda:	684a      	ldr	r2, [r1, #4]
 8000bdc:	402a      	ands	r2, r5
 8000bde:	3a01      	subs	r2, #1
 8000be0:	2a01      	cmp	r2, #1
 8000be2:	d9a4      	bls.n	8000b2e <HAL_GPIO_Init+0x2e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be4:	684a      	ldr	r2, [r1, #4]
 8000be6:	402a      	ands	r2, r5
 8000be8:	2a03      	cmp	r2, #3
 8000bea:	d02a      	beq.n	8000c42 <HAL_GPIO_Init+0x142>
        temp = GPIOx->PUPDR;
 8000bec:	68c2      	ldr	r2, [r0, #12]
 8000bee:	005f      	lsls	r7, r3, #1
 8000bf0:	46ba      	mov	sl, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bf2:	002f      	movs	r7, r5
 8000bf4:	4656      	mov	r6, sl
 8000bf6:	40b7      	lsls	r7, r6
 8000bf8:	43ba      	bics	r2, r7
 8000bfa:	4691      	mov	r9, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfc:	688a      	ldr	r2, [r1, #8]
 8000bfe:	4656      	mov	r6, sl
 8000c00:	40b2      	lsls	r2, r6
 8000c02:	464e      	mov	r6, r9
 8000c04:	4332      	orrs	r2, r6
        GPIOx->PUPDR = temp;
 8000c06:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c08:	684a      	ldr	r2, [r1, #4]
 8000c0a:	402a      	ands	r2, r5
 8000c0c:	2a02      	cmp	r2, #2
 8000c0e:	d118      	bne.n	8000c42 <HAL_GPIO_Init+0x142>
        temp = GPIOx->AFR[position >> 3u];
 8000c10:	08da      	lsrs	r2, r3, #3
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	1882      	adds	r2, r0, r2
 8000c16:	6a16      	ldr	r6, [r2, #32]
 8000c18:	46b2      	mov	sl, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c1a:	2607      	movs	r6, #7
 8000c1c:	401e      	ands	r6, r3
 8000c1e:	00b6      	lsls	r6, r6, #2
 8000c20:	46b1      	mov	r9, r6
 8000c22:	260f      	movs	r6, #15
 8000c24:	464f      	mov	r7, r9
 8000c26:	40be      	lsls	r6, r7
 8000c28:	46b3      	mov	fp, r6
 8000c2a:	4656      	mov	r6, sl
 8000c2c:	465f      	mov	r7, fp
 8000c2e:	43be      	bics	r6, r7
 8000c30:	46b2      	mov	sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c32:	690e      	ldr	r6, [r1, #16]
 8000c34:	464f      	mov	r7, r9
 8000c36:	40be      	lsls	r6, r7
 8000c38:	46b1      	mov	r9, r6
 8000c3a:	4656      	mov	r6, sl
 8000c3c:	464f      	mov	r7, r9
 8000c3e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000c40:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8000c42:	6806      	ldr	r6, [r0, #0]
 8000c44:	005f      	lsls	r7, r3, #1
 8000c46:	46ba      	mov	sl, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c48:	002f      	movs	r7, r5
 8000c4a:	4652      	mov	r2, sl
 8000c4c:	4097      	lsls	r7, r2
 8000c4e:	0032      	movs	r2, r6
 8000c50:	43ba      	bics	r2, r7
 8000c52:	4691      	mov	r9, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c54:	684a      	ldr	r2, [r1, #4]
 8000c56:	402a      	ands	r2, r5
 8000c58:	4657      	mov	r7, sl
 8000c5a:	40ba      	lsls	r2, r7
 8000c5c:	464f      	mov	r7, r9
 8000c5e:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000c60:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c62:	684a      	ldr	r2, [r1, #4]
 8000c64:	4647      	mov	r7, r8
 8000c66:	423a      	tst	r2, r7
 8000c68:	d0ac      	beq.n	8000bc4 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4e24      	ldr	r6, [pc, #144]	; (8000cfc <HAL_GPIO_Init+0x1fc>)
 8000c6c:	69b2      	ldr	r2, [r6, #24]
 8000c6e:	2701      	movs	r7, #1
 8000c70:	433a      	orrs	r2, r7
 8000c72:	61b2      	str	r2, [r6, #24]
 8000c74:	69b2      	ldr	r2, [r6, #24]
 8000c76:	403a      	ands	r2, r7
 8000c78:	9203      	str	r2, [sp, #12]
 8000c7a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c7c:	089a      	lsrs	r2, r3, #2
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	4e1f      	ldr	r6, [pc, #124]	; (8000d00 <HAL_GPIO_Init+0x200>)
 8000c82:	46b1      	mov	r9, r6
 8000c84:	444a      	add	r2, r9
 8000c86:	6896      	ldr	r6, [r2, #8]
 8000c88:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c8a:	002f      	movs	r7, r5
 8000c8c:	401f      	ands	r7, r3
 8000c8e:	00be      	lsls	r6, r7, #2
 8000c90:	46b3      	mov	fp, r6
 8000c92:	260f      	movs	r6, #15
 8000c94:	0037      	movs	r7, r6
 8000c96:	465e      	mov	r6, fp
 8000c98:	40b7      	lsls	r7, r6
 8000c9a:	46ba      	mov	sl, r7
 8000c9c:	464f      	mov	r7, r9
 8000c9e:	4656      	mov	r6, sl
 8000ca0:	43b7      	bics	r7, r6
 8000ca2:	46ba      	mov	sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca4:	2690      	movs	r6, #144	; 0x90
 8000ca6:	05f6      	lsls	r6, r6, #23
 8000ca8:	42b0      	cmp	r0, r6
 8000caa:	d100      	bne.n	8000cae <HAL_GPIO_Init+0x1ae>
 8000cac:	e759      	b.n	8000b62 <HAL_GPIO_Init+0x62>
 8000cae:	4e15      	ldr	r6, [pc, #84]	; (8000d04 <HAL_GPIO_Init+0x204>)
 8000cb0:	42b0      	cmp	r0, r6
 8000cb2:	d00a      	beq.n	8000cca <HAL_GPIO_Init+0x1ca>
 8000cb4:	4e14      	ldr	r6, [pc, #80]	; (8000d08 <HAL_GPIO_Init+0x208>)
 8000cb6:	42b0      	cmp	r0, r6
 8000cb8:	d00a      	beq.n	8000cd0 <HAL_GPIO_Init+0x1d0>
 8000cba:	9e01      	ldr	r6, [sp, #4]
 8000cbc:	2701      	movs	r7, #1
 8000cbe:	43be      	bics	r6, r7
 8000cc0:	46b1      	mov	r9, r6
 8000cc2:	2605      	movs	r6, #5
 8000cc4:	46b4      	mov	ip, r6
 8000cc6:	44e1      	add	r9, ip
 8000cc8:	e74d      	b.n	8000b66 <HAL_GPIO_Init+0x66>
 8000cca:	2601      	movs	r6, #1
 8000ccc:	46b1      	mov	r9, r6
 8000cce:	e74a      	b.n	8000b66 <HAL_GPIO_Init+0x66>
 8000cd0:	2602      	movs	r6, #2
 8000cd2:	46b1      	mov	r9, r6
 8000cd4:	e747      	b.n	8000b66 <HAL_GPIO_Init+0x66>
          temp |= iocurrent;
 8000cd6:	4322      	orrs	r2, r4
 8000cd8:	e757      	b.n	8000b8a <HAL_GPIO_Init+0x8a>
          temp |= iocurrent;
 8000cda:	4322      	orrs	r2, r4
 8000cdc:	e75e      	b.n	8000b9c <HAL_GPIO_Init+0x9c>
          temp |= iocurrent;
 8000cde:	4322      	orrs	r2, r4
 8000ce0:	e765      	b.n	8000bae <HAL_GPIO_Init+0xae>
          temp |= iocurrent;
 8000ce2:	4322      	orrs	r2, r4
 8000ce4:	e76c      	b.n	8000bc0 <HAL_GPIO_Init+0xc0>
  } 
}
 8000ce6:	b005      	add	sp, #20
 8000ce8:	bc3c      	pop	{r2, r3, r4, r5}
 8000cea:	4690      	mov	r8, r2
 8000cec:	4699      	mov	r9, r3
 8000cee:	46a2      	mov	sl, r4
 8000cf0:	46ab      	mov	fp, r5
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf4:	b7fff400 	.word	0xb7fff400
 8000cf8:	40010400 	.word	0x40010400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000
 8000d04:	48000400 	.word	0x48000400
 8000d08:	48000800 	.word	0x48000800

08000d0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	d101      	bne.n	8000d14 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d10:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000d12:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d14:	6181      	str	r1, [r0, #24]
 8000d16:	e7fc      	b.n	8000d12 <HAL_GPIO_WritePin+0x6>

08000d18 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d18:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	400b      	ands	r3, r1
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	4391      	bics	r1, r2
 8000d22:	4319      	orrs	r1, r3
 8000d24:	6181      	str	r1, [r0, #24]
}
 8000d26:	4770      	bx	lr

08000d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	46ce      	mov	lr, r9
 8000d2c:	4647      	mov	r7, r8
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b083      	sub	sp, #12
 8000d32:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d34:	d100      	bne.n	8000d38 <HAL_RCC_OscConfig+0x10>
 8000d36:	e24c      	b.n	80011d2 <HAL_RCC_OscConfig+0x4aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d38:	6803      	ldr	r3, [r0, #0]
 8000d3a:	07db      	lsls	r3, r3, #31
 8000d3c:	d527      	bpl.n	8000d8e <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d3e:	4bb7      	ldr	r3, [pc, #732]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	230c      	movs	r3, #12
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d018      	beq.n	8000d7c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d4a:	4bb4      	ldr	r3, [pc, #720]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	230c      	movs	r3, #12
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d00e      	beq.n	8000d74 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d56:	6863      	ldr	r3, [r4, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d03e      	beq.n	8000dda <HAL_RCC_OscConfig+0xb2>
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d155      	bne.n	8000e0c <HAL_RCC_OscConfig+0xe4>
 8000d60:	4bae      	ldr	r3, [pc, #696]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	49ae      	ldr	r1, [pc, #696]	; (8001020 <HAL_RCC_OscConfig+0x2f8>)
 8000d66:	400a      	ands	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	49ad      	ldr	r1, [pc, #692]	; (8001024 <HAL_RCC_OscConfig+0x2fc>)
 8000d6e:	400a      	ands	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e038      	b.n	8000de6 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d74:	4ba9      	ldr	r3, [pc, #676]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	03db      	lsls	r3, r3, #15
 8000d7a:	d5ec      	bpl.n	8000d56 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7c:	4ba7      	ldr	r3, [pc, #668]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	039b      	lsls	r3, r3, #14
 8000d82:	d504      	bpl.n	8000d8e <HAL_RCC_OscConfig+0x66>
        return HAL_ERROR;
 8000d84:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d86:	6863      	ldr	r3, [r4, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d100      	bne.n	8000d8e <HAL_RCC_OscConfig+0x66>
 8000d8c:	e222      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	079b      	lsls	r3, r3, #30
 8000d92:	d578      	bpl.n	8000e86 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d94:	4ba1      	ldr	r3, [pc, #644]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	220c      	movs	r2, #12
 8000d9a:	421a      	tst	r2, r3
 8000d9c:	d062      	beq.n	8000e64 <HAL_RCC_OscConfig+0x13c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d9e:	4b9f      	ldr	r3, [pc, #636]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	230c      	movs	r3, #12
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d058      	beq.n	8000e5c <HAL_RCC_OscConfig+0x134>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000daa:	68e3      	ldr	r3, [r4, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <HAL_RCC_OscConfig+0x8a>
 8000db0:	e08c      	b.n	8000ecc <HAL_RCC_OscConfig+0x1a4>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db2:	4a9a      	ldr	r2, [pc, #616]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000db4:	6813      	ldr	r3, [r2, #0]
 8000db6:	2101      	movs	r1, #1
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fd24 	bl	8000808 <HAL_GetTick>
 8000dc0:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc2:	4e96      	ldr	r6, [pc, #600]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000dc4:	2502      	movs	r5, #2
 8000dc6:	6833      	ldr	r3, [r6, #0]
 8000dc8:	421d      	tst	r5, r3
 8000dca:	d176      	bne.n	8000eba <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fd1c 	bl	8000808 <HAL_GetTick>
 8000dd0:	1bc0      	subs	r0, r0, r7
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9f7      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	e1fc      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dda:	4a90      	ldr	r2, [pc, #576]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000ddc:	6811      	ldr	r1, [r2, #0]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	430b      	orrs	r3, r1
 8000de4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de6:	6863      	ldr	r3, [r4, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d027      	beq.n	8000e3c <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8000dec:	f7ff fd0c 	bl	8000808 <HAL_GetTick>
 8000df0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	4e8a      	ldr	r6, [pc, #552]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000df4:	2580      	movs	r5, #128	; 0x80
 8000df6:	02ad      	lsls	r5, r5, #10
 8000df8:	6833      	ldr	r3, [r6, #0]
 8000dfa:	422b      	tst	r3, r5
 8000dfc:	d1c7      	bne.n	8000d8e <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fd03 	bl	8000808 <HAL_GetTick>
 8000e02:	1bc0      	subs	r0, r0, r7
 8000e04:	2864      	cmp	r0, #100	; 0x64
 8000e06:	d9f7      	bls.n	8000df8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000e08:	2003      	movs	r0, #3
 8000e0a:	e1e3      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d009      	beq.n	8000e24 <HAL_RCC_OscConfig+0xfc>
 8000e10:	4b82      	ldr	r3, [pc, #520]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4982      	ldr	r1, [pc, #520]	; (8001020 <HAL_RCC_OscConfig+0x2f8>)
 8000e16:	400a      	ands	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4981      	ldr	r1, [pc, #516]	; (8001024 <HAL_RCC_OscConfig+0x2fc>)
 8000e1e:	400a      	ands	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e7e0      	b.n	8000de6 <HAL_RCC_OscConfig+0xbe>
 8000e24:	4b7d      	ldr	r3, [pc, #500]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000e26:	6819      	ldr	r1, [r3, #0]
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	02d2      	lsls	r2, r2, #11
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	0252      	lsls	r2, r2, #9
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e7d4      	b.n	8000de6 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fce4 	bl	8000808 <HAL_GetTick>
 8000e40:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	4e76      	ldr	r6, [pc, #472]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000e44:	2580      	movs	r5, #128	; 0x80
 8000e46:	02ad      	lsls	r5, r5, #10
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	422b      	tst	r3, r5
 8000e4c:	d09f      	beq.n	8000d8e <HAL_RCC_OscConfig+0x66>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4e:	f7ff fcdb 	bl	8000808 <HAL_GetTick>
 8000e52:	1bc0      	subs	r0, r0, r7
 8000e54:	2864      	cmp	r0, #100	; 0x64
 8000e56:	d9f7      	bls.n	8000e48 <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
 8000e58:	2003      	movs	r0, #3
 8000e5a:	e1bb      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e5c:	4b6f      	ldr	r3, [pc, #444]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	03db      	lsls	r3, r3, #15
 8000e62:	d4a2      	bmi.n	8000daa <HAL_RCC_OscConfig+0x82>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e64:	4b6d      	ldr	r3, [pc, #436]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	079b      	lsls	r3, r3, #30
 8000e6a:	d504      	bpl.n	8000e76 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000e6c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	68e3      	ldr	r3, [r4, #12]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d000      	beq.n	8000e76 <HAL_RCC_OscConfig+0x14e>
 8000e74:	e1ae      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	4969      	ldr	r1, [pc, #420]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000e78:	680a      	ldr	r2, [r1, #0]
 8000e7a:	6923      	ldr	r3, [r4, #16]
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	20f8      	movs	r0, #248	; 0xf8
 8000e80:	4382      	bics	r2, r0
 8000e82:	4313      	orrs	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	071b      	lsls	r3, r3, #28
 8000e8a:	d547      	bpl.n	8000f1c <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8c:	69e3      	ldr	r3, [r4, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d030      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x1cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e92:	4a62      	ldr	r2, [pc, #392]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000e94:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e96:	2101      	movs	r1, #1
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9c:	f7ff fcb4 	bl	8000808 <HAL_GetTick>
 8000ea0:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea2:	4e5e      	ldr	r6, [pc, #376]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000ea4:	2502      	movs	r5, #2
 8000ea6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000ea8:	421d      	tst	r5, r3
 8000eaa:	d137      	bne.n	8000f1c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eac:	f7ff fcac 	bl	8000808 <HAL_GetTick>
 8000eb0:	1bc0      	subs	r0, r0, r7
 8000eb2:	2802      	cmp	r0, #2
 8000eb4:	d9f7      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	e18c      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eba:	4958      	ldr	r1, [pc, #352]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000ebc:	680a      	ldr	r2, [r1, #0]
 8000ebe:	6923      	ldr	r3, [r4, #16]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	20f8      	movs	r0, #248	; 0xf8
 8000ec4:	4382      	bics	r2, r0
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
 8000eca:	e7dc      	b.n	8000e86 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000ecc:	4a53      	ldr	r2, [pc, #332]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438b      	bics	r3, r1
 8000ed4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fc97 	bl	8000808 <HAL_GetTick>
 8000eda:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000edc:	4e4f      	ldr	r6, [pc, #316]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000ede:	2502      	movs	r5, #2
 8000ee0:	6833      	ldr	r3, [r6, #0]
 8000ee2:	421d      	tst	r5, r3
 8000ee4:	d0cf      	beq.n	8000e86 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc8f 	bl	8000808 <HAL_GetTick>
 8000eea:	1bc0      	subs	r0, r0, r7
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9f7      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	e16f      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef4:	4a49      	ldr	r2, [pc, #292]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000ef6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000ef8:	2101      	movs	r1, #1
 8000efa:	438b      	bics	r3, r1
 8000efc:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fc83 	bl	8000808 <HAL_GetTick>
 8000f02:	0007      	movs	r7, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f04:	4e45      	ldr	r6, [pc, #276]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000f06:	2502      	movs	r5, #2
 8000f08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000f0a:	421d      	tst	r5, r3
 8000f0c:	d006      	beq.n	8000f1c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fc7b 	bl	8000808 <HAL_GetTick>
 8000f12:	1bc0      	subs	r0, r0, r7
 8000f14:	2802      	cmp	r0, #2
 8000f16:	d9f7      	bls.n	8000f08 <HAL_RCC_OscConfig+0x1e0>
        {
          return HAL_TIMEOUT;
 8000f18:	2003      	movs	r0, #3
 8000f1a:	e15b      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	075b      	lsls	r3, r3, #29
 8000f20:	d400      	bmi.n	8000f24 <HAL_RCC_OscConfig+0x1fc>
 8000f22:	e088      	b.n	8001036 <HAL_RCC_OscConfig+0x30e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f24:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000f26:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	d40b      	bmi.n	8000f48 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	4a3a      	ldr	r2, [pc, #232]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000f32:	69d1      	ldr	r1, [r2, #28]
 8000f34:	2080      	movs	r0, #128	; 0x80
 8000f36:	0540      	lsls	r0, r0, #21
 8000f38:	4301      	orrs	r1, r0
 8000f3a:	61d1      	str	r1, [r2, #28]
 8000f3c:	69d3      	ldr	r3, [r2, #28]
 8000f3e:	4003      	ands	r3, r0
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f44:	2301      	movs	r3, #1
 8000f46:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	4b37      	ldr	r3, [pc, #220]	; (8001028 <HAL_RCC_OscConfig+0x300>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	d50e      	bpl.n	8000f6e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	68a3      	ldr	r3, [r4, #8]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d021      	beq.n	8000f9a <HAL_RCC_OscConfig+0x272>
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d138      	bne.n	8000fcc <HAL_RCC_OscConfig+0x2a4>
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	438a      	bics	r2, r1
 8000f62:	621a      	str	r2, [r3, #32]
 8000f64:	6a1a      	ldr	r2, [r3, #32]
 8000f66:	3103      	adds	r1, #3
 8000f68:	438a      	bics	r2, r1
 8000f6a:	621a      	str	r2, [r3, #32]
 8000f6c:	e01a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x27c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6e:	4a2e      	ldr	r2, [pc, #184]	; (8001028 <HAL_RCC_OscConfig+0x300>)
 8000f70:	6811      	ldr	r1, [r2, #0]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f7a:	f7ff fc45 	bl	8000808 <HAL_GetTick>
 8000f7e:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f80:	4f29      	ldr	r7, [pc, #164]	; (8001028 <HAL_RCC_OscConfig+0x300>)
 8000f82:	2680      	movs	r6, #128	; 0x80
 8000f84:	0076      	lsls	r6, r6, #1
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	4233      	tst	r3, r6
 8000f8a:	d1e1      	bne.n	8000f50 <HAL_RCC_OscConfig+0x228>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8c:	f7ff fc3c 	bl	8000808 <HAL_GetTick>
 8000f90:	1b40      	subs	r0, r0, r5
 8000f92:	2864      	cmp	r0, #100	; 0x64
 8000f94:	d9f7      	bls.n	8000f86 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8000f96:	2003      	movs	r0, #3
 8000f98:	e11c      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000f9c:	6a13      	ldr	r3, [r2, #32]
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa4:	68a3      	ldr	r3, [r4, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d026      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fc2d 	bl	8000808 <HAL_GetTick>
 8000fae:	4681      	mov	r9, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb0:	4f1a      	ldr	r7, [pc, #104]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000fb2:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb4:	4d1d      	ldr	r5, [pc, #116]	; (800102c <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	421e      	tst	r6, r3
 8000fba:	d139      	bne.n	8001030 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fc24 	bl	8000808 <HAL_GetTick>
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	1ac0      	subs	r0, r0, r3
 8000fc4:	42a8      	cmp	r0, r5
 8000fc6:	d9f6      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	e103      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d009      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x2bc>
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	438a      	bics	r2, r1
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	6a1a      	ldr	r2, [r3, #32]
 8000fdc:	3103      	adds	r1, #3
 8000fde:	438a      	bics	r2, r1
 8000fe0:	621a      	str	r2, [r3, #32]
 8000fe2:	e7df      	b.n	8000fa4 <HAL_RCC_OscConfig+0x27c>
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8000fe6:	6a1a      	ldr	r2, [r3, #32]
 8000fe8:	2104      	movs	r1, #4
 8000fea:	430a      	orrs	r2, r1
 8000fec:	621a      	str	r2, [r3, #32]
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	3903      	subs	r1, #3
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	621a      	str	r2, [r3, #32]
 8000ff6:	e7d5      	b.n	8000fa4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc06 	bl	8000808 <HAL_GetTick>
 8000ffc:	4681      	mov	r9, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffe:	4f07      	ldr	r7, [pc, #28]	; (800101c <HAL_RCC_OscConfig+0x2f4>)
 8001000:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	4d0a      	ldr	r5, [pc, #40]	; (800102c <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	421e      	tst	r6, r3
 8001008:	d012      	beq.n	8001030 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff fbfd 	bl	8000808 <HAL_GetTick>
 800100e:	464b      	mov	r3, r9
 8001010:	1ac0      	subs	r0, r0, r3
 8001012:	42a8      	cmp	r0, r5
 8001014:	d9f6      	bls.n	8001004 <HAL_RCC_OscConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8001016:	2003      	movs	r0, #3
 8001018:	e0dc      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40021000 	.word	0x40021000
 8001020:	fffeffff 	.word	0xfffeffff
 8001024:	fffbffff 	.word	0xfffbffff
 8001028:	40007000 	.word	0x40007000
 800102c:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001030:	4643      	mov	r3, r8
 8001032:	2b01      	cmp	r3, #1
 8001034:	d037      	beq.n	80010a6 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	06db      	lsls	r3, r3, #27
 800103a:	d510      	bpl.n	800105e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800103c:	6963      	ldr	r3, [r4, #20]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d037      	beq.n	80010b2 <HAL_RCC_OscConfig+0x38a>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001042:	3305      	adds	r3, #5
 8001044:	d156      	bne.n	80010f4 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001046:	4a67      	ldr	r2, [pc, #412]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 8001048:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800104a:	2104      	movs	r1, #4
 800104c:	438b      	bics	r3, r1
 800104e:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001050:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001052:	69a3      	ldr	r3, [r4, #24]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	20f8      	movs	r0, #248	; 0xf8
 8001058:	4381      	bics	r1, r0
 800105a:	430b      	orrs	r3, r1
 800105c:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105e:	6a23      	ldr	r3, [r4, #32]
        }
      }
    }
  }

  return HAL_OK;
 8001060:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <HAL_RCC_OscConfig+0x340>
 8001066:	e0b5      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001068:	4a5e      	ldr	r2, [pc, #376]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 800106a:	6851      	ldr	r1, [r2, #4]
 800106c:	220c      	movs	r2, #12
 800106e:	400a      	ands	r2, r1
 8001070:	2a08      	cmp	r2, #8
 8001072:	d100      	bne.n	8001076 <HAL_RCC_OscConfig+0x34e>
 8001074:	e093      	b.n	800119e <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001076:	2b02      	cmp	r3, #2
 8001078:	d054      	beq.n	8001124 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_DISABLE();
 800107a:	4a5a      	ldr	r2, [pc, #360]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	495a      	ldr	r1, [pc, #360]	; (80011e8 <HAL_RCC_OscConfig+0x4c0>)
 8001080:	400b      	ands	r3, r1
 8001082:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001084:	f7ff fbc0 	bl	8000808 <HAL_GetTick>
 8001088:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108a:	4d56      	ldr	r5, [pc, #344]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 800108c:	2480      	movs	r4, #128	; 0x80
 800108e:	04a4      	lsls	r4, r4, #18
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	4223      	tst	r3, r4
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x370>
 8001096:	e080      	b.n	800119a <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001098:	f7ff fbb6 	bl	8000808 <HAL_GetTick>
 800109c:	1b80      	subs	r0, r0, r6
 800109e:	2802      	cmp	r0, #2
 80010a0:	d9f6      	bls.n	8001090 <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 80010a2:	2003      	movs	r0, #3
 80010a4:	e096      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 80010a8:	69d3      	ldr	r3, [r2, #28]
 80010aa:	4950      	ldr	r1, [pc, #320]	; (80011ec <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	400b      	ands	r3, r1
 80010ae:	61d3      	str	r3, [r2, #28]
 80010b0:	e7c1      	b.n	8001036 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80010b2:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 80010b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b6:	2104      	movs	r1, #4
 80010b8:	430a      	orrs	r2, r1
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80010bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010be:	3903      	subs	r1, #3
 80010c0:	430a      	orrs	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80010c4:	f7ff fba0 	bl	8000808 <HAL_GetTick>
 80010c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010ca:	4e46      	ldr	r6, [pc, #280]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 80010cc:	2502      	movs	r5, #2
 80010ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80010d0:	421d      	tst	r5, r3
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010d4:	f7ff fb98 	bl	8000808 <HAL_GetTick>
 80010d8:	1bc0      	subs	r0, r0, r7
 80010da:	2802      	cmp	r0, #2
 80010dc:	d9f7      	bls.n	80010ce <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 80010de:	2003      	movs	r0, #3
 80010e0:	e078      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010e2:	4940      	ldr	r1, [pc, #256]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 80010e4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80010e6:	69a3      	ldr	r3, [r4, #24]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	20f8      	movs	r0, #248	; 0xf8
 80010ec:	4382      	bics	r2, r0
 80010ee:	4313      	orrs	r3, r2
 80010f0:	634b      	str	r3, [r1, #52]	; 0x34
 80010f2:	e7b4      	b.n	800105e <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI14ADC_DISABLE();
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 80010f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f8:	2104      	movs	r1, #4
 80010fa:	430a      	orrs	r2, r1
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80010fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001100:	3903      	subs	r1, #3
 8001102:	438a      	bics	r2, r1
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001106:	f7ff fb7f 	bl	8000808 <HAL_GetTick>
 800110a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800110c:	4e35      	ldr	r6, [pc, #212]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 800110e:	2502      	movs	r5, #2
 8001110:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001112:	421d      	tst	r5, r3
 8001114:	d0a3      	beq.n	800105e <HAL_RCC_OscConfig+0x336>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001116:	f7ff fb77 	bl	8000808 <HAL_GetTick>
 800111a:	1bc0      	subs	r0, r0, r7
 800111c:	2802      	cmp	r0, #2
 800111e:	d9f7      	bls.n	8001110 <HAL_RCC_OscConfig+0x3e8>
          return HAL_TIMEOUT;
 8001120:	2003      	movs	r0, #3
 8001122:	e057      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_DISABLE();
 8001124:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	492f      	ldr	r1, [pc, #188]	; (80011e8 <HAL_RCC_OscConfig+0x4c0>)
 800112a:	400b      	ands	r3, r1
 800112c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800112e:	f7ff fb6b 	bl	8000808 <HAL_GetTick>
 8001132:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001134:	4e2b      	ldr	r6, [pc, #172]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 8001136:	2580      	movs	r5, #128	; 0x80
 8001138:	04ad      	lsls	r5, r5, #18
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	422b      	tst	r3, r5
 800113e:	d006      	beq.n	800114e <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001140:	f7ff fb62 	bl	8000808 <HAL_GetTick>
 8001144:	1bc0      	subs	r0, r0, r7
 8001146:	2802      	cmp	r0, #2
 8001148:	d9f7      	bls.n	800113a <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 800114a:	2003      	movs	r0, #3
 800114c:	e042      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 8001150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001152:	210f      	movs	r1, #15
 8001154:	438a      	bics	r2, r1
 8001156:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001158:	430a      	orrs	r2, r1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
 800115c:	6859      	ldr	r1, [r3, #4]
 800115e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001160:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001162:	4302      	orrs	r2, r0
 8001164:	4822      	ldr	r0, [pc, #136]	; (80011f0 <HAL_RCC_OscConfig+0x4c8>)
 8001166:	4001      	ands	r1, r0
 8001168:	430a      	orrs	r2, r1
 800116a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0452      	lsls	r2, r2, #17
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001176:	f7ff fb47 	bl	8000808 <HAL_GetTick>
 800117a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800117c:	4d19      	ldr	r5, [pc, #100]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 800117e:	2480      	movs	r4, #128	; 0x80
 8001180:	04a4      	lsls	r4, r4, #18
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	4223      	tst	r3, r4
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff fb3e 	bl	8000808 <HAL_GetTick>
 800118c:	1b80      	subs	r0, r0, r6
 800118e:	2802      	cmp	r0, #2
 8001190:	d9f7      	bls.n	8001182 <HAL_RCC_OscConfig+0x45a>
            return HAL_TIMEOUT;
 8001192:	2003      	movs	r0, #3
 8001194:	e01e      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
  return HAL_OK;
 8001196:	2000      	movs	r0, #0
 8001198:	e01c      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
 800119a:	2000      	movs	r0, #0
 800119c:	e01a      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d01d      	beq.n	80011de <HAL_RCC_OscConfig+0x4b6>
        pll_config  = RCC->CFGR;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_RCC_OscConfig+0x4bc>)
 80011a4:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80011a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	4013      	ands	r3, r2
          return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d10e      	bne.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011b6:	230f      	movs	r3, #15
 80011b8:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011bc:	428b      	cmp	r3, r1
 80011be:	d109      	bne.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011c0:	20f0      	movs	r0, #240	; 0xf0
 80011c2:	0380      	lsls	r0, r0, #14
 80011c4:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011c8:	1a10      	subs	r0, r2, r0
 80011ca:	1e42      	subs	r2, r0, #1
 80011cc:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 80011ce:	b2c0      	uxtb	r0, r0
 80011d0:	e000      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
 80011d2:	2001      	movs	r0, #1
}
 80011d4:	b003      	add	sp, #12
 80011d6:	bc0c      	pop	{r2, r3}
 80011d8:	4690      	mov	r8, r2
 80011da:	4699      	mov	r9, r3
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80011de:	2001      	movs	r0, #1
 80011e0:	e7f8      	b.n	80011d4 <HAL_RCC_OscConfig+0x4ac>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40021000 	.word	0x40021000
 80011e8:	feffffff 	.word	0xfeffffff
 80011ec:	efffffff 	.word	0xefffffff
 80011f0:	ffc2ffff 	.word	0xffc2ffff

080011f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f4:	b530      	push	{r4, r5, lr}
 80011f6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80011f8:	aa04      	add	r2, sp, #16
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_RCC_GetSysClockFreq+0x64>)
 80011fc:	0018      	movs	r0, r3
 80011fe:	c832      	ldmia	r0!, {r1, r4, r5}
 8001200:	c232      	stmia	r2!, {r1, r4, r5}
 8001202:	0011      	movs	r1, r2
 8001204:	6802      	ldr	r2, [r0, #0]
 8001206:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001208:	466a      	mov	r2, sp
 800120a:	3310      	adds	r3, #16
 800120c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800120e:	c213      	stmia	r2!, {r0, r1, r4}
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_RCC_GetSysClockFreq+0x68>)
 8001216:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001218:	230c      	movs	r3, #12
 800121a:	4013      	ands	r3, r2
 800121c:	2b08      	cmp	r3, #8
 800121e:	d119      	bne.n	8001254 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001220:	0c91      	lsrs	r1, r2, #18
 8001222:	3307      	adds	r3, #7
 8001224:	4019      	ands	r1, r3
 8001226:	a804      	add	r0, sp, #16
 8001228:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800122a:	490c      	ldr	r1, [pc, #48]	; (800125c <HAL_RCC_GetSysClockFreq+0x68>)
 800122c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800122e:	400b      	ands	r3, r1
 8001230:	4669      	mov	r1, sp
 8001232:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001234:	03d3      	lsls	r3, r2, #15
 8001236:	d408      	bmi.n	800124a <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001238:	0163      	lsls	r3, r4, #5
 800123a:	1b1b      	subs	r3, r3, r4
 800123c:	0198      	lsls	r0, r3, #6
 800123e:	1ac0      	subs	r0, r0, r3
 8001240:	00c0      	lsls	r0, r0, #3
 8001242:	1900      	adds	r0, r0, r4
 8001244:	0200      	lsls	r0, r0, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001246:	b009      	add	sp, #36	; 0x24
 8001248:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_RCC_GetSysClockFreq+0x6c>)
 800124c:	f7fe ff6e 	bl	800012c <__udivsi3>
 8001250:	4360      	muls	r0, r4
 8001252:	e7f8      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001256:	e7f6      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x52>
 8001258:	080031fc 	.word	0x080031fc
 800125c:	40021000 	.word	0x40021000
 8001260:	007a1200 	.word	0x007a1200

08001264 <HAL_RCC_ClockConfig>:
{
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001266:	46ce      	mov	lr, r9
 8001268:	4647      	mov	r7, r8
 800126a:	b580      	push	{r7, lr}
 800126c:	0004      	movs	r4, r0
 800126e:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001270:	2800      	cmp	r0, #0
 8001272:	d100      	bne.n	8001276 <HAL_RCC_ClockConfig+0x12>
 8001274:	e081      	b.n	800137a <HAL_RCC_ClockConfig+0x116>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <HAL_RCC_ClockConfig+0x120>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	4013      	ands	r3, r2
 800127e:	428b      	cmp	r3, r1
 8001280:	d20a      	bcs.n	8001298 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4940      	ldr	r1, [pc, #256]	; (8001384 <HAL_RCC_ClockConfig+0x120>)
 8001284:	680b      	ldr	r3, [r1, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4393      	bics	r3, r2
 800128a:	432b      	orrs	r3, r5
 800128c:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	680b      	ldr	r3, [r1, #0]
 8001290:	401a      	ands	r2, r3
      return HAL_ERROR;
 8001292:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001294:	42aa      	cmp	r2, r5
 8001296:	d171      	bne.n	800137c <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	079a      	lsls	r2, r3, #30
 800129c:	d50e      	bpl.n	80012bc <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129e:	075b      	lsls	r3, r3, #29
 80012a0:	d505      	bpl.n	80012ae <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012a2:	4a39      	ldr	r2, [pc, #228]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 80012a4:	6851      	ldr	r1, [r2, #4]
 80012a6:	23e0      	movs	r3, #224	; 0xe0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ae:	4a36      	ldr	r2, [pc, #216]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 80012b0:	6853      	ldr	r3, [r2, #4]
 80012b2:	21f0      	movs	r1, #240	; 0xf0
 80012b4:	438b      	bics	r3, r1
 80012b6:	68a1      	ldr	r1, [r4, #8]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	07db      	lsls	r3, r3, #31
 80012c0:	d530      	bpl.n	8001324 <HAL_RCC_ClockConfig+0xc0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c2:	6862      	ldr	r2, [r4, #4]
 80012c4:	2a01      	cmp	r2, #1
 80012c6:	d021      	beq.n	800130c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c8:	2a02      	cmp	r2, #2
 80012ca:	d025      	beq.n	8001318 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 80012ce:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	079b      	lsls	r3, r3, #30
 80012d4:	d552      	bpl.n	800137c <HAL_RCC_ClockConfig+0x118>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d6:	492c      	ldr	r1, [pc, #176]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 80012d8:	684b      	ldr	r3, [r1, #4]
 80012da:	2003      	movs	r0, #3
 80012dc:	4383      	bics	r3, r0
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80012e2:	f7ff fa91 	bl	8000808 <HAL_GetTick>
 80012e6:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e8:	4f27      	ldr	r7, [pc, #156]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 80012ea:	260c      	movs	r6, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_ClockConfig+0x128>)
 80012ee:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4032      	ands	r2, r6
 80012f4:	6863      	ldr	r3, [r4, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_ClockConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff fa84 	bl	8000808 <HAL_GetTick>
 8001300:	464b      	mov	r3, r9
 8001302:	1ac0      	subs	r0, r0, r3
 8001304:	4540      	cmp	r0, r8
 8001306:	d9f3      	bls.n	80012f0 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8001308:	2003      	movs	r0, #3
 800130a:	e037      	b.n	800137c <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 800130e:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	039b      	lsls	r3, r3, #14
 8001314:	d4df      	bmi.n	80012d6 <HAL_RCC_ClockConfig+0x72>
 8001316:	e031      	b.n	800137c <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 800131a:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 800131c:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	019b      	lsls	r3, r3, #6
 8001320:	d4d9      	bmi.n	80012d6 <HAL_RCC_ClockConfig+0x72>
 8001322:	e02b      	b.n	800137c <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_RCC_ClockConfig+0x120>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	4013      	ands	r3, r2
 800132c:	42ab      	cmp	r3, r5
 800132e:	d90a      	bls.n	8001346 <HAL_RCC_ClockConfig+0xe2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001330:	4914      	ldr	r1, [pc, #80]	; (8001384 <HAL_RCC_ClockConfig+0x120>)
 8001332:	680b      	ldr	r3, [r1, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	4393      	bics	r3, r2
 8001338:	432b      	orrs	r3, r5
 800133a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133c:	680b      	ldr	r3, [r1, #0]
 800133e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	42aa      	cmp	r2, r5
 8001344:	d11a      	bne.n	800137c <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	075b      	lsls	r3, r3, #29
 800134a:	d506      	bpl.n	800135a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 800134e:	6853      	ldr	r3, [r2, #4]
 8001350:	490f      	ldr	r1, [pc, #60]	; (8001390 <HAL_RCC_ClockConfig+0x12c>)
 8001352:	400b      	ands	r3, r1
 8001354:	68e1      	ldr	r1, [r4, #12]
 8001356:	430b      	orrs	r3, r1
 8001358:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800135a:	f7ff ff4b 	bl	80011f4 <HAL_RCC_GetSysClockFreq>
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_RCC_ClockConfig+0x124>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	061b      	lsls	r3, r3, #24
 8001364:	0f1b      	lsrs	r3, r3, #28
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_RCC_ClockConfig+0x130>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	40d8      	lsrs	r0, r3
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_RCC_ClockConfig+0x134>)
 800136e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fa07 	bl	8000784 <HAL_InitTick>
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
 8001378:	e000      	b.n	800137c <HAL_RCC_ClockConfig+0x118>
    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
}
 800137c:	bc0c      	pop	{r2, r3}
 800137e:	4690      	mov	r8, r2
 8001380:	4699      	mov	r9, r3
 8001382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001384:	40022000 	.word	0x40022000
 8001388:	40021000 	.word	0x40021000
 800138c:	00001388 	.word	0x00001388
 8001390:	fffff8ff 	.word	0xfffff8ff
 8001394:	08003284 	.word	0x08003284
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	055b      	lsls	r3, r3, #21
 80013a2:	0f5b      	lsrs	r3, r3, #29
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013aa:	6810      	ldr	r0, [r2, #0]
 80013ac:	40d8      	lsrs	r0, r3
}    
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000
 80013b4:	08003294 	.word	0x08003294
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	46ce      	mov	lr, r9
 80013c0:	4647      	mov	r7, r8
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b083      	sub	sp, #12
 80013c6:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013c8:	6803      	ldr	r3, [r0, #0]
 80013ca:	03db      	lsls	r3, r3, #15
 80013cc:	d536      	bpl.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80013d0:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	d40a      	bmi.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	4a3c      	ldr	r2, [pc, #240]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80013da:	69d1      	ldr	r1, [r2, #28]
 80013dc:	2080      	movs	r0, #128	; 0x80
 80013de:	0540      	lsls	r0, r0, #21
 80013e0:	4301      	orrs	r1, r0
 80013e2:	61d1      	str	r1, [r2, #28]
 80013e4:	69d3      	ldr	r3, [r2, #28]
 80013e6:	4003      	ands	r3, r0
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013ec:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	d53c      	bpl.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	22c0      	movs	r2, #192	; 0xc0
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001400:	d013      	beq.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001402:	6861      	ldr	r1, [r4, #4]
 8001404:	400a      	ands	r2, r1
 8001406:	429a      	cmp	r2, r3
 8001408:	d00f      	beq.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800140c:	6a18      	ldr	r0, [r3, #32]
 800140e:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001410:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001412:	6a1e      	ldr	r6, [r3, #32]
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	0249      	lsls	r1, r1, #9
 8001418:	4331      	orrs	r1, r6
 800141a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800141c:	6a19      	ldr	r1, [r3, #32]
 800141e:	4e2e      	ldr	r6, [pc, #184]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001420:	4031      	ands	r1, r6
 8001422:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001424:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001426:	07c3      	lsls	r3, r0, #31
 8001428:	d439      	bmi.n	800149e <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800142a:	4a28      	ldr	r2, [pc, #160]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800142c:	6a13      	ldr	r3, [r2, #32]
 800142e:	4929      	ldr	r1, [pc, #164]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001430:	400b      	ands	r3, r1
 8001432:	6861      	ldr	r1, [r4, #4]
 8001434:	430b      	orrs	r3, r1
 8001436:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001438:	2d01      	cmp	r5, #1
 800143a:	d042      	beq.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	07db      	lsls	r3, r3, #31
 8001440:	d506      	bpl.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001442:	4a22      	ldr	r2, [pc, #136]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001444:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001446:	2103      	movs	r1, #3
 8001448:	438b      	bics	r3, r1
 800144a:	68a1      	ldr	r1, [r4, #8]
 800144c:	430b      	orrs	r3, r1
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001450:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	069b      	lsls	r3, r3, #26
 8001456:	d506      	bpl.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800145a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800145c:	2110      	movs	r1, #16
 800145e:	438b      	bics	r3, r1
 8001460:	68e1      	ldr	r1, [r4, #12]
 8001462:	430b      	orrs	r3, r1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001466:	b003      	add	sp, #12
 8001468:	bc0c      	pop	{r2, r3}
 800146a:	4690      	mov	r8, r2
 800146c:	4699      	mov	r9, r3
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001472:	6811      	ldr	r1, [r2, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	430b      	orrs	r3, r1
 800147a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800147c:	f7ff f9c4 	bl	8000808 <HAL_GetTick>
 8001480:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001482:	4f13      	ldr	r7, [pc, #76]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001484:	2680      	movs	r6, #128	; 0x80
 8001486:	0076      	lsls	r6, r6, #1
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4233      	tst	r3, r6
 800148c:	d1b3      	bne.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff f9bb 	bl	8000808 <HAL_GetTick>
 8001492:	4643      	mov	r3, r8
 8001494:	1ac0      	subs	r0, r0, r3
 8001496:	2864      	cmp	r0, #100	; 0x64
 8001498:	d9f6      	bls.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 800149a:	2003      	movs	r0, #3
 800149c:	e7e3      	b.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 800149e:	f7ff f9b3 	bl	8000808 <HAL_GetTick>
 80014a2:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	4f09      	ldr	r7, [pc, #36]	; (80014cc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80014a6:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80014aa:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	421e      	tst	r6, r3
 80014b0:	d1bb      	bne.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff f9a9 	bl	8000808 <HAL_GetTick>
 80014b6:	464b      	mov	r3, r9
 80014b8:	1ac0      	subs	r0, r0, r3
 80014ba:	4540      	cmp	r0, r8
 80014bc:	d9f6      	bls.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
 80014be:	2003      	movs	r0, #3
 80014c0:	e7d1      	b.n	8001466 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c2:	69d3      	ldr	r3, [r2, #28]
 80014c4:	4906      	ldr	r1, [pc, #24]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	e7b7      	b.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x80>
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40007000 	.word	0x40007000
 80014d4:	fffffcff 	.word	0xfffffcff
 80014d8:	fffeffff 	.word	0xfffeffff
 80014dc:	00001388 	.word	0x00001388
 80014e0:	efffffff 	.word	0xefffffff

080014e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80014e4:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014e6:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014ea:	2201      	movs	r2, #1
 80014ec:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014f0:	6801      	ldr	r1, [r0, #0]
 80014f2:	680b      	ldr	r3, [r1, #0]
 80014f4:	4d11      	ldr	r5, [pc, #68]	; (800153c <UART_EndRxTransfer+0x58>)
 80014f6:	402b      	ands	r3, r5
 80014f8:	600b      	str	r3, [r1, #0]
 80014fa:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014fe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001502:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001506:	6801      	ldr	r1, [r0, #0]
 8001508:	688b      	ldr	r3, [r1, #8]
 800150a:	4393      	bics	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
 800150e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001512:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001514:	2b01      	cmp	r3, #1
 8001516:	d005      	beq.n	8001524 <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001518:	2320      	movs	r3, #32
 800151a:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800151c:	2300      	movs	r3, #0
 800151e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001520:	6643      	str	r3, [r0, #100]	; 0x64
}
 8001522:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001524:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001528:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800152c:	6802      	ldr	r2, [r0, #0]
 800152e:	6813      	ldr	r3, [r2, #0]
 8001530:	2410      	movs	r4, #16
 8001532:	43a3      	bics	r3, r4
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	f381 8810 	msr	PRIMASK, r1
 800153a:	e7ed      	b.n	8001518 <UART_EndRxTransfer+0x34>
 800153c:	fffffedf 	.word	0xfffffedf

08001540 <HAL_UART_TxCpltCallback>:
}
 8001540:	4770      	bx	lr

08001542 <HAL_UART_RxHalfCpltCallback>:
}
 8001542:	4770      	bx	lr

08001544 <HAL_UART_ErrorCallback>:
}
 8001544:	4770      	bx	lr

08001546 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001546:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001548:	6a44      	ldr	r4, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800154a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800154c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	061b      	lsls	r3, r3, #24
 8001554:	d501      	bpl.n	800155a <UART_DMAError+0x14>
 8001556:	2921      	cmp	r1, #33	; 0x21
 8001558:	d00e      	beq.n	8001578 <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	065b      	lsls	r3, r3, #25
 8001560:	d501      	bpl.n	8001566 <UART_DMAError+0x20>
 8001562:	2a22      	cmp	r2, #34	; 0x22
 8001564:	d01a      	beq.n	800159c <UART_DMAError+0x56>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	58a3      	ldr	r3, [r4, r2]
 800156a:	2110      	movs	r1, #16
 800156c:	430b      	orrs	r3, r1
 800156e:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001570:	0020      	movs	r0, r4
 8001572:	f7ff ffe7 	bl	8001544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001576:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8001578:	2352      	movs	r3, #82	; 0x52
 800157a:	2100      	movs	r1, #0
 800157c:	52e1      	strh	r1, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800157e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001582:	3b51      	subs	r3, #81	; 0x51
 8001584:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001588:	6821      	ldr	r1, [r4, #0]
 800158a:	680b      	ldr	r3, [r1, #0]
 800158c:	25c0      	movs	r5, #192	; 0xc0
 800158e:	43ab      	bics	r3, r5
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8001596:	2320      	movs	r3, #32
 8001598:	67a3      	str	r3, [r4, #120]	; 0x78
 800159a:	e7de      	b.n	800155a <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 800159c:	235a      	movs	r3, #90	; 0x5a
 800159e:	2200      	movs	r2, #0
 80015a0:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80015a2:	0020      	movs	r0, r4
 80015a4:	f7ff ff9e 	bl	80014e4 <UART_EndRxTransfer>
 80015a8:	e7dd      	b.n	8001566 <UART_DMAError+0x20>

080015aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80015aa:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80015ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	225a      	movs	r2, #90	; 0x5a
 80015b2:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80015b4:	3a08      	subs	r2, #8
 80015b6:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80015b8:	f7ff ffc4 	bl	8001544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80015bc:	bd10      	pop	{r4, pc}

080015be <HAL_UARTEx_RxEventCallback>:
}
 80015be:	4770      	bx	lr

080015c0 <HAL_UART_IRQHandler>:
{
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80015c4:	6802      	ldr	r2, [r0, #0]
 80015c6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015c8:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80015ca:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80015cc:	4dab      	ldr	r5, [pc, #684]	; (800187c <HAL_UART_IRQHandler+0x2bc>)
  if (errorflags == 0U)
 80015ce:	422b      	tst	r3, r5
 80015d0:	d10c      	bne.n	80015ec <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80015d2:	0698      	lsls	r0, r3, #26
 80015d4:	d400      	bmi.n	80015d8 <HAL_UART_IRQHandler+0x18>
 80015d6:	e097      	b.n	8001708 <HAL_UART_IRQHandler+0x148>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80015d8:	0688      	lsls	r0, r1, #26
 80015da:	d400      	bmi.n	80015de <HAL_UART_IRQHandler+0x1e>
 80015dc:	e094      	b.n	8001708 <HAL_UART_IRQHandler+0x148>
      if (huart->RxISR != NULL)
 80015de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d100      	bne.n	80015e6 <HAL_UART_IRQHandler+0x26>
 80015e4:	e134      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
        huart->RxISR(huart);
 80015e6:	0020      	movs	r0, r4
 80015e8:	4798      	blx	r3
 80015ea:	e131      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80015ec:	2501      	movs	r5, #1
 80015ee:	4028      	ands	r0, r5
 80015f0:	d103      	bne.n	80015fa <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80015f2:	4da3      	ldr	r5, [pc, #652]	; (8001880 <HAL_UART_IRQHandler+0x2c0>)
 80015f4:	4229      	tst	r1, r5
 80015f6:	d100      	bne.n	80015fa <HAL_UART_IRQHandler+0x3a>
 80015f8:	e086      	b.n	8001708 <HAL_UART_IRQHandler+0x148>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80015fa:	07dd      	lsls	r5, r3, #31
 80015fc:	d507      	bpl.n	800160e <HAL_UART_IRQHandler+0x4e>
 80015fe:	05cd      	lsls	r5, r1, #23
 8001600:	d505      	bpl.n	800160e <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001602:	2601      	movs	r6, #1
 8001604:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001606:	2580      	movs	r5, #128	; 0x80
 8001608:	5962      	ldr	r2, [r4, r5]
 800160a:	4332      	orrs	r2, r6
 800160c:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800160e:	079a      	lsls	r2, r3, #30
 8001610:	d566      	bpl.n	80016e0 <HAL_UART_IRQHandler+0x120>
 8001612:	2800      	cmp	r0, #0
 8001614:	d011      	beq.n	800163a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	2502      	movs	r5, #2
 800161a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800161c:	2680      	movs	r6, #128	; 0x80
 800161e:	59a2      	ldr	r2, [r4, r6]
 8001620:	3502      	adds	r5, #2
 8001622:	432a      	orrs	r2, r5
 8001624:	51a2      	str	r2, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001626:	421d      	tst	r5, r3
 8001628:	d007      	beq.n	800163a <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	2504      	movs	r5, #4
 800162e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001630:	357c      	adds	r5, #124	; 0x7c
 8001632:	5962      	ldr	r2, [r4, r5]
 8001634:	2602      	movs	r6, #2
 8001636:	4332      	orrs	r2, r6
 8001638:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800163a:	071a      	lsls	r2, r3, #28
 800163c:	d50a      	bpl.n	8001654 <HAL_UART_IRQHandler+0x94>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800163e:	068a      	lsls	r2, r1, #26
 8001640:	d401      	bmi.n	8001646 <HAL_UART_IRQHandler+0x86>
 8001642:	2800      	cmp	r0, #0
 8001644:	d006      	beq.n	8001654 <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	2508      	movs	r5, #8
 800164a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800164c:	2080      	movs	r0, #128	; 0x80
 800164e:	5822      	ldr	r2, [r4, r0]
 8001650:	432a      	orrs	r2, r5
 8001652:	5022      	str	r2, [r4, r0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001654:	051a      	lsls	r2, r3, #20
 8001656:	d50a      	bpl.n	800166e <HAL_UART_IRQHandler+0xae>
 8001658:	014a      	lsls	r2, r1, #5
 800165a:	d508      	bpl.n	800166e <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800165c:	6822      	ldr	r2, [r4, #0]
 800165e:	2080      	movs	r0, #128	; 0x80
 8001660:	0100      	lsls	r0, r0, #4
 8001662:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001664:	2080      	movs	r0, #128	; 0x80
 8001666:	5822      	ldr	r2, [r4, r0]
 8001668:	2520      	movs	r5, #32
 800166a:	432a      	orrs	r2, r5
 800166c:	5022      	str	r2, [r4, r0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	58a2      	ldr	r2, [r4, r2]
 8001672:	2a00      	cmp	r2, #0
 8001674:	d100      	bne.n	8001678 <HAL_UART_IRQHandler+0xb8>
 8001676:	e0eb      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001678:	069b      	lsls	r3, r3, #26
 800167a:	d506      	bpl.n	800168a <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800167c:	068b      	lsls	r3, r1, #26
 800167e:	d504      	bpl.n	800168a <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 8001680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 8001686:	0020      	movs	r0, r4
 8001688:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	065b      	lsls	r3, r3, #25
 8001694:	d402      	bmi.n	800169c <HAL_UART_IRQHandler+0xdc>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001696:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001698:	4213      	tst	r3, r2
 800169a:	d02e      	beq.n	80016fa <HAL_UART_IRQHandler+0x13a>
        UART_EndRxTransfer(huart);
 800169c:	0020      	movs	r0, r4
 800169e:	f7ff ff21 	bl	80014e4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	065b      	lsls	r3, r3, #25
 80016a8:	d523      	bpl.n	80016f2 <HAL_UART_IRQHandler+0x132>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ae:	2301      	movs	r3, #1
 80016b0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	6893      	ldr	r3, [r2, #8]
 80016b8:	2040      	movs	r0, #64	; 0x40
 80016ba:	4383      	bics	r3, r0
 80016bc:	6093      	str	r3, [r2, #8]
 80016be:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80016c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d010      	beq.n	80016ea <HAL_UART_IRQHandler+0x12a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80016c8:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_UART_IRQHandler+0x2c4>)
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80016cc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80016ce:	f7ff f99c 	bl	8000a0a <HAL_DMA_Abort_IT>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d100      	bne.n	80016d8 <HAL_UART_IRQHandler+0x118>
 80016d6:	e0bb      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80016d8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80016da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016dc:	4798      	blx	r3
 80016de:	e0b7      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80016e0:	075a      	lsls	r2, r3, #29
 80016e2:	d5aa      	bpl.n	800163a <HAL_UART_IRQHandler+0x7a>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d1a0      	bne.n	800162a <HAL_UART_IRQHandler+0x6a>
 80016e8:	e7a7      	b.n	800163a <HAL_UART_IRQHandler+0x7a>
            HAL_UART_ErrorCallback(huart);
 80016ea:	0020      	movs	r0, r4
 80016ec:	f7ff ff2a 	bl	8001544 <HAL_UART_ErrorCallback>
 80016f0:	e0ae      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
          HAL_UART_ErrorCallback(huart);
 80016f2:	0020      	movs	r0, r4
 80016f4:	f7ff ff26 	bl	8001544 <HAL_UART_ErrorCallback>
 80016f8:	e0aa      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
        HAL_UART_ErrorCallback(huart);
 80016fa:	0020      	movs	r0, r4
 80016fc:	f7ff ff22 	bl	8001544 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	2200      	movs	r2, #0
 8001704:	50e2      	str	r2, [r4, r3]
 8001706:	e0a3      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001708:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800170a:	2801      	cmp	r0, #1
 800170c:	d00c      	beq.n	8001728 <HAL_UART_IRQHandler+0x168>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800170e:	061a      	lsls	r2, r3, #24
 8001710:	d400      	bmi.n	8001714 <HAL_UART_IRQHandler+0x154>
 8001712:	e099      	b.n	8001848 <HAL_UART_IRQHandler+0x288>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001714:	060a      	lsls	r2, r1, #24
 8001716:	d400      	bmi.n	800171a <HAL_UART_IRQHandler+0x15a>
 8001718:	e096      	b.n	8001848 <HAL_UART_IRQHandler+0x288>
    if (huart->TxISR != NULL)
 800171a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800171c:	2b00      	cmp	r3, #0
 800171e:	d100      	bne.n	8001722 <HAL_UART_IRQHandler+0x162>
 8001720:	e096      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
      huart->TxISR(huart);
 8001722:	0020      	movs	r0, r4
 8001724:	4798      	blx	r3
 8001726:	e093      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001728:	06d8      	lsls	r0, r3, #27
 800172a:	d5f0      	bpl.n	800170e <HAL_UART_IRQHandler+0x14e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800172c:	06c8      	lsls	r0, r1, #27
 800172e:	d5ee      	bpl.n	800170e <HAL_UART_IRQHandler+0x14e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001730:	2310      	movs	r3, #16
 8001732:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	065b      	lsls	r3, r3, #25
 800173a:	d54e      	bpl.n	80017da <HAL_UART_IRQHandler+0x21a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800173c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8001744:	2b00      	cmp	r3, #0
 8001746:	d100      	bne.n	800174a <HAL_UART_IRQHandler+0x18a>
 8001748:	e082      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800174a:	2158      	movs	r1, #88	; 0x58
 800174c:	5a61      	ldrh	r1, [r4, r1]
 800174e:	4299      	cmp	r1, r3
 8001750:	d800      	bhi.n	8001754 <HAL_UART_IRQHandler+0x194>
 8001752:	e07d      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
        huart->RxXferCount = nb_remaining_rx_data;
 8001754:	215a      	movs	r1, #90	; 0x5a
 8001756:	5263      	strh	r3, [r4, r1]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001758:	6993      	ldr	r3, [r2, #24]
 800175a:	2b20      	cmp	r3, #32
 800175c:	d033      	beq.n	80017c6 <HAL_UART_IRQHandler+0x206>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001762:	2301      	movs	r3, #1
 8001764:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001768:	6821      	ldr	r1, [r4, #0]
 800176a:	680a      	ldr	r2, [r1, #0]
 800176c:	4d46      	ldr	r5, [pc, #280]	; (8001888 <HAL_UART_IRQHandler+0x2c8>)
 800176e:	402a      	ands	r2, r5
 8001770:	600a      	str	r2, [r1, #0]
 8001772:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001776:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800177a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800177e:	6821      	ldr	r1, [r4, #0]
 8001780:	688a      	ldr	r2, [r1, #8]
 8001782:	439a      	bics	r2, r3
 8001784:	608a      	str	r2, [r1, #8]
 8001786:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800178a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800178e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001792:	6821      	ldr	r1, [r4, #0]
 8001794:	688a      	ldr	r2, [r1, #8]
 8001796:	3542      	adds	r5, #66	; 0x42
 8001798:	35ff      	adds	r5, #255	; 0xff
 800179a:	43aa      	bics	r2, r5
 800179c:	608a      	str	r2, [r1, #8]
 800179e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80017a2:	2220      	movs	r2, #32
 80017a4:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017a6:	2200      	movs	r2, #0
 80017a8:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ae:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017b2:	6822      	ldr	r2, [r4, #0]
 80017b4:	6813      	ldr	r3, [r2, #0]
 80017b6:	2010      	movs	r0, #16
 80017b8:	4383      	bics	r3, r0
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80017c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80017c2:	f7ff f900 	bl	80009c6 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80017c6:	235a      	movs	r3, #90	; 0x5a
 80017c8:	5ae3      	ldrh	r3, [r4, r3]
 80017ca:	2258      	movs	r2, #88	; 0x58
 80017cc:	5aa1      	ldrh	r1, [r4, r2]
 80017ce:	1ac9      	subs	r1, r1, r3
 80017d0:	b289      	uxth	r1, r1
 80017d2:	0020      	movs	r0, r4
 80017d4:	f7ff fef3 	bl	80015be <HAL_UARTEx_RxEventCallback>
 80017d8:	e03a      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80017da:	215a      	movs	r1, #90	; 0x5a
 80017dc:	5a62      	ldrh	r2, [r4, r1]
 80017de:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80017e0:	5a63      	ldrh	r3, [r4, r1]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d033      	beq.n	8001850 <HAL_UART_IRQHandler+0x290>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80017e8:	2358      	movs	r3, #88	; 0x58
 80017ea:	5ae3      	ldrh	r3, [r4, r3]
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 80017f0:	2900      	cmp	r1, #0
 80017f2:	d02d      	beq.n	8001850 <HAL_UART_IRQHandler+0x290>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017f4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017f8:	2301      	movs	r3, #1
 80017fa:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017fe:	6820      	ldr	r0, [r4, #0]
 8001800:	6802      	ldr	r2, [r0, #0]
 8001802:	4e22      	ldr	r6, [pc, #136]	; (800188c <HAL_UART_IRQHandler+0x2cc>)
 8001804:	4032      	ands	r2, r6
 8001806:	6002      	str	r2, [r0, #0]
 8001808:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800180c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001810:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001814:	6820      	ldr	r0, [r4, #0]
 8001816:	6882      	ldr	r2, [r0, #8]
 8001818:	439a      	bics	r2, r3
 800181a:	6082      	str	r2, [r0, #8]
 800181c:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8001820:	2220      	movs	r2, #32
 8001822:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001824:	2200      	movs	r2, #0
 8001826:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8001828:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800182a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001832:	6822      	ldr	r2, [r4, #0]
 8001834:	6813      	ldr	r3, [r2, #0]
 8001836:	2510      	movs	r5, #16
 8001838:	43ab      	bics	r3, r5
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001840:	0020      	movs	r0, r4
 8001842:	f7ff febc 	bl	80015be <HAL_UARTEx_RxEventCallback>
 8001846:	e003      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001848:	065b      	lsls	r3, r3, #25
 800184a:	d501      	bpl.n	8001850 <HAL_UART_IRQHandler+0x290>
 800184c:	064b      	lsls	r3, r1, #25
 800184e:	d400      	bmi.n	8001852 <HAL_UART_IRQHandler+0x292>
}
 8001850:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001852:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001856:	2301      	movs	r3, #1
 8001858:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800185c:	6822      	ldr	r2, [r4, #0]
 800185e:	6813      	ldr	r3, [r2, #0]
 8001860:	2040      	movs	r0, #64	; 0x40
 8001862:	4383      	bics	r3, r0
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800186a:	2320      	movs	r3, #32
 800186c:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800186e:	2300      	movs	r3, #0
 8001870:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001872:	0020      	movs	r0, r4
 8001874:	f7ff fe64 	bl	8001540 <HAL_UART_TxCpltCallback>
 8001878:	e7ea      	b.n	8001850 <HAL_UART_IRQHandler+0x290>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	0000080f 	.word	0x0000080f
 8001880:	04000120 	.word	0x04000120
 8001884:	080015ab 	.word	0x080015ab
 8001888:	fffffeff 	.word	0xfffffeff
 800188c:	fffffedf 	.word	0xfffffedf

08001890 <UART_DMARxHalfCplt>:
{
 8001890:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001892:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001894:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001896:	2b01      	cmp	r3, #1
 8001898:	d002      	beq.n	80018a0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800189a:	f7ff fe52 	bl	8001542 <HAL_UART_RxHalfCpltCallback>
}
 800189e:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80018a0:	3357      	adds	r3, #87	; 0x57
 80018a2:	5ac1      	ldrh	r1, [r0, r3]
 80018a4:	0849      	lsrs	r1, r1, #1
 80018a6:	f7ff fe8a 	bl	80015be <HAL_UARTEx_RxEventCallback>
 80018aa:	e7f8      	b.n	800189e <UART_DMARxHalfCplt+0xe>

080018ac <UART_DMAReceiveCplt>:
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80018ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80018b0:	6982      	ldr	r2, [r0, #24]
 80018b2:	2a20      	cmp	r2, #32
 80018b4:	d028      	beq.n	8001908 <UART_DMAReceiveCplt+0x5c>
    huart->RxXferCount = 0U;
 80018b6:	225a      	movs	r2, #90	; 0x5a
 80018b8:	2100      	movs	r1, #0
 80018ba:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018bc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018c0:	3a59      	subs	r2, #89	; 0x59
 80018c2:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	6801      	ldr	r1, [r0, #0]
 80018ca:	4d1c      	ldr	r5, [pc, #112]	; (800193c <UART_DMAReceiveCplt+0x90>)
 80018cc:	4029      	ands	r1, r5
 80018ce:	6001      	str	r1, [r0, #0]
 80018d0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018d4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018d8:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	6881      	ldr	r1, [r0, #8]
 80018e0:	4391      	bics	r1, r2
 80018e2:	6081      	str	r1, [r0, #8]
 80018e4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ec:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	688a      	ldr	r2, [r1, #8]
 80018f4:	2440      	movs	r4, #64	; 0x40
 80018f6:	43a2      	bics	r2, r4
 80018f8:	608a      	str	r2, [r1, #8]
 80018fa:	f380 8810 	msr	PRIMASK, r0
    huart->RxState = HAL_UART_STATE_READY;
 80018fe:	2220      	movs	r2, #32
 8001900:	67da      	str	r2, [r3, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001902:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001904:	2a01      	cmp	r2, #1
 8001906:	d006      	beq.n	8001916 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001908:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800190a:	2a01      	cmp	r2, #1
 800190c:	d00f      	beq.n	800192e <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800190e:	0018      	movs	r0, r3
 8001910:	f7fe fd66 	bl	80003e0 <HAL_UART_RxCpltCallback>
}
 8001914:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001916:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800191a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800191e:	6819      	ldr	r1, [r3, #0]
 8001920:	680a      	ldr	r2, [r1, #0]
 8001922:	3c30      	subs	r4, #48	; 0x30
 8001924:	43a2      	bics	r2, r4
 8001926:	600a      	str	r2, [r1, #0]
 8001928:	f380 8810 	msr	PRIMASK, r0
 800192c:	e7ec      	b.n	8001908 <UART_DMAReceiveCplt+0x5c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800192e:	3257      	adds	r2, #87	; 0x57
 8001930:	5a99      	ldrh	r1, [r3, r2]
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff fe43 	bl	80015be <HAL_UARTEx_RxEventCallback>
 8001938:	e7ec      	b.n	8001914 <UART_DMAReceiveCplt+0x68>
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	fffffeff 	.word	0xfffffeff

08001940 <UART_SetConfig>:
{
 8001940:	b570      	push	{r4, r5, r6, lr}
 8001942:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001944:	6801      	ldr	r1, [r0, #0]
 8001946:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001948:	6883      	ldr	r3, [r0, #8]
 800194a:	6900      	ldr	r0, [r0, #16]
 800194c:	4303      	orrs	r3, r0
 800194e:	6960      	ldr	r0, [r4, #20]
 8001950:	4303      	orrs	r3, r0
 8001952:	69e0      	ldr	r0, [r4, #28]
 8001954:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001956:	483e      	ldr	r0, [pc, #248]	; (8001a50 <UART_SetConfig+0x110>)
 8001958:	4002      	ands	r2, r0
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	6853      	ldr	r3, [r2, #4]
 8001962:	493c      	ldr	r1, [pc, #240]	; (8001a54 <UART_SetConfig+0x114>)
 8001964:	400b      	ands	r3, r1
 8001966:	68e1      	ldr	r1, [r4, #12]
 8001968:	430b      	orrs	r3, r1
 800196a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800196c:	6821      	ldr	r1, [r4, #0]
 800196e:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001970:	69a3      	ldr	r3, [r4, #24]
 8001972:	6a20      	ldr	r0, [r4, #32]
 8001974:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001976:	4838      	ldr	r0, [pc, #224]	; (8001a58 <UART_SetConfig+0x118>)
 8001978:	4002      	ands	r2, r0
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <UART_SetConfig+0x11c>)
 8001980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001982:	2303      	movs	r3, #3
 8001984:	4013      	ands	r3, r2
 8001986:	2b01      	cmp	r3, #1
 8001988:	d01b      	beq.n	80019c2 <UART_SetConfig+0x82>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <UART_SetConfig+0x5a>
 800198e:	2b02      	cmp	r3, #2
 8001990:	d037      	beq.n	8001a02 <UART_SetConfig+0xc2>
 8001992:	2b03      	cmp	r3, #3
 8001994:	d00e      	beq.n	80019b4 <UART_SetConfig+0x74>
        ret = HAL_ERROR;
 8001996:	2201      	movs	r2, #1
 8001998:	e02e      	b.n	80019f8 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	69e2      	ldr	r2, [r4, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d052      	beq.n	8001a4a <UART_SetConfig+0x10a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80019a4:	f7ff fcfa 	bl	800139c <HAL_RCC_GetPCLK1Freq>
        break;
 80019a8:	e012      	b.n	80019d0 <UART_SetConfig+0x90>
        pclk = (uint32_t) HSI_VALUE;
 80019aa:	482d      	ldr	r0, [pc, #180]	; (8001a60 <UART_SetConfig+0x120>)
 80019ac:	e035      	b.n	8001a1a <UART_SetConfig+0xda>
        pclk = (uint32_t) LSE_VALUE;
 80019ae:	2080      	movs	r0, #128	; 0x80
 80019b0:	0200      	lsls	r0, r0, #8
 80019b2:	e032      	b.n	8001a1a <UART_SetConfig+0xda>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	69e2      	ldr	r2, [r4, #28]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d0f5      	beq.n	80019aa <UART_SetConfig+0x6a>
        pclk = (uint32_t) HSI_VALUE;
 80019be:	4828      	ldr	r0, [pc, #160]	; (8001a60 <UART_SetConfig+0x120>)
 80019c0:	e009      	b.n	80019d6 <UART_SetConfig+0x96>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	69e2      	ldr	r2, [r4, #28]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d021      	beq.n	8001a10 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetSysClockFreq();
 80019cc:	f7ff fc12 	bl	80011f4 <HAL_RCC_GetSysClockFreq>
 80019d0:	2200      	movs	r2, #0
    if (pclk != 0U)
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d010      	beq.n	80019f8 <UART_SetConfig+0xb8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80019d6:	6863      	ldr	r3, [r4, #4]
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	1818      	adds	r0, r3, r0
 80019dc:	6861      	ldr	r1, [r4, #4]
 80019de:	f7fe fba5 	bl	800012c <__udivsi3>
 80019e2:	0403      	lsls	r3, r0, #16
 80019e4:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019e6:	0018      	movs	r0, r3
 80019e8:	3810      	subs	r0, #16
 80019ea:	491e      	ldr	r1, [pc, #120]	; (8001a64 <UART_SetConfig+0x124>)
        ret = HAL_ERROR;
 80019ec:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019ee:	4288      	cmp	r0, r1
 80019f0:	d802      	bhi.n	80019f8 <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 80019f2:	6822      	ldr	r2, [r4, #0]
 80019f4:	60d3      	str	r3, [r2, #12]
 80019f6:	2200      	movs	r2, #0
  huart->RxISR = NULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80019fc:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80019fe:	0010      	movs	r0, r2
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	69e2      	ldr	r2, [r4, #28]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d0d0      	beq.n	80019ae <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	e7e2      	b.n	80019d6 <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetSysClockFreq();
 8001a10:	f7ff fbf0 	bl	80011f4 <HAL_RCC_GetSysClockFreq>
 8001a14:	2200      	movs	r2, #0
    if (pclk != 0U)
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d0ee      	beq.n	80019f8 <UART_SetConfig+0xb8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a1a:	0040      	lsls	r0, r0, #1
 8001a1c:	6863      	ldr	r3, [r4, #4]
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	18c0      	adds	r0, r0, r3
 8001a22:	6861      	ldr	r1, [r4, #4]
 8001a24:	f7fe fb82 	bl	800012c <__udivsi3>
 8001a28:	0403      	lsls	r3, r0, #16
 8001a2a:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a2c:	001d      	movs	r5, r3
 8001a2e:	3d10      	subs	r5, #16
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <UART_SetConfig+0x124>)
        ret = HAL_ERROR;
 8001a32:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a34:	428d      	cmp	r5, r1
 8001a36:	d8df      	bhi.n	80019f8 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <UART_SetConfig+0x128>)
 8001a3a:	4010      	ands	r0, r2
        huart->Instance->BRR = brrtemp;
 8001a3c:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a3e:	071b      	lsls	r3, r3, #28
 8001a40:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8001a42:	4303      	orrs	r3, r0
 8001a44:	60d3      	str	r3, [r2, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	e7d6      	b.n	80019f8 <UART_SetConfig+0xb8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a4a:	f7ff fca7 	bl	800139c <HAL_RCC_GetPCLK1Freq>
        break;
 8001a4e:	e7e1      	b.n	8001a14 <UART_SetConfig+0xd4>
 8001a50:	ffff69f3 	.word	0xffff69f3
 8001a54:	ffffcfff 	.word	0xffffcfff
 8001a58:	fffff4ff 	.word	0xfffff4ff
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	007a1200 	.word	0x007a1200
 8001a64:	0000ffef 	.word	0x0000ffef
 8001a68:	0000fff0 	.word	0x0000fff0

08001a6c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a6e:	07db      	lsls	r3, r3, #31
 8001a70:	d506      	bpl.n	8001a80 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a72:	6802      	ldr	r2, [r0, #0]
 8001a74:	6853      	ldr	r3, [r2, #4]
 8001a76:	492c      	ldr	r1, [pc, #176]	; (8001b28 <UART_AdvFeatureConfig+0xbc>)
 8001a78:	400b      	ands	r3, r1
 8001a7a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a82:	079b      	lsls	r3, r3, #30
 8001a84:	d506      	bpl.n	8001a94 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a86:	6802      	ldr	r2, [r0, #0]
 8001a88:	6853      	ldr	r3, [r2, #4]
 8001a8a:	4928      	ldr	r1, [pc, #160]	; (8001b2c <UART_AdvFeatureConfig+0xc0>)
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a96:	075b      	lsls	r3, r3, #29
 8001a98:	d506      	bpl.n	8001aa8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	6853      	ldr	r3, [r2, #4]
 8001a9e:	4924      	ldr	r1, [pc, #144]	; (8001b30 <UART_AdvFeatureConfig+0xc4>)
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001aa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001aaa:	071b      	lsls	r3, r3, #28
 8001aac:	d506      	bpl.n	8001abc <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001aae:	6802      	ldr	r2, [r0, #0]
 8001ab0:	6853      	ldr	r3, [r2, #4]
 8001ab2:	4920      	ldr	r1, [pc, #128]	; (8001b34 <UART_AdvFeatureConfig+0xc8>)
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001abe:	06db      	lsls	r3, r3, #27
 8001ac0:	d506      	bpl.n	8001ad0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ac2:	6802      	ldr	r2, [r0, #0]
 8001ac4:	6893      	ldr	r3, [r2, #8]
 8001ac6:	491c      	ldr	r1, [pc, #112]	; (8001b38 <UART_AdvFeatureConfig+0xcc>)
 8001ac8:	400b      	ands	r3, r1
 8001aca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ad2:	069b      	lsls	r3, r3, #26
 8001ad4:	d506      	bpl.n	8001ae4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ad6:	6802      	ldr	r2, [r0, #0]
 8001ad8:	6893      	ldr	r3, [r2, #8]
 8001ada:	4918      	ldr	r1, [pc, #96]	; (8001b3c <UART_AdvFeatureConfig+0xd0>)
 8001adc:	400b      	ands	r3, r1
 8001ade:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ae6:	065b      	lsls	r3, r3, #25
 8001ae8:	d50b      	bpl.n	8001b02 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001aea:	6802      	ldr	r2, [r0, #0]
 8001aec:	6853      	ldr	r3, [r2, #4]
 8001aee:	4914      	ldr	r1, [pc, #80]	; (8001b40 <UART_AdvFeatureConfig+0xd4>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	035b      	lsls	r3, r3, #13
 8001afc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d00a      	beq.n	8001b18 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	d506      	bpl.n	8001b16 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b08:	6802      	ldr	r2, [r0, #0]
 8001b0a:	6853      	ldr	r3, [r2, #4]
 8001b0c:	490d      	ldr	r1, [pc, #52]	; (8001b44 <UART_AdvFeatureConfig+0xd8>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b12:	430b      	orrs	r3, r1
 8001b14:	6053      	str	r3, [r2, #4]
}
 8001b16:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b18:	6802      	ldr	r2, [r0, #0]
 8001b1a:	6853      	ldr	r3, [r2, #4]
 8001b1c:	490a      	ldr	r1, [pc, #40]	; (8001b48 <UART_AdvFeatureConfig+0xdc>)
 8001b1e:	400b      	ands	r3, r1
 8001b20:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001b22:	430b      	orrs	r3, r1
 8001b24:	6053      	str	r3, [r2, #4]
 8001b26:	e7ec      	b.n	8001b02 <UART_AdvFeatureConfig+0x96>
 8001b28:	fffdffff 	.word	0xfffdffff
 8001b2c:	fffeffff 	.word	0xfffeffff
 8001b30:	fffbffff 	.word	0xfffbffff
 8001b34:	ffff7fff 	.word	0xffff7fff
 8001b38:	ffffefff 	.word	0xffffefff
 8001b3c:	ffffdfff 	.word	0xffffdfff
 8001b40:	ffefffff 	.word	0xffefffff
 8001b44:	fff7ffff 	.word	0xfff7ffff
 8001b48:	ff9fffff 	.word	0xff9fffff

08001b4c <UART_WaitOnFlagUntilTimeout>:
{
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	46d6      	mov	lr, sl
 8001b50:	464f      	mov	r7, r9
 8001b52:	4646      	mov	r6, r8
 8001b54:	b5c0      	push	{r6, r7, lr}
 8001b56:	0007      	movs	r7, r0
 8001b58:	000c      	movs	r4, r1
 8001b5a:	0016      	movs	r6, r2
 8001b5c:	4698      	mov	r8, r3
 8001b5e:	9d08      	ldr	r5, [sp, #32]
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b60:	2304      	movs	r3, #4
 8001b62:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	69d3      	ldr	r3, [r2, #28]
 8001b6e:	4023      	ands	r3, r4
 8001b70:	1b1b      	subs	r3, r3, r4
 8001b72:	4259      	negs	r1, r3
 8001b74:	414b      	adcs	r3, r1
 8001b76:	42b3      	cmp	r3, r6
 8001b78:	d153      	bne.n	8001c22 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	1c6b      	adds	r3, r5, #1
 8001b7c:	d0f6      	beq.n	8001b6c <UART_WaitOnFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7e:	f7fe fe43 	bl	8000808 <HAL_GetTick>
 8001b82:	4643      	mov	r3, r8
 8001b84:	1ac0      	subs	r0, r0, r3
 8001b86:	42a8      	cmp	r0, r5
 8001b88:	d82d      	bhi.n	8001be6 <UART_WaitOnFlagUntilTimeout+0x9a>
 8001b8a:	2d00      	cmp	r5, #0
 8001b8c:	d02b      	beq.n	8001be6 <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4649      	mov	r1, r9
 8001b94:	4211      	tst	r1, r2
 8001b96:	d0e8      	beq.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x1e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	420a      	tst	r2, r1
 8001b9e:	d0e4      	beq.n	8001b6a <UART_WaitOnFlagUntilTimeout+0x1e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ba6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001baa:	2201      	movs	r2, #1
 8001bac:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bb0:	6839      	ldr	r1, [r7, #0]
 8001bb2:	680b      	ldr	r3, [r1, #0]
 8001bb4:	4c1e      	ldr	r4, [pc, #120]	; (8001c30 <UART_WaitOnFlagUntilTimeout+0xe4>)
 8001bb6:	4023      	ands	r3, r4
 8001bb8:	600b      	str	r3, [r1, #0]
 8001bba:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bbe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	688b      	ldr	r3, [r1, #8]
 8001bca:	4393      	bics	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
 8001bce:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bd8:	327f      	adds	r2, #127	; 0x7f
 8001bda:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8001bdc:	3354      	adds	r3, #84	; 0x54
 8001bde:	2200      	movs	r2, #0
 8001be0:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8001be2:	2003      	movs	r0, #3
 8001be4:	e01e      	b.n	8001c24 <UART_WaitOnFlagUntilTimeout+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bea:	2201      	movs	r2, #1
 8001bec:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	680b      	ldr	r3, [r1, #0]
 8001bf4:	4c0e      	ldr	r4, [pc, #56]	; (8001c30 <UART_WaitOnFlagUntilTimeout+0xe4>)
 8001bf6:	4023      	ands	r3, r4
 8001bf8:	600b      	str	r3, [r1, #0]
 8001bfa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bfe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c02:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	688b      	ldr	r3, [r1, #8]
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
 8001c0e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8001c12:	2320      	movs	r3, #32
 8001c14:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001c16:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001c18:	3354      	adds	r3, #84	; 0x54
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001c1e:	2003      	movs	r0, #3
 8001c20:	e000      	b.n	8001c24 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8001c22:	2000      	movs	r0, #0
}
 8001c24:	bc1c      	pop	{r2, r3, r4}
 8001c26:	4690      	mov	r8, r2
 8001c28:	4699      	mov	r9, r3
 8001c2a:	46a2      	mov	sl, r4
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	fffffe5f 	.word	0xfffffe5f

08001c34 <HAL_UART_Transmit>:
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	46ce      	mov	lr, r9
 8001c38:	b500      	push	{lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	0004      	movs	r4, r0
 8001c3e:	000e      	movs	r6, r1
 8001c40:	0017      	movs	r7, r2
 8001c42:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c44:	6f83      	ldr	r3, [r0, #120]	; 0x78
    return HAL_BUSY;
 8001c46:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d167      	bne.n	8001d1c <HAL_UART_Transmit+0xe8>
    if ((pData == NULL) || (Size == 0U))
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	d064      	beq.n	8001d1a <HAL_UART_Transmit+0xe6>
      return  HAL_ERROR;
 8001c50:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d062      	beq.n	8001d1c <HAL_UART_Transmit+0xe8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	015b      	lsls	r3, r3, #5
 8001c5a:	68a2      	ldr	r2, [r4, #8]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d023      	beq.n	8001ca8 <HAL_UART_Transmit+0x74>
    __HAL_LOCK(huart);
 8001c60:	2374      	movs	r3, #116	; 0x74
 8001c62:	5ce3      	ldrb	r3, [r4, r3]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d05d      	beq.n	8001d24 <HAL_UART_Transmit+0xf0>
 8001c68:	2374      	movs	r3, #116	; 0x74
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6e:	330c      	adds	r3, #12
 8001c70:	2200      	movs	r2, #0
 8001c72:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c74:	3b5f      	subs	r3, #95	; 0x5f
 8001c76:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001c78:	f7fe fdc6 	bl	8000808 <HAL_GetTick>
 8001c7c:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 8001c7e:	2350      	movs	r3, #80	; 0x50
 8001c80:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 8001c82:	3302      	adds	r3, #2
 8001c84:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c8e:	68a2      	ldr	r2, [r4, #8]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d00f      	beq.n	8001cb4 <HAL_UART_Transmit+0x80>
    __HAL_UNLOCK(huart);
 8001c94:	2374      	movs	r3, #116	; 0x74
 8001c96:	2200      	movs	r2, #0
 8001c98:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8001c9a:	3b22      	subs	r3, #34	; 0x22
 8001c9c:	5ae3      	ldrh	r3, [r4, r3]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02e      	beq.n	8001d02 <HAL_UART_Transmit+0xce>
      huart->TxXferCount--;
 8001ca4:	2752      	movs	r7, #82	; 0x52
 8001ca6:	e01c      	b.n	8001ce2 <HAL_UART_Transmit+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1d8      	bne.n	8001c60 <HAL_UART_Transmit+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cae:	07cb      	lsls	r3, r1, #31
 8001cb0:	d5d6      	bpl.n	8001c60 <HAL_UART_Transmit+0x2c>
 8001cb2:	e033      	b.n	8001d1c <HAL_UART_Transmit+0xe8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb4:	6923      	ldr	r3, [r4, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ec      	bne.n	8001c94 <HAL_UART_Transmit+0x60>
      pdata16bits = (uint16_t *) pData;
 8001cba:	46b1      	mov	r9, r6
      pdata8bits  = NULL;
 8001cbc:	2600      	movs	r6, #0
 8001cbe:	e7e9      	b.n	8001c94 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	05db      	lsls	r3, r3, #23
 8001cc6:	0ddb      	lsrs	r3, r3, #23
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	469c      	mov	ip, r3
 8001cd0:	44e1      	add	r9, ip
      huart->TxXferCount--;
 8001cd2:	5be3      	ldrh	r3, [r4, r7]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	53e3      	strh	r3, [r4, r7]
    while (huart->TxXferCount > 0U)
 8001cda:	5be3      	ldrh	r3, [r4, r7]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00f      	beq.n	8001d02 <HAL_UART_Transmit+0xce>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce2:	9500      	str	r5, [sp, #0]
 8001ce4:	9b03      	ldr	r3, [sp, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	0020      	movs	r0, r4
 8001cec:	f7ff ff2e 	bl	8001b4c <UART_WaitOnFlagUntilTimeout>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	d119      	bne.n	8001d28 <HAL_UART_Transmit+0xf4>
      if (pdata8bits == NULL)
 8001cf4:	2e00      	cmp	r6, #0
 8001cf6:	d0e3      	beq.n	8001cc0 <HAL_UART_Transmit+0x8c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cf8:	7833      	ldrb	r3, [r6, #0]
 8001cfa:	6822      	ldr	r2, [r4, #0]
 8001cfc:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8001cfe:	3601      	adds	r6, #1
 8001d00:	e7e7      	b.n	8001cd2 <HAL_UART_Transmit+0x9e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	9500      	str	r5, [sp, #0]
 8001d04:	9b03      	ldr	r3, [sp, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	2140      	movs	r1, #64	; 0x40
 8001d0a:	0020      	movs	r0, r4
 8001d0c:	f7ff ff1e 	bl	8001b4c <UART_WaitOnFlagUntilTimeout>
 8001d10:	2800      	cmp	r0, #0
 8001d12:	d10b      	bne.n	8001d2c <HAL_UART_Transmit+0xf8>
    huart->gState = HAL_UART_STATE_READY;
 8001d14:	2320      	movs	r3, #32
 8001d16:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8001d18:	e000      	b.n	8001d1c <HAL_UART_Transmit+0xe8>
      return  HAL_ERROR;
 8001d1a:	2001      	movs	r0, #1
}
 8001d1c:	b004      	add	sp, #16
 8001d1e:	bc04      	pop	{r2}
 8001d20:	4691      	mov	r9, r2
 8001d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8001d24:	2002      	movs	r0, #2
 8001d26:	e7f9      	b.n	8001d1c <HAL_UART_Transmit+0xe8>
        return HAL_TIMEOUT;
 8001d28:	2003      	movs	r0, #3
 8001d2a:	e7f7      	b.n	8001d1c <HAL_UART_Transmit+0xe8>
      return HAL_TIMEOUT;
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	e7f5      	b.n	8001d1c <HAL_UART_Transmit+0xe8>

08001d30 <UART_CheckIdleState>:
{
 8001d30:	b530      	push	{r4, r5, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	2200      	movs	r2, #0
 8001d3a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001d3c:	f7fe fd64 	bl	8000808 <HAL_GetTick>
 8001d40:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	071b      	lsls	r3, r3, #28
 8001d48:	d40d      	bmi.n	8001d66 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	075b      	lsls	r3, r3, #29
 8001d50:	d416      	bmi.n	8001d80 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001d52:	2320      	movs	r3, #32
 8001d54:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001d56:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8001d5c:	2274      	movs	r2, #116	; 0x74
 8001d5e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001d60:	2000      	movs	r0, #0
}
 8001d62:	b003      	add	sp, #12
 8001d64:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <UART_CheckIdleState+0x6c>)
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	2200      	movs	r2, #0
 8001d70:	0389      	lsls	r1, r1, #14
 8001d72:	0020      	movs	r0, r4
 8001d74:	f7ff feea 	bl	8001b4c <UART_WaitOnFlagUntilTimeout>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d0e6      	beq.n	8001d4a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	e7f0      	b.n	8001d62 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <UART_CheckIdleState+0x6c>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	002b      	movs	r3, r5
 8001d88:	2200      	movs	r2, #0
 8001d8a:	03c9      	lsls	r1, r1, #15
 8001d8c:	0020      	movs	r0, r4
 8001d8e:	f7ff fedd 	bl	8001b4c <UART_WaitOnFlagUntilTimeout>
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d0dd      	beq.n	8001d52 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8001d96:	2003      	movs	r0, #3
 8001d98:	e7e3      	b.n	8001d62 <UART_CheckIdleState+0x32>
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	01ffffff 	.word	0x01ffffff

08001da0 <HAL_UART_Init>:
{
 8001da0:	b510      	push	{r4, lr}
 8001da2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001da4:	d02e      	beq.n	8001e04 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001da6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d021      	beq.n	8001df0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001dac:	2324      	movs	r3, #36	; 0x24
 8001dae:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	6813      	ldr	r3, [r2, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	438b      	bics	r3, r1
 8001db8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f7ff fdc0 	bl	8001940 <UART_SetConfig>
 8001dc0:	2801      	cmp	r0, #1
 8001dc2:	d014      	beq.n	8001dee <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	6853      	ldr	r3, [r2, #4]
 8001dce:	490e      	ldr	r1, [pc, #56]	; (8001e08 <HAL_UART_Init+0x68>)
 8001dd0:	400b      	ands	r3, r1
 8001dd2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	6893      	ldr	r3, [r2, #8]
 8001dd8:	2108      	movs	r1, #8
 8001dda:	438b      	bics	r3, r1
 8001ddc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	3907      	subs	r1, #7
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001de8:	0020      	movs	r0, r4
 8001dea:	f7ff ffa1 	bl	8001d30 <UART_CheckIdleState>
}
 8001dee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001df0:	3374      	adds	r3, #116	; 0x74
 8001df2:	2200      	movs	r2, #0
 8001df4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001df6:	f7fe fc45 	bl	8000684 <HAL_UART_MspInit>
 8001dfa:	e7d7      	b.n	8001dac <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001dfc:	0020      	movs	r0, r4
 8001dfe:	f7ff fe35 	bl	8001a6c <UART_AdvFeatureConfig>
 8001e02:	e7e2      	b.n	8001dca <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8001e04:	2001      	movs	r0, #1
 8001e06:	e7f2      	b.n	8001dee <HAL_UART_Init+0x4e>
 8001e08:	fffff7ff 	.word	0xfffff7ff

08001e0c <UART_Start_Receive_DMA>:
{
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	0004      	movs	r4, r0
  huart->pRxBuffPtr = pData;
 8001e10:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 8001e12:	2358      	movs	r3, #88	; 0x58
 8001e14:	52c2      	strh	r2, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e16:	3328      	adds	r3, #40	; 0x28
 8001e18:	2100      	movs	r1, #0
 8001e1a:	50c1      	str	r1, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e1c:	3b5e      	subs	r3, #94	; 0x5e
 8001e1e:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8001e20:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d013      	beq.n	8001e4e <UART_Start_Receive_DMA+0x42>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e26:	4922      	ldr	r1, [pc, #136]	; (8001eb0 <UART_Start_Receive_DMA+0xa4>)
 8001e28:	6299      	str	r1, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e2a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001e2c:	4921      	ldr	r1, [pc, #132]	; (8001eb4 <UART_Start_Receive_DMA+0xa8>)
 8001e2e:	62d9      	str	r1, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e30:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001e32:	4921      	ldr	r1, [pc, #132]	; (8001eb8 <UART_Start_Receive_DMA+0xac>)
 8001e34:	6319      	str	r1, [r3, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8001e36:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6359      	str	r1, [r3, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001e3c:	6801      	ldr	r1, [r0, #0]
 8001e3e:	3124      	adds	r1, #36	; 0x24
 8001e40:	0013      	movs	r3, r2
 8001e42:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001e44:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8001e46:	f7fe fd75 	bl	8000934 <HAL_DMA_Start_IT>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d126      	bne.n	8001e9c <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 8001e4e:	2374      	movs	r3, #116	; 0x74
 8001e50:	2200      	movs	r2, #0
 8001e52:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e58:	3b73      	subs	r3, #115	; 0x73
 8001e5a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e5e:	6821      	ldr	r1, [r4, #0]
 8001e60:	680d      	ldr	r5, [r1, #0]
 8001e62:	3201      	adds	r2, #1
 8001e64:	32ff      	adds	r2, #255	; 0xff
 8001e66:	432a      	orrs	r2, r5
 8001e68:	600a      	str	r2, [r1, #0]
 8001e6a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e72:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e76:	6821      	ldr	r1, [r4, #0]
 8001e78:	688a      	ldr	r2, [r1, #8]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	608a      	str	r2, [r1, #8]
 8001e7e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e82:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e86:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	6893      	ldr	r3, [r2, #8]
 8001e8e:	2040      	movs	r0, #64	; 0x40
 8001e90:	4303      	orrs	r3, r0
 8001e92:	6093      	str	r3, [r2, #8]
 8001e94:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8001e98:	2000      	movs	r0, #0
}
 8001e9a:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001ea2:	3b0c      	subs	r3, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8001ea8:	3b54      	subs	r3, #84	; 0x54
 8001eaa:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
 8001eae:	e7f4      	b.n	8001e9a <UART_Start_Receive_DMA+0x8e>
 8001eb0:	080018ad 	.word	0x080018ad
 8001eb4:	08001891 	.word	0x08001891
 8001eb8:	08001547 	.word	0x08001547

08001ebc <HAL_UART_Receive_DMA>:
{
 8001ebc:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ebe:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ec2:	2c20      	cmp	r4, #32
 8001ec4:	d126      	bne.n	8001f14 <HAL_UART_Receive_DMA+0x58>
    if ((pData == NULL) || (Size == 0U))
 8001ec6:	2900      	cmp	r1, #0
 8001ec8:	d02d      	beq.n	8001f26 <HAL_UART_Receive_DMA+0x6a>
      return HAL_ERROR;
 8001eca:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8001ecc:	2a00      	cmp	r2, #0
 8001ece:	d021      	beq.n	8001f14 <HAL_UART_Receive_DMA+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	015b      	lsls	r3, r3, #5
 8001ed4:	6884      	ldr	r4, [r0, #8]
 8001ed6:	429c      	cmp	r4, r3
 8001ed8:	d01e      	beq.n	8001f18 <HAL_UART_Receive_DMA+0x5c>
    __HAL_LOCK(huart);
 8001eda:	2374      	movs	r3, #116	; 0x74
 8001edc:	5cc3      	ldrb	r3, [r0, r3]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d023      	beq.n	8001f2a <HAL_UART_Receive_DMA+0x6e>
 8001ee2:	2374      	movs	r3, #116	; 0x74
 8001ee4:	2401      	movs	r4, #1
 8001ee6:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001eec:	6803      	ldr	r3, [r0, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	d50c      	bpl.n	8001f0e <HAL_UART_Receive_DMA+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ef4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001efe:	6804      	ldr	r4, [r0, #0]
 8001f00:	6826      	ldr	r6, [r4, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	04db      	lsls	r3, r3, #19
 8001f06:	4333      	orrs	r3, r6
 8001f08:	6023      	str	r3, [r4, #0]
 8001f0a:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001f0e:	f7ff ff7d 	bl	8001e0c <UART_Start_Receive_DMA>
 8001f12:	0003      	movs	r3, r0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f18:	6903      	ldr	r3, [r0, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1dd      	bne.n	8001eda <HAL_UART_Receive_DMA+0x1e>
        return  HAL_ERROR;
 8001f1e:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f20:	07cc      	lsls	r4, r1, #31
 8001f22:	d5da      	bpl.n	8001eda <HAL_UART_Receive_DMA+0x1e>
 8001f24:	e7f6      	b.n	8001f14 <HAL_UART_Receive_DMA+0x58>
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e7f4      	b.n	8001f14 <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e7f2      	b.n	8001f14 <HAL_UART_Receive_DMA+0x58>
	...

08001f30 <__errno>:
 8001f30:	4b01      	ldr	r3, [pc, #4]	; (8001f38 <__errno+0x8>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	4770      	bx	lr
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000014 	.word	0x20000014

08001f3c <__libc_init_array>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	2600      	movs	r6, #0
 8001f40:	4d0c      	ldr	r5, [pc, #48]	; (8001f74 <__libc_init_array+0x38>)
 8001f42:	4c0d      	ldr	r4, [pc, #52]	; (8001f78 <__libc_init_array+0x3c>)
 8001f44:	1b64      	subs	r4, r4, r5
 8001f46:	10a4      	asrs	r4, r4, #2
 8001f48:	42a6      	cmp	r6, r4
 8001f4a:	d109      	bne.n	8001f60 <__libc_init_array+0x24>
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	f001 f949 	bl	80031e4 <_init>
 8001f52:	4d0a      	ldr	r5, [pc, #40]	; (8001f7c <__libc_init_array+0x40>)
 8001f54:	4c0a      	ldr	r4, [pc, #40]	; (8001f80 <__libc_init_array+0x44>)
 8001f56:	1b64      	subs	r4, r4, r5
 8001f58:	10a4      	asrs	r4, r4, #2
 8001f5a:	42a6      	cmp	r6, r4
 8001f5c:	d105      	bne.n	8001f6a <__libc_init_array+0x2e>
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	00b3      	lsls	r3, r6, #2
 8001f62:	58eb      	ldr	r3, [r5, r3]
 8001f64:	4798      	blx	r3
 8001f66:	3601      	adds	r6, #1
 8001f68:	e7ee      	b.n	8001f48 <__libc_init_array+0xc>
 8001f6a:	00b3      	lsls	r3, r6, #2
 8001f6c:	58eb      	ldr	r3, [r5, r3]
 8001f6e:	4798      	blx	r3
 8001f70:	3601      	adds	r6, #1
 8001f72:	e7f2      	b.n	8001f5a <__libc_init_array+0x1e>
 8001f74:	08003458 	.word	0x08003458
 8001f78:	08003458 	.word	0x08003458
 8001f7c:	08003458 	.word	0x08003458
 8001f80:	0800345c 	.word	0x0800345c

08001f84 <memcpy>:
 8001f84:	2300      	movs	r3, #0
 8001f86:	b510      	push	{r4, lr}
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d100      	bne.n	8001f8e <memcpy+0xa>
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	5ccc      	ldrb	r4, [r1, r3]
 8001f90:	54c4      	strb	r4, [r0, r3]
 8001f92:	3301      	adds	r3, #1
 8001f94:	e7f8      	b.n	8001f88 <memcpy+0x4>

08001f96 <memset>:
 8001f96:	0003      	movs	r3, r0
 8001f98:	1812      	adds	r2, r2, r0
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d100      	bne.n	8001fa0 <memset+0xa>
 8001f9e:	4770      	bx	lr
 8001fa0:	7019      	strb	r1, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	e7f9      	b.n	8001f9a <memset+0x4>
	...

08001fa8 <siprintf>:
 8001fa8:	b40e      	push	{r1, r2, r3}
 8001faa:	b500      	push	{lr}
 8001fac:	490b      	ldr	r1, [pc, #44]	; (8001fdc <siprintf+0x34>)
 8001fae:	b09c      	sub	sp, #112	; 0x70
 8001fb0:	ab1d      	add	r3, sp, #116	; 0x74
 8001fb2:	9002      	str	r0, [sp, #8]
 8001fb4:	9006      	str	r0, [sp, #24]
 8001fb6:	9107      	str	r1, [sp, #28]
 8001fb8:	9104      	str	r1, [sp, #16]
 8001fba:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <siprintf+0x38>)
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <siprintf+0x3c>)
 8001fbe:	cb04      	ldmia	r3!, {r2}
 8001fc0:	9105      	str	r1, [sp, #20]
 8001fc2:	6800      	ldr	r0, [r0, #0]
 8001fc4:	a902      	add	r1, sp, #8
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	f000 f89a 	bl	8002100 <_svfiprintf_r>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9a02      	ldr	r2, [sp, #8]
 8001fd0:	7013      	strb	r3, [r2, #0]
 8001fd2:	b01c      	add	sp, #112	; 0x70
 8001fd4:	bc08      	pop	{r3}
 8001fd6:	b003      	add	sp, #12
 8001fd8:	4718      	bx	r3
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	7fffffff 	.word	0x7fffffff
 8001fe0:	20000014 	.word	0x20000014
 8001fe4:	ffff0208 	.word	0xffff0208

08001fe8 <siscanf>:
 8001fe8:	b40e      	push	{r1, r2, r3}
 8001fea:	2381      	movs	r3, #129	; 0x81
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	b09d      	sub	sp, #116	; 0x74
 8001ff0:	ac02      	add	r4, sp, #8
 8001ff2:	ad21      	add	r5, sp, #132	; 0x84
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	cd40      	ldmia	r5!, {r6}
 8001ff8:	81a3      	strh	r3, [r4, #12]
 8001ffa:	9002      	str	r0, [sp, #8]
 8001ffc:	9006      	str	r0, [sp, #24]
 8001ffe:	f7fe f88d 	bl	800011c <strlen>
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <siscanf+0x48>)
 8002004:	6060      	str	r0, [r4, #4]
 8002006:	6263      	str	r3, [r4, #36]	; 0x24
 8002008:	2300      	movs	r3, #0
 800200a:	6160      	str	r0, [r4, #20]
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <siscanf+0x4c>)
 800200e:	6363      	str	r3, [r4, #52]	; 0x34
 8002010:	64a3      	str	r3, [r4, #72]	; 0x48
 8002012:	3b01      	subs	r3, #1
 8002014:	81e3      	strh	r3, [r4, #14]
 8002016:	0032      	movs	r2, r6
 8002018:	002b      	movs	r3, r5
 800201a:	0021      	movs	r1, r4
 800201c:	6800      	ldr	r0, [r0, #0]
 800201e:	9501      	str	r5, [sp, #4]
 8002020:	f000 f9c8 	bl	80023b4 <__ssvfiscanf_r>
 8002024:	b01d      	add	sp, #116	; 0x74
 8002026:	bc70      	pop	{r4, r5, r6}
 8002028:	bc08      	pop	{r3}
 800202a:	b003      	add	sp, #12
 800202c:	4718      	bx	r3
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	08002039 	.word	0x08002039
 8002034:	20000014 	.word	0x20000014

08002038 <__seofread>:
 8002038:	2000      	movs	r0, #0
 800203a:	4770      	bx	lr

0800203c <__ssputs_r>:
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	688e      	ldr	r6, [r1, #8]
 8002040:	b085      	sub	sp, #20
 8002042:	0007      	movs	r7, r0
 8002044:	000c      	movs	r4, r1
 8002046:	9203      	str	r2, [sp, #12]
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	429e      	cmp	r6, r3
 800204c:	d83c      	bhi.n	80020c8 <__ssputs_r+0x8c>
 800204e:	2390      	movs	r3, #144	; 0x90
 8002050:	898a      	ldrh	r2, [r1, #12]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	421a      	tst	r2, r3
 8002056:	d034      	beq.n	80020c2 <__ssputs_r+0x86>
 8002058:	2503      	movs	r5, #3
 800205a:	6909      	ldr	r1, [r1, #16]
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	1a5b      	subs	r3, r3, r1
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	6963      	ldr	r3, [r4, #20]
 8002064:	9802      	ldr	r0, [sp, #8]
 8002066:	435d      	muls	r5, r3
 8002068:	0feb      	lsrs	r3, r5, #31
 800206a:	195d      	adds	r5, r3, r5
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	106d      	asrs	r5, r5, #1
 8002070:	3301      	adds	r3, #1
 8002072:	181b      	adds	r3, r3, r0
 8002074:	42ab      	cmp	r3, r5
 8002076:	d900      	bls.n	800207a <__ssputs_r+0x3e>
 8002078:	001d      	movs	r5, r3
 800207a:	0553      	lsls	r3, r2, #21
 800207c:	d532      	bpl.n	80020e4 <__ssputs_r+0xa8>
 800207e:	0029      	movs	r1, r5
 8002080:	0038      	movs	r0, r7
 8002082:	f001 f803 	bl	800308c <_malloc_r>
 8002086:	1e06      	subs	r6, r0, #0
 8002088:	d109      	bne.n	800209e <__ssputs_r+0x62>
 800208a:	230c      	movs	r3, #12
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	2340      	movs	r3, #64	; 0x40
 8002090:	2001      	movs	r0, #1
 8002092:	89a2      	ldrh	r2, [r4, #12]
 8002094:	4240      	negs	r0, r0
 8002096:	4313      	orrs	r3, r2
 8002098:	81a3      	strh	r3, [r4, #12]
 800209a:	b005      	add	sp, #20
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209e:	9a02      	ldr	r2, [sp, #8]
 80020a0:	6921      	ldr	r1, [r4, #16]
 80020a2:	f7ff ff6f 	bl	8001f84 <memcpy>
 80020a6:	89a3      	ldrh	r3, [r4, #12]
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <__ssputs_r+0xc0>)
 80020aa:	401a      	ands	r2, r3
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	4313      	orrs	r3, r2
 80020b0:	81a3      	strh	r3, [r4, #12]
 80020b2:	9b02      	ldr	r3, [sp, #8]
 80020b4:	6126      	str	r6, [r4, #16]
 80020b6:	18f6      	adds	r6, r6, r3
 80020b8:	6026      	str	r6, [r4, #0]
 80020ba:	6165      	str	r5, [r4, #20]
 80020bc:	9e01      	ldr	r6, [sp, #4]
 80020be:	1aed      	subs	r5, r5, r3
 80020c0:	60a5      	str	r5, [r4, #8]
 80020c2:	9b01      	ldr	r3, [sp, #4]
 80020c4:	429e      	cmp	r6, r3
 80020c6:	d900      	bls.n	80020ca <__ssputs_r+0x8e>
 80020c8:	9e01      	ldr	r6, [sp, #4]
 80020ca:	0032      	movs	r2, r6
 80020cc:	9903      	ldr	r1, [sp, #12]
 80020ce:	6820      	ldr	r0, [r4, #0]
 80020d0:	f000 ff7f 	bl	8002fd2 <memmove>
 80020d4:	68a3      	ldr	r3, [r4, #8]
 80020d6:	2000      	movs	r0, #0
 80020d8:	1b9b      	subs	r3, r3, r6
 80020da:	60a3      	str	r3, [r4, #8]
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	199e      	adds	r6, r3, r6
 80020e0:	6026      	str	r6, [r4, #0]
 80020e2:	e7da      	b.n	800209a <__ssputs_r+0x5e>
 80020e4:	002a      	movs	r2, r5
 80020e6:	0038      	movs	r0, r7
 80020e8:	f001 f82e 	bl	8003148 <_realloc_r>
 80020ec:	1e06      	subs	r6, r0, #0
 80020ee:	d1e0      	bne.n	80020b2 <__ssputs_r+0x76>
 80020f0:	6921      	ldr	r1, [r4, #16]
 80020f2:	0038      	movs	r0, r7
 80020f4:	f000 ff80 	bl	8002ff8 <_free_r>
 80020f8:	e7c7      	b.n	800208a <__ssputs_r+0x4e>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	fffffb7f 	.word	0xfffffb7f

08002100 <_svfiprintf_r>:
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	b0a1      	sub	sp, #132	; 0x84
 8002104:	9003      	str	r0, [sp, #12]
 8002106:	001d      	movs	r5, r3
 8002108:	898b      	ldrh	r3, [r1, #12]
 800210a:	000f      	movs	r7, r1
 800210c:	0016      	movs	r6, r2
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	d511      	bpl.n	8002136 <_svfiprintf_r+0x36>
 8002112:	690b      	ldr	r3, [r1, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10e      	bne.n	8002136 <_svfiprintf_r+0x36>
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	f000 ffb7 	bl	800308c <_malloc_r>
 800211e:	6038      	str	r0, [r7, #0]
 8002120:	6138      	str	r0, [r7, #16]
 8002122:	2800      	cmp	r0, #0
 8002124:	d105      	bne.n	8002132 <_svfiprintf_r+0x32>
 8002126:	230c      	movs	r3, #12
 8002128:	9a03      	ldr	r2, [sp, #12]
 800212a:	3801      	subs	r0, #1
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	b021      	add	sp, #132	; 0x84
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	2300      	movs	r3, #0
 8002138:	ac08      	add	r4, sp, #32
 800213a:	6163      	str	r3, [r4, #20]
 800213c:	3320      	adds	r3, #32
 800213e:	7663      	strb	r3, [r4, #25]
 8002140:	3310      	adds	r3, #16
 8002142:	76a3      	strb	r3, [r4, #26]
 8002144:	9507      	str	r5, [sp, #28]
 8002146:	0035      	movs	r5, r6
 8002148:	782b      	ldrb	r3, [r5, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <_svfiprintf_r+0x52>
 800214e:	2b25      	cmp	r3, #37	; 0x25
 8002150:	d146      	bne.n	80021e0 <_svfiprintf_r+0xe0>
 8002152:	1bab      	subs	r3, r5, r6
 8002154:	9305      	str	r3, [sp, #20]
 8002156:	d00c      	beq.n	8002172 <_svfiprintf_r+0x72>
 8002158:	0032      	movs	r2, r6
 800215a:	0039      	movs	r1, r7
 800215c:	9803      	ldr	r0, [sp, #12]
 800215e:	f7ff ff6d 	bl	800203c <__ssputs_r>
 8002162:	1c43      	adds	r3, r0, #1
 8002164:	d100      	bne.n	8002168 <_svfiprintf_r+0x68>
 8002166:	e0ae      	b.n	80022c6 <_svfiprintf_r+0x1c6>
 8002168:	6962      	ldr	r2, [r4, #20]
 800216a:	9b05      	ldr	r3, [sp, #20]
 800216c:	4694      	mov	ip, r2
 800216e:	4463      	add	r3, ip
 8002170:	6163      	str	r3, [r4, #20]
 8002172:	782b      	ldrb	r3, [r5, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d100      	bne.n	800217a <_svfiprintf_r+0x7a>
 8002178:	e0a5      	b.n	80022c6 <_svfiprintf_r+0x1c6>
 800217a:	2201      	movs	r2, #1
 800217c:	2300      	movs	r3, #0
 800217e:	4252      	negs	r2, r2
 8002180:	6062      	str	r2, [r4, #4]
 8002182:	a904      	add	r1, sp, #16
 8002184:	3254      	adds	r2, #84	; 0x54
 8002186:	1852      	adds	r2, r2, r1
 8002188:	1c6e      	adds	r6, r5, #1
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	60e3      	str	r3, [r4, #12]
 800218e:	60a3      	str	r3, [r4, #8]
 8002190:	7013      	strb	r3, [r2, #0]
 8002192:	65a3      	str	r3, [r4, #88]	; 0x58
 8002194:	7831      	ldrb	r1, [r6, #0]
 8002196:	2205      	movs	r2, #5
 8002198:	4853      	ldr	r0, [pc, #332]	; (80022e8 <_svfiprintf_r+0x1e8>)
 800219a:	f000 ff0f 	bl	8002fbc <memchr>
 800219e:	1c75      	adds	r5, r6, #1
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d11f      	bne.n	80021e4 <_svfiprintf_r+0xe4>
 80021a4:	6822      	ldr	r2, [r4, #0]
 80021a6:	06d3      	lsls	r3, r2, #27
 80021a8:	d504      	bpl.n	80021b4 <_svfiprintf_r+0xb4>
 80021aa:	2353      	movs	r3, #83	; 0x53
 80021ac:	a904      	add	r1, sp, #16
 80021ae:	185b      	adds	r3, r3, r1
 80021b0:	2120      	movs	r1, #32
 80021b2:	7019      	strb	r1, [r3, #0]
 80021b4:	0713      	lsls	r3, r2, #28
 80021b6:	d504      	bpl.n	80021c2 <_svfiprintf_r+0xc2>
 80021b8:	2353      	movs	r3, #83	; 0x53
 80021ba:	a904      	add	r1, sp, #16
 80021bc:	185b      	adds	r3, r3, r1
 80021be:	212b      	movs	r1, #43	; 0x2b
 80021c0:	7019      	strb	r1, [r3, #0]
 80021c2:	7833      	ldrb	r3, [r6, #0]
 80021c4:	2b2a      	cmp	r3, #42	; 0x2a
 80021c6:	d016      	beq.n	80021f6 <_svfiprintf_r+0xf6>
 80021c8:	0035      	movs	r5, r6
 80021ca:	2100      	movs	r1, #0
 80021cc:	200a      	movs	r0, #10
 80021ce:	68e3      	ldr	r3, [r4, #12]
 80021d0:	782a      	ldrb	r2, [r5, #0]
 80021d2:	1c6e      	adds	r6, r5, #1
 80021d4:	3a30      	subs	r2, #48	; 0x30
 80021d6:	2a09      	cmp	r2, #9
 80021d8:	d94e      	bls.n	8002278 <_svfiprintf_r+0x178>
 80021da:	2900      	cmp	r1, #0
 80021dc:	d018      	beq.n	8002210 <_svfiprintf_r+0x110>
 80021de:	e010      	b.n	8002202 <_svfiprintf_r+0x102>
 80021e0:	3501      	adds	r5, #1
 80021e2:	e7b1      	b.n	8002148 <_svfiprintf_r+0x48>
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <_svfiprintf_r+0x1e8>)
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	1ac0      	subs	r0, r0, r3
 80021ea:	2301      	movs	r3, #1
 80021ec:	4083      	lsls	r3, r0
 80021ee:	4313      	orrs	r3, r2
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	002e      	movs	r6, r5
 80021f4:	e7ce      	b.n	8002194 <_svfiprintf_r+0x94>
 80021f6:	9b07      	ldr	r3, [sp, #28]
 80021f8:	1d19      	adds	r1, r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	9107      	str	r1, [sp, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db01      	blt.n	8002206 <_svfiprintf_r+0x106>
 8002202:	930b      	str	r3, [sp, #44]	; 0x2c
 8002204:	e004      	b.n	8002210 <_svfiprintf_r+0x110>
 8002206:	425b      	negs	r3, r3
 8002208:	60e3      	str	r3, [r4, #12]
 800220a:	2302      	movs	r3, #2
 800220c:	4313      	orrs	r3, r2
 800220e:	6023      	str	r3, [r4, #0]
 8002210:	782b      	ldrb	r3, [r5, #0]
 8002212:	2b2e      	cmp	r3, #46	; 0x2e
 8002214:	d10a      	bne.n	800222c <_svfiprintf_r+0x12c>
 8002216:	786b      	ldrb	r3, [r5, #1]
 8002218:	2b2a      	cmp	r3, #42	; 0x2a
 800221a:	d135      	bne.n	8002288 <_svfiprintf_r+0x188>
 800221c:	9b07      	ldr	r3, [sp, #28]
 800221e:	3502      	adds	r5, #2
 8002220:	1d1a      	adds	r2, r3, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	9207      	str	r2, [sp, #28]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db2b      	blt.n	8002282 <_svfiprintf_r+0x182>
 800222a:	9309      	str	r3, [sp, #36]	; 0x24
 800222c:	4e2f      	ldr	r6, [pc, #188]	; (80022ec <_svfiprintf_r+0x1ec>)
 800222e:	7829      	ldrb	r1, [r5, #0]
 8002230:	2203      	movs	r2, #3
 8002232:	0030      	movs	r0, r6
 8002234:	f000 fec2 	bl	8002fbc <memchr>
 8002238:	2800      	cmp	r0, #0
 800223a:	d006      	beq.n	800224a <_svfiprintf_r+0x14a>
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	1b80      	subs	r0, r0, r6
 8002240:	4083      	lsls	r3, r0
 8002242:	6822      	ldr	r2, [r4, #0]
 8002244:	3501      	adds	r5, #1
 8002246:	4313      	orrs	r3, r2
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	7829      	ldrb	r1, [r5, #0]
 800224c:	2206      	movs	r2, #6
 800224e:	4828      	ldr	r0, [pc, #160]	; (80022f0 <_svfiprintf_r+0x1f0>)
 8002250:	1c6e      	adds	r6, r5, #1
 8002252:	7621      	strb	r1, [r4, #24]
 8002254:	f000 feb2 	bl	8002fbc <memchr>
 8002258:	2800      	cmp	r0, #0
 800225a:	d03c      	beq.n	80022d6 <_svfiprintf_r+0x1d6>
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <_svfiprintf_r+0x1f4>)
 800225e:	2b00      	cmp	r3, #0
 8002260:	d125      	bne.n	80022ae <_svfiprintf_r+0x1ae>
 8002262:	2207      	movs	r2, #7
 8002264:	9b07      	ldr	r3, [sp, #28]
 8002266:	3307      	adds	r3, #7
 8002268:	4393      	bics	r3, r2
 800226a:	3308      	adds	r3, #8
 800226c:	9307      	str	r3, [sp, #28]
 800226e:	6963      	ldr	r3, [r4, #20]
 8002270:	9a04      	ldr	r2, [sp, #16]
 8002272:	189b      	adds	r3, r3, r2
 8002274:	6163      	str	r3, [r4, #20]
 8002276:	e766      	b.n	8002146 <_svfiprintf_r+0x46>
 8002278:	4343      	muls	r3, r0
 800227a:	2101      	movs	r1, #1
 800227c:	189b      	adds	r3, r3, r2
 800227e:	0035      	movs	r5, r6
 8002280:	e7a6      	b.n	80021d0 <_svfiprintf_r+0xd0>
 8002282:	2301      	movs	r3, #1
 8002284:	425b      	negs	r3, r3
 8002286:	e7d0      	b.n	800222a <_svfiprintf_r+0x12a>
 8002288:	2300      	movs	r3, #0
 800228a:	200a      	movs	r0, #10
 800228c:	001a      	movs	r2, r3
 800228e:	3501      	adds	r5, #1
 8002290:	6063      	str	r3, [r4, #4]
 8002292:	7829      	ldrb	r1, [r5, #0]
 8002294:	1c6e      	adds	r6, r5, #1
 8002296:	3930      	subs	r1, #48	; 0x30
 8002298:	2909      	cmp	r1, #9
 800229a:	d903      	bls.n	80022a4 <_svfiprintf_r+0x1a4>
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0c5      	beq.n	800222c <_svfiprintf_r+0x12c>
 80022a0:	9209      	str	r2, [sp, #36]	; 0x24
 80022a2:	e7c3      	b.n	800222c <_svfiprintf_r+0x12c>
 80022a4:	4342      	muls	r2, r0
 80022a6:	2301      	movs	r3, #1
 80022a8:	1852      	adds	r2, r2, r1
 80022aa:	0035      	movs	r5, r6
 80022ac:	e7f1      	b.n	8002292 <_svfiprintf_r+0x192>
 80022ae:	ab07      	add	r3, sp, #28
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	003a      	movs	r2, r7
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_svfiprintf_r+0x1f8>)
 80022b6:	0021      	movs	r1, r4
 80022b8:	9803      	ldr	r0, [sp, #12]
 80022ba:	e000      	b.n	80022be <_svfiprintf_r+0x1be>
 80022bc:	bf00      	nop
 80022be:	9004      	str	r0, [sp, #16]
 80022c0:	9b04      	ldr	r3, [sp, #16]
 80022c2:	3301      	adds	r3, #1
 80022c4:	d1d3      	bne.n	800226e <_svfiprintf_r+0x16e>
 80022c6:	89bb      	ldrh	r3, [r7, #12]
 80022c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80022ca:	065b      	lsls	r3, r3, #25
 80022cc:	d400      	bmi.n	80022d0 <_svfiprintf_r+0x1d0>
 80022ce:	e72e      	b.n	800212e <_svfiprintf_r+0x2e>
 80022d0:	2001      	movs	r0, #1
 80022d2:	4240      	negs	r0, r0
 80022d4:	e72b      	b.n	800212e <_svfiprintf_r+0x2e>
 80022d6:	ab07      	add	r3, sp, #28
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	003a      	movs	r2, r7
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <_svfiprintf_r+0x1f8>)
 80022de:	0021      	movs	r1, r4
 80022e0:	9803      	ldr	r0, [sp, #12]
 80022e2:	f000 fa43 	bl	800276c <_printf_i>
 80022e6:	e7ea      	b.n	80022be <_svfiprintf_r+0x1be>
 80022e8:	0800329c 	.word	0x0800329c
 80022ec:	080032a2 	.word	0x080032a2
 80022f0:	080032a6 	.word	0x080032a6
 80022f4:	00000000 	.word	0x00000000
 80022f8:	0800203d 	.word	0x0800203d

080022fc <_sungetc_r>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	0014      	movs	r4, r2
 8002300:	1c4b      	adds	r3, r1, #1
 8002302:	d103      	bne.n	800230c <_sungetc_r+0x10>
 8002304:	2501      	movs	r5, #1
 8002306:	426d      	negs	r5, r5
 8002308:	0028      	movs	r0, r5
 800230a:	bd70      	pop	{r4, r5, r6, pc}
 800230c:	8993      	ldrh	r3, [r2, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	4393      	bics	r3, r2
 8002312:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002314:	81a3      	strh	r3, [r4, #12]
 8002316:	b2ce      	uxtb	r6, r1
 8002318:	b2cd      	uxtb	r5, r1
 800231a:	6863      	ldr	r3, [r4, #4]
 800231c:	2a00      	cmp	r2, #0
 800231e:	d010      	beq.n	8002342 <_sungetc_r+0x46>
 8002320:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002322:	429a      	cmp	r2, r3
 8002324:	dd07      	ble.n	8002336 <_sungetc_r+0x3a>
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	3b01      	subs	r3, #1
 800232a:	6023      	str	r3, [r4, #0]
 800232c:	701e      	strb	r6, [r3, #0]
 800232e:	6863      	ldr	r3, [r4, #4]
 8002330:	3301      	adds	r3, #1
 8002332:	6063      	str	r3, [r4, #4]
 8002334:	e7e8      	b.n	8002308 <_sungetc_r+0xc>
 8002336:	0021      	movs	r1, r4
 8002338:	f000 fdde 	bl	8002ef8 <__submore>
 800233c:	2800      	cmp	r0, #0
 800233e:	d0f2      	beq.n	8002326 <_sungetc_r+0x2a>
 8002340:	e7e0      	b.n	8002304 <_sungetc_r+0x8>
 8002342:	6921      	ldr	r1, [r4, #16]
 8002344:	6822      	ldr	r2, [r4, #0]
 8002346:	2900      	cmp	r1, #0
 8002348:	d007      	beq.n	800235a <_sungetc_r+0x5e>
 800234a:	4291      	cmp	r1, r2
 800234c:	d205      	bcs.n	800235a <_sungetc_r+0x5e>
 800234e:	1e51      	subs	r1, r2, #1
 8002350:	7808      	ldrb	r0, [r1, #0]
 8002352:	42a8      	cmp	r0, r5
 8002354:	d101      	bne.n	800235a <_sungetc_r+0x5e>
 8002356:	6021      	str	r1, [r4, #0]
 8002358:	e7ea      	b.n	8002330 <_sungetc_r+0x34>
 800235a:	6423      	str	r3, [r4, #64]	; 0x40
 800235c:	0023      	movs	r3, r4
 800235e:	3344      	adds	r3, #68	; 0x44
 8002360:	6363      	str	r3, [r4, #52]	; 0x34
 8002362:	2303      	movs	r3, #3
 8002364:	63a3      	str	r3, [r4, #56]	; 0x38
 8002366:	0023      	movs	r3, r4
 8002368:	3346      	adds	r3, #70	; 0x46
 800236a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800236c:	701e      	strb	r6, [r3, #0]
 800236e:	6023      	str	r3, [r4, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	e7de      	b.n	8002332 <_sungetc_r+0x36>

08002374 <__ssrefill_r>:
 8002374:	b510      	push	{r4, lr}
 8002376:	000c      	movs	r4, r1
 8002378:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800237a:	2900      	cmp	r1, #0
 800237c:	d00e      	beq.n	800239c <__ssrefill_r+0x28>
 800237e:	0023      	movs	r3, r4
 8002380:	3344      	adds	r3, #68	; 0x44
 8002382:	4299      	cmp	r1, r3
 8002384:	d001      	beq.n	800238a <__ssrefill_r+0x16>
 8002386:	f000 fe37 	bl	8002ff8 <_free_r>
 800238a:	2000      	movs	r0, #0
 800238c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800238e:	6360      	str	r0, [r4, #52]	; 0x34
 8002390:	6063      	str	r3, [r4, #4]
 8002392:	4283      	cmp	r3, r0
 8002394:	d002      	beq.n	800239c <__ssrefill_r+0x28>
 8002396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd10      	pop	{r4, pc}
 800239c:	6923      	ldr	r3, [r4, #16]
 800239e:	2001      	movs	r0, #1
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	89a2      	ldrh	r2, [r4, #12]
 80023a6:	6063      	str	r3, [r4, #4]
 80023a8:	3320      	adds	r3, #32
 80023aa:	4313      	orrs	r3, r2
 80023ac:	81a3      	strh	r3, [r4, #12]
 80023ae:	4240      	negs	r0, r0
 80023b0:	e7f3      	b.n	800239a <__ssrefill_r+0x26>
	...

080023b4 <__ssvfiscanf_r>:
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	0017      	movs	r7, r2
 80023b8:	2200      	movs	r2, #0
 80023ba:	4cb0      	ldr	r4, [pc, #704]	; (800267c <__ssvfiscanf_r+0x2c8>)
 80023bc:	25c0      	movs	r5, #192	; 0xc0
 80023be:	44a5      	add	sp, r4
 80023c0:	9248      	str	r2, [sp, #288]	; 0x120
 80023c2:	9249      	str	r2, [sp, #292]	; 0x124
 80023c4:	aa05      	add	r2, sp, #20
 80023c6:	924a      	str	r2, [sp, #296]	; 0x128
 80023c8:	22be      	movs	r2, #190	; 0xbe
 80023ca:	000c      	movs	r4, r1
 80023cc:	49ac      	ldr	r1, [pc, #688]	; (8002680 <__ssvfiscanf_r+0x2cc>)
 80023ce:	9000      	str	r0, [sp, #0]
 80023d0:	0052      	lsls	r2, r2, #1
 80023d2:	a845      	add	r0, sp, #276	; 0x114
 80023d4:	5081      	str	r1, [r0, r2]
 80023d6:	49ab      	ldr	r1, [pc, #684]	; (8002684 <__ssvfiscanf_r+0x2d0>)
 80023d8:	006d      	lsls	r5, r5, #1
 80023da:	5141      	str	r1, [r0, r5]
 80023dc:	9304      	str	r3, [sp, #16]
 80023de:	783b      	ldrb	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d100      	bne.n	80023e6 <__ssvfiscanf_r+0x32>
 80023e4:	e148      	b.n	8002678 <__ssvfiscanf_r+0x2c4>
 80023e6:	f000 fdc9 	bl	8002f7c <__locale_ctype_ptr>
 80023ea:	2208      	movs	r2, #8
 80023ec:	783b      	ldrb	r3, [r7, #0]
 80023ee:	1c7e      	adds	r6, r7, #1
 80023f0:	18c0      	adds	r0, r0, r3
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	7843      	ldrb	r3, [r0, #1]
 80023f6:	4013      	ands	r3, r2
 80023f8:	d020      	beq.n	800243c <__ssvfiscanf_r+0x88>
 80023fa:	6863      	ldr	r3, [r4, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	dd14      	ble.n	800242a <__ssvfiscanf_r+0x76>
 8002400:	f000 fdbc 	bl	8002f7c <__locale_ctype_ptr>
 8002404:	2108      	movs	r1, #8
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	1880      	adds	r0, r0, r2
 800240c:	7842      	ldrb	r2, [r0, #1]
 800240e:	420a      	tst	r2, r1
 8002410:	d101      	bne.n	8002416 <__ssvfiscanf_r+0x62>
 8002412:	0037      	movs	r7, r6
 8002414:	e7e3      	b.n	80023de <__ssvfiscanf_r+0x2a>
 8002416:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8002418:	3301      	adds	r3, #1
 800241a:	9201      	str	r2, [sp, #4]
 800241c:	3201      	adds	r2, #1
 800241e:	9249      	str	r2, [sp, #292]	; 0x124
 8002420:	6862      	ldr	r2, [r4, #4]
 8002422:	6023      	str	r3, [r4, #0]
 8002424:	3a01      	subs	r2, #1
 8002426:	6062      	str	r2, [r4, #4]
 8002428:	e7e7      	b.n	80023fa <__ssvfiscanf_r+0x46>
 800242a:	ab45      	add	r3, sp, #276	; 0x114
 800242c:	595b      	ldr	r3, [r3, r5]
 800242e:	0021      	movs	r1, r4
 8002430:	9800      	ldr	r0, [sp, #0]
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	4798      	blx	r3
 8002436:	2800      	cmp	r0, #0
 8002438:	d0e2      	beq.n	8002400 <__ssvfiscanf_r+0x4c>
 800243a:	e7ea      	b.n	8002412 <__ssvfiscanf_r+0x5e>
 800243c:	9a01      	ldr	r2, [sp, #4]
 800243e:	2a25      	cmp	r2, #37	; 0x25
 8002440:	d16d      	bne.n	800251e <__ssvfiscanf_r+0x16a>
 8002442:	9347      	str	r3, [sp, #284]	; 0x11c
 8002444:	9345      	str	r3, [sp, #276]	; 0x114
 8002446:	787b      	ldrb	r3, [r7, #1]
 8002448:	2b2a      	cmp	r3, #42	; 0x2a
 800244a:	d102      	bne.n	8002452 <__ssvfiscanf_r+0x9e>
 800244c:	3b1a      	subs	r3, #26
 800244e:	9345      	str	r3, [sp, #276]	; 0x114
 8002450:	1cbe      	adds	r6, r7, #2
 8002452:	0037      	movs	r7, r6
 8002454:	220a      	movs	r2, #10
 8002456:	7839      	ldrb	r1, [r7, #0]
 8002458:	1c7b      	adds	r3, r7, #1
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	000b      	movs	r3, r1
 800245e:	3b30      	subs	r3, #48	; 0x30
 8002460:	2b09      	cmp	r3, #9
 8002462:	d924      	bls.n	80024ae <__ssvfiscanf_r+0xfa>
 8002464:	4e88      	ldr	r6, [pc, #544]	; (8002688 <__ssvfiscanf_r+0x2d4>)
 8002466:	2203      	movs	r2, #3
 8002468:	0030      	movs	r0, r6
 800246a:	f000 fda7 	bl	8002fbc <memchr>
 800246e:	2800      	cmp	r0, #0
 8002470:	d007      	beq.n	8002482 <__ssvfiscanf_r+0xce>
 8002472:	2301      	movs	r3, #1
 8002474:	1b80      	subs	r0, r0, r6
 8002476:	4083      	lsls	r3, r0
 8002478:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800247a:	9f02      	ldr	r7, [sp, #8]
 800247c:	4313      	orrs	r3, r2
 800247e:	9203      	str	r2, [sp, #12]
 8002480:	9345      	str	r3, [sp, #276]	; 0x114
 8002482:	783b      	ldrb	r3, [r7, #0]
 8002484:	1c7e      	adds	r6, r7, #1
 8002486:	2b67      	cmp	r3, #103	; 0x67
 8002488:	d835      	bhi.n	80024f6 <__ssvfiscanf_r+0x142>
 800248a:	2b65      	cmp	r3, #101	; 0x65
 800248c:	d300      	bcc.n	8002490 <__ssvfiscanf_r+0xdc>
 800248e:	e0b8      	b.n	8002602 <__ssvfiscanf_r+0x24e>
 8002490:	2b47      	cmp	r3, #71	; 0x47
 8002492:	d814      	bhi.n	80024be <__ssvfiscanf_r+0x10a>
 8002494:	2b45      	cmp	r3, #69	; 0x45
 8002496:	d300      	bcc.n	800249a <__ssvfiscanf_r+0xe6>
 8002498:	e0b3      	b.n	8002602 <__ssvfiscanf_r+0x24e>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d100      	bne.n	80024a0 <__ssvfiscanf_r+0xec>
 800249e:	e0e8      	b.n	8002672 <__ssvfiscanf_r+0x2be>
 80024a0:	2b25      	cmp	r3, #37	; 0x25
 80024a2:	d03c      	beq.n	800251e <__ssvfiscanf_r+0x16a>
 80024a4:	2303      	movs	r3, #3
 80024a6:	934b      	str	r3, [sp, #300]	; 0x12c
 80024a8:	3307      	adds	r3, #7
 80024aa:	9346      	str	r3, [sp, #280]	; 0x118
 80024ac:	e066      	b.n	800257c <__ssvfiscanf_r+0x1c8>
 80024ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80024b0:	9f02      	ldr	r7, [sp, #8]
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	4353      	muls	r3, r2
 80024b6:	3b30      	subs	r3, #48	; 0x30
 80024b8:	1859      	adds	r1, r3, r1
 80024ba:	9147      	str	r1, [sp, #284]	; 0x11c
 80024bc:	e7cb      	b.n	8002456 <__ssvfiscanf_r+0xa2>
 80024be:	2b5b      	cmp	r3, #91	; 0x5b
 80024c0:	d100      	bne.n	80024c4 <__ssvfiscanf_r+0x110>
 80024c2:	e07a      	b.n	80025ba <__ssvfiscanf_r+0x206>
 80024c4:	d810      	bhi.n	80024e8 <__ssvfiscanf_r+0x134>
 80024c6:	2b58      	cmp	r3, #88	; 0x58
 80024c8:	d1ec      	bne.n	80024a4 <__ssvfiscanf_r+0xf0>
 80024ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	9901      	ldr	r1, [sp, #4]
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	430a      	orrs	r2, r1
 80024d6:	9245      	str	r2, [sp, #276]	; 0x114
 80024d8:	2210      	movs	r2, #16
 80024da:	9246      	str	r2, [sp, #280]	; 0x118
 80024dc:	226e      	movs	r2, #110	; 0x6e
 80024de:	429a      	cmp	r2, r3
 80024e0:	419b      	sbcs	r3, r3
 80024e2:	425b      	negs	r3, r3
 80024e4:	3303      	adds	r3, #3
 80024e6:	e048      	b.n	800257a <__ssvfiscanf_r+0x1c6>
 80024e8:	2b63      	cmp	r3, #99	; 0x63
 80024ea:	d100      	bne.n	80024ee <__ssvfiscanf_r+0x13a>
 80024ec:	e072      	b.n	80025d4 <__ssvfiscanf_r+0x220>
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d1d8      	bne.n	80024a4 <__ssvfiscanf_r+0xf0>
 80024f2:	220a      	movs	r2, #10
 80024f4:	e7f1      	b.n	80024da <__ssvfiscanf_r+0x126>
 80024f6:	2b70      	cmp	r3, #112	; 0x70
 80024f8:	d035      	beq.n	8002566 <__ssvfiscanf_r+0x1b2>
 80024fa:	d808      	bhi.n	800250e <__ssvfiscanf_r+0x15a>
 80024fc:	2b6e      	cmp	r3, #110	; 0x6e
 80024fe:	d100      	bne.n	8002502 <__ssvfiscanf_r+0x14e>
 8002500:	e070      	b.n	80025e4 <__ssvfiscanf_r+0x230>
 8002502:	d837      	bhi.n	8002574 <__ssvfiscanf_r+0x1c0>
 8002504:	2b69      	cmp	r3, #105	; 0x69
 8002506:	d1cd      	bne.n	80024a4 <__ssvfiscanf_r+0xf0>
 8002508:	2300      	movs	r3, #0
 800250a:	9346      	str	r3, [sp, #280]	; 0x118
 800250c:	e7ea      	b.n	80024e4 <__ssvfiscanf_r+0x130>
 800250e:	2b75      	cmp	r3, #117	; 0x75
 8002510:	d0ef      	beq.n	80024f2 <__ssvfiscanf_r+0x13e>
 8002512:	2b78      	cmp	r3, #120	; 0x78
 8002514:	d0d9      	beq.n	80024ca <__ssvfiscanf_r+0x116>
 8002516:	2b73      	cmp	r3, #115	; 0x73
 8002518:	d1c4      	bne.n	80024a4 <__ssvfiscanf_r+0xf0>
 800251a:	2302      	movs	r3, #2
 800251c:	e02d      	b.n	800257a <__ssvfiscanf_r+0x1c6>
 800251e:	6863      	ldr	r3, [r4, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	dd0f      	ble.n	8002544 <__ssvfiscanf_r+0x190>
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	9901      	ldr	r1, [sp, #4]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	428a      	cmp	r2, r1
 800252c:	d000      	beq.n	8002530 <__ssvfiscanf_r+0x17c>
 800252e:	e0a3      	b.n	8002678 <__ssvfiscanf_r+0x2c4>
 8002530:	3301      	adds	r3, #1
 8002532:	6862      	ldr	r2, [r4, #4]
 8002534:	6023      	str	r3, [r4, #0]
 8002536:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8002538:	3a01      	subs	r2, #1
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	3301      	adds	r3, #1
 800253e:	6062      	str	r2, [r4, #4]
 8002540:	9349      	str	r3, [sp, #292]	; 0x124
 8002542:	e766      	b.n	8002412 <__ssvfiscanf_r+0x5e>
 8002544:	ab45      	add	r3, sp, #276	; 0x114
 8002546:	595b      	ldr	r3, [r3, r5]
 8002548:	0021      	movs	r1, r4
 800254a:	9800      	ldr	r0, [sp, #0]
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	4798      	blx	r3
 8002550:	2800      	cmp	r0, #0
 8002552:	d0e7      	beq.n	8002524 <__ssvfiscanf_r+0x170>
 8002554:	9848      	ldr	r0, [sp, #288]	; 0x120
 8002556:	2800      	cmp	r0, #0
 8002558:	d000      	beq.n	800255c <__ssvfiscanf_r+0x1a8>
 800255a:	e086      	b.n	800266a <__ssvfiscanf_r+0x2b6>
 800255c:	3801      	subs	r0, #1
 800255e:	23a7      	movs	r3, #167	; 0xa7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	449d      	add	sp, r3
 8002564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002566:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002568:	9201      	str	r2, [sp, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	9901      	ldr	r1, [sp, #4]
 800256e:	430a      	orrs	r2, r1
 8002570:	9245      	str	r2, [sp, #276]	; 0x114
 8002572:	e7aa      	b.n	80024ca <__ssvfiscanf_r+0x116>
 8002574:	2308      	movs	r3, #8
 8002576:	9346      	str	r3, [sp, #280]	; 0x118
 8002578:	3b04      	subs	r3, #4
 800257a:	934b      	str	r3, [sp, #300]	; 0x12c
 800257c:	6863      	ldr	r3, [r4, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	dd41      	ble.n	8002606 <__ssvfiscanf_r+0x252>
 8002582:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	065b      	lsls	r3, r3, #25
 8002588:	d408      	bmi.n	800259c <__ssvfiscanf_r+0x1e8>
 800258a:	f000 fcf7 	bl	8002f7c <__locale_ctype_ptr>
 800258e:	2108      	movs	r1, #8
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	1880      	adds	r0, r0, r2
 8002596:	7842      	ldrb	r2, [r0, #1]
 8002598:	420a      	tst	r2, r1
 800259a:	d13d      	bne.n	8002618 <__ssvfiscanf_r+0x264>
 800259c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800259e:	2b02      	cmp	r3, #2
 80025a0:	dc4f      	bgt.n	8002642 <__ssvfiscanf_r+0x28e>
 80025a2:	ab04      	add	r3, sp, #16
 80025a4:	0022      	movs	r2, r4
 80025a6:	a945      	add	r1, sp, #276	; 0x114
 80025a8:	9800      	ldr	r0, [sp, #0]
 80025aa:	f000 f9e7 	bl	800297c <_scanf_chars>
 80025ae:	2801      	cmp	r0, #1
 80025b0:	d062      	beq.n	8002678 <__ssvfiscanf_r+0x2c4>
 80025b2:	2802      	cmp	r0, #2
 80025b4:	d000      	beq.n	80025b8 <__ssvfiscanf_r+0x204>
 80025b6:	e72c      	b.n	8002412 <__ssvfiscanf_r+0x5e>
 80025b8:	e7cc      	b.n	8002554 <__ssvfiscanf_r+0x1a0>
 80025ba:	0031      	movs	r1, r6
 80025bc:	a805      	add	r0, sp, #20
 80025be:	f000 fb45 	bl	8002c4c <__sccl>
 80025c2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80025c4:	0006      	movs	r6, r0
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2340      	movs	r3, #64	; 0x40
 80025ca:	9a01      	ldr	r2, [sp, #4]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	9345      	str	r3, [sp, #276]	; 0x114
 80025d0:	2301      	movs	r3, #1
 80025d2:	e7d2      	b.n	800257a <__ssvfiscanf_r+0x1c6>
 80025d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2340      	movs	r3, #64	; 0x40
 80025da:	9a01      	ldr	r2, [sp, #4]
 80025dc:	4313      	orrs	r3, r2
 80025de:	9345      	str	r3, [sp, #276]	; 0x114
 80025e0:	2300      	movs	r3, #0
 80025e2:	e7ca      	b.n	800257a <__ssvfiscanf_r+0x1c6>
 80025e4:	9845      	ldr	r0, [sp, #276]	; 0x114
 80025e6:	06c3      	lsls	r3, r0, #27
 80025e8:	d500      	bpl.n	80025ec <__ssvfiscanf_r+0x238>
 80025ea:	e712      	b.n	8002412 <__ssvfiscanf_r+0x5e>
 80025ec:	9b04      	ldr	r3, [sp, #16]
 80025ee:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80025f0:	1d19      	adds	r1, r3, #4
 80025f2:	9104      	str	r1, [sp, #16]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	07c7      	lsls	r7, r0, #31
 80025f8:	d501      	bpl.n	80025fe <__ssvfiscanf_r+0x24a>
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	e709      	b.n	8002412 <__ssvfiscanf_r+0x5e>
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e707      	b.n	8002412 <__ssvfiscanf_r+0x5e>
 8002602:	2305      	movs	r3, #5
 8002604:	e7b9      	b.n	800257a <__ssvfiscanf_r+0x1c6>
 8002606:	ab45      	add	r3, sp, #276	; 0x114
 8002608:	595b      	ldr	r3, [r3, r5]
 800260a:	0021      	movs	r1, r4
 800260c:	9800      	ldr	r0, [sp, #0]
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	4798      	blx	r3
 8002612:	2800      	cmp	r0, #0
 8002614:	d0b5      	beq.n	8002582 <__ssvfiscanf_r+0x1ce>
 8002616:	e79d      	b.n	8002554 <__ssvfiscanf_r+0x1a0>
 8002618:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800261a:	9201      	str	r2, [sp, #4]
 800261c:	3201      	adds	r2, #1
 800261e:	9249      	str	r2, [sp, #292]	; 0x124
 8002620:	6862      	ldr	r2, [r4, #4]
 8002622:	3a01      	subs	r2, #1
 8002624:	6062      	str	r2, [r4, #4]
 8002626:	2a00      	cmp	r2, #0
 8002628:	dd02      	ble.n	8002630 <__ssvfiscanf_r+0x27c>
 800262a:	3301      	adds	r3, #1
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	e7ac      	b.n	800258a <__ssvfiscanf_r+0x1d6>
 8002630:	ab45      	add	r3, sp, #276	; 0x114
 8002632:	595b      	ldr	r3, [r3, r5]
 8002634:	0021      	movs	r1, r4
 8002636:	9800      	ldr	r0, [sp, #0]
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	4798      	blx	r3
 800263c:	2800      	cmp	r0, #0
 800263e:	d0a4      	beq.n	800258a <__ssvfiscanf_r+0x1d6>
 8002640:	e788      	b.n	8002554 <__ssvfiscanf_r+0x1a0>
 8002642:	2b04      	cmp	r3, #4
 8002644:	dc06      	bgt.n	8002654 <__ssvfiscanf_r+0x2a0>
 8002646:	ab04      	add	r3, sp, #16
 8002648:	0022      	movs	r2, r4
 800264a:	a945      	add	r1, sp, #276	; 0x114
 800264c:	9800      	ldr	r0, [sp, #0]
 800264e:	f000 f9fb 	bl	8002a48 <_scanf_i>
 8002652:	e7ac      	b.n	80025ae <__ssvfiscanf_r+0x1fa>
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <__ssvfiscanf_r+0x2d8>)
 8002656:	2b00      	cmp	r3, #0
 8002658:	d100      	bne.n	800265c <__ssvfiscanf_r+0x2a8>
 800265a:	e6da      	b.n	8002412 <__ssvfiscanf_r+0x5e>
 800265c:	ab04      	add	r3, sp, #16
 800265e:	0022      	movs	r2, r4
 8002660:	a945      	add	r1, sp, #276	; 0x114
 8002662:	9800      	ldr	r0, [sp, #0]
 8002664:	e000      	b.n	8002668 <__ssvfiscanf_r+0x2b4>
 8002666:	bf00      	nop
 8002668:	e7a1      	b.n	80025ae <__ssvfiscanf_r+0x1fa>
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	065b      	lsls	r3, r3, #25
 800266e:	d400      	bmi.n	8002672 <__ssvfiscanf_r+0x2be>
 8002670:	e775      	b.n	800255e <__ssvfiscanf_r+0x1aa>
 8002672:	2001      	movs	r0, #1
 8002674:	4240      	negs	r0, r0
 8002676:	e772      	b.n	800255e <__ssvfiscanf_r+0x1aa>
 8002678:	9848      	ldr	r0, [sp, #288]	; 0x120
 800267a:	e770      	b.n	800255e <__ssvfiscanf_r+0x1aa>
 800267c:	fffffd64 	.word	0xfffffd64
 8002680:	080022fd 	.word	0x080022fd
 8002684:	08002375 	.word	0x08002375
 8002688:	080032a2 	.word	0x080032a2
 800268c:	00000000 	.word	0x00000000

08002690 <_printf_common>:
 8002690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002692:	0015      	movs	r5, r2
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	688a      	ldr	r2, [r1, #8]
 8002698:	690b      	ldr	r3, [r1, #16]
 800269a:	9000      	str	r0, [sp, #0]
 800269c:	000c      	movs	r4, r1
 800269e:	4293      	cmp	r3, r2
 80026a0:	da00      	bge.n	80026a4 <_printf_common+0x14>
 80026a2:	0013      	movs	r3, r2
 80026a4:	0022      	movs	r2, r4
 80026a6:	602b      	str	r3, [r5, #0]
 80026a8:	3243      	adds	r2, #67	; 0x43
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d001      	beq.n	80026b4 <_printf_common+0x24>
 80026b0:	3301      	adds	r3, #1
 80026b2:	602b      	str	r3, [r5, #0]
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	069b      	lsls	r3, r3, #26
 80026b8:	d502      	bpl.n	80026c0 <_printf_common+0x30>
 80026ba:	682b      	ldr	r3, [r5, #0]
 80026bc:	3302      	adds	r3, #2
 80026be:	602b      	str	r3, [r5, #0]
 80026c0:	2706      	movs	r7, #6
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	401f      	ands	r7, r3
 80026c6:	d027      	beq.n	8002718 <_printf_common+0x88>
 80026c8:	0023      	movs	r3, r4
 80026ca:	3343      	adds	r3, #67	; 0x43
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	4193      	sbcs	r3, r2
 80026d2:	6822      	ldr	r2, [r4, #0]
 80026d4:	0692      	lsls	r2, r2, #26
 80026d6:	d430      	bmi.n	800273a <_printf_common+0xaa>
 80026d8:	0022      	movs	r2, r4
 80026da:	9901      	ldr	r1, [sp, #4]
 80026dc:	3243      	adds	r2, #67	; 0x43
 80026de:	9800      	ldr	r0, [sp, #0]
 80026e0:	9e08      	ldr	r6, [sp, #32]
 80026e2:	47b0      	blx	r6
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d025      	beq.n	8002734 <_printf_common+0xa4>
 80026e8:	2306      	movs	r3, #6
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	682a      	ldr	r2, [r5, #0]
 80026ee:	68e1      	ldr	r1, [r4, #12]
 80026f0:	4003      	ands	r3, r0
 80026f2:	2500      	movs	r5, #0
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d103      	bne.n	8002700 <_printf_common+0x70>
 80026f8:	1a8d      	subs	r5, r1, r2
 80026fa:	43eb      	mvns	r3, r5
 80026fc:	17db      	asrs	r3, r3, #31
 80026fe:	401d      	ands	r5, r3
 8002700:	68a3      	ldr	r3, [r4, #8]
 8002702:	6922      	ldr	r2, [r4, #16]
 8002704:	4293      	cmp	r3, r2
 8002706:	dd01      	ble.n	800270c <_printf_common+0x7c>
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	18ed      	adds	r5, r5, r3
 800270c:	2700      	movs	r7, #0
 800270e:	42bd      	cmp	r5, r7
 8002710:	d120      	bne.n	8002754 <_printf_common+0xc4>
 8002712:	2000      	movs	r0, #0
 8002714:	e010      	b.n	8002738 <_printf_common+0xa8>
 8002716:	3701      	adds	r7, #1
 8002718:	68e3      	ldr	r3, [r4, #12]
 800271a:	682a      	ldr	r2, [r5, #0]
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	42bb      	cmp	r3, r7
 8002720:	ddd2      	ble.n	80026c8 <_printf_common+0x38>
 8002722:	0022      	movs	r2, r4
 8002724:	2301      	movs	r3, #1
 8002726:	3219      	adds	r2, #25
 8002728:	9901      	ldr	r1, [sp, #4]
 800272a:	9800      	ldr	r0, [sp, #0]
 800272c:	9e08      	ldr	r6, [sp, #32]
 800272e:	47b0      	blx	r6
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d1f0      	bne.n	8002716 <_printf_common+0x86>
 8002734:	2001      	movs	r0, #1
 8002736:	4240      	negs	r0, r0
 8002738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800273a:	2030      	movs	r0, #48	; 0x30
 800273c:	18e1      	adds	r1, r4, r3
 800273e:	3143      	adds	r1, #67	; 0x43
 8002740:	7008      	strb	r0, [r1, #0]
 8002742:	0021      	movs	r1, r4
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	3145      	adds	r1, #69	; 0x45
 8002748:	7809      	ldrb	r1, [r1, #0]
 800274a:	18a2      	adds	r2, r4, r2
 800274c:	3243      	adds	r2, #67	; 0x43
 800274e:	3302      	adds	r3, #2
 8002750:	7011      	strb	r1, [r2, #0]
 8002752:	e7c1      	b.n	80026d8 <_printf_common+0x48>
 8002754:	0022      	movs	r2, r4
 8002756:	2301      	movs	r3, #1
 8002758:	321a      	adds	r2, #26
 800275a:	9901      	ldr	r1, [sp, #4]
 800275c:	9800      	ldr	r0, [sp, #0]
 800275e:	9e08      	ldr	r6, [sp, #32]
 8002760:	47b0      	blx	r6
 8002762:	1c43      	adds	r3, r0, #1
 8002764:	d0e6      	beq.n	8002734 <_printf_common+0xa4>
 8002766:	3701      	adds	r7, #1
 8002768:	e7d1      	b.n	800270e <_printf_common+0x7e>
	...

0800276c <_printf_i>:
 800276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	9204      	str	r2, [sp, #16]
 8002772:	000a      	movs	r2, r1
 8002774:	3243      	adds	r2, #67	; 0x43
 8002776:	9305      	str	r3, [sp, #20]
 8002778:	9003      	str	r0, [sp, #12]
 800277a:	9202      	str	r2, [sp, #8]
 800277c:	7e0a      	ldrb	r2, [r1, #24]
 800277e:	000c      	movs	r4, r1
 8002780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002782:	2a6e      	cmp	r2, #110	; 0x6e
 8002784:	d100      	bne.n	8002788 <_printf_i+0x1c>
 8002786:	e086      	b.n	8002896 <_printf_i+0x12a>
 8002788:	d81f      	bhi.n	80027ca <_printf_i+0x5e>
 800278a:	2a63      	cmp	r2, #99	; 0x63
 800278c:	d033      	beq.n	80027f6 <_printf_i+0x8a>
 800278e:	d808      	bhi.n	80027a2 <_printf_i+0x36>
 8002790:	2a00      	cmp	r2, #0
 8002792:	d100      	bne.n	8002796 <_printf_i+0x2a>
 8002794:	e08c      	b.n	80028b0 <_printf_i+0x144>
 8002796:	2a58      	cmp	r2, #88	; 0x58
 8002798:	d04d      	beq.n	8002836 <_printf_i+0xca>
 800279a:	0025      	movs	r5, r4
 800279c:	3542      	adds	r5, #66	; 0x42
 800279e:	702a      	strb	r2, [r5, #0]
 80027a0:	e030      	b.n	8002804 <_printf_i+0x98>
 80027a2:	2a64      	cmp	r2, #100	; 0x64
 80027a4:	d001      	beq.n	80027aa <_printf_i+0x3e>
 80027a6:	2a69      	cmp	r2, #105	; 0x69
 80027a8:	d1f7      	bne.n	800279a <_printf_i+0x2e>
 80027aa:	6819      	ldr	r1, [r3, #0]
 80027ac:	6825      	ldr	r5, [r4, #0]
 80027ae:	1d0a      	adds	r2, r1, #4
 80027b0:	0628      	lsls	r0, r5, #24
 80027b2:	d529      	bpl.n	8002808 <_printf_i+0x9c>
 80027b4:	6808      	ldr	r0, [r1, #0]
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	2800      	cmp	r0, #0
 80027ba:	da03      	bge.n	80027c4 <_printf_i+0x58>
 80027bc:	232d      	movs	r3, #45	; 0x2d
 80027be:	9a02      	ldr	r2, [sp, #8]
 80027c0:	4240      	negs	r0, r0
 80027c2:	7013      	strb	r3, [r2, #0]
 80027c4:	4e6b      	ldr	r6, [pc, #428]	; (8002974 <_printf_i+0x208>)
 80027c6:	270a      	movs	r7, #10
 80027c8:	e04f      	b.n	800286a <_printf_i+0xfe>
 80027ca:	2a73      	cmp	r2, #115	; 0x73
 80027cc:	d074      	beq.n	80028b8 <_printf_i+0x14c>
 80027ce:	d808      	bhi.n	80027e2 <_printf_i+0x76>
 80027d0:	2a6f      	cmp	r2, #111	; 0x6f
 80027d2:	d01f      	beq.n	8002814 <_printf_i+0xa8>
 80027d4:	2a70      	cmp	r2, #112	; 0x70
 80027d6:	d1e0      	bne.n	800279a <_printf_i+0x2e>
 80027d8:	2220      	movs	r2, #32
 80027da:	6809      	ldr	r1, [r1, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	6022      	str	r2, [r4, #0]
 80027e0:	e003      	b.n	80027ea <_printf_i+0x7e>
 80027e2:	2a75      	cmp	r2, #117	; 0x75
 80027e4:	d016      	beq.n	8002814 <_printf_i+0xa8>
 80027e6:	2a78      	cmp	r2, #120	; 0x78
 80027e8:	d1d7      	bne.n	800279a <_printf_i+0x2e>
 80027ea:	0022      	movs	r2, r4
 80027ec:	2178      	movs	r1, #120	; 0x78
 80027ee:	3245      	adds	r2, #69	; 0x45
 80027f0:	7011      	strb	r1, [r2, #0]
 80027f2:	4e61      	ldr	r6, [pc, #388]	; (8002978 <_printf_i+0x20c>)
 80027f4:	e022      	b.n	800283c <_printf_i+0xd0>
 80027f6:	0025      	movs	r5, r4
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	3542      	adds	r5, #66	; 0x42
 80027fc:	1d11      	adds	r1, r2, #4
 80027fe:	6019      	str	r1, [r3, #0]
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	702b      	strb	r3, [r5, #0]
 8002804:	2301      	movs	r3, #1
 8002806:	e065      	b.n	80028d4 <_printf_i+0x168>
 8002808:	6808      	ldr	r0, [r1, #0]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	0669      	lsls	r1, r5, #25
 800280e:	d5d3      	bpl.n	80027b8 <_printf_i+0x4c>
 8002810:	b200      	sxth	r0, r0
 8002812:	e7d1      	b.n	80027b8 <_printf_i+0x4c>
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	6825      	ldr	r5, [r4, #0]
 8002818:	1d08      	adds	r0, r1, #4
 800281a:	6018      	str	r0, [r3, #0]
 800281c:	6808      	ldr	r0, [r1, #0]
 800281e:	062e      	lsls	r6, r5, #24
 8002820:	d505      	bpl.n	800282e <_printf_i+0xc2>
 8002822:	4e54      	ldr	r6, [pc, #336]	; (8002974 <_printf_i+0x208>)
 8002824:	2708      	movs	r7, #8
 8002826:	2a6f      	cmp	r2, #111	; 0x6f
 8002828:	d01b      	beq.n	8002862 <_printf_i+0xf6>
 800282a:	270a      	movs	r7, #10
 800282c:	e019      	b.n	8002862 <_printf_i+0xf6>
 800282e:	066d      	lsls	r5, r5, #25
 8002830:	d5f7      	bpl.n	8002822 <_printf_i+0xb6>
 8002832:	b280      	uxth	r0, r0
 8002834:	e7f5      	b.n	8002822 <_printf_i+0xb6>
 8002836:	3145      	adds	r1, #69	; 0x45
 8002838:	4e4e      	ldr	r6, [pc, #312]	; (8002974 <_printf_i+0x208>)
 800283a:	700a      	strb	r2, [r1, #0]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	1d01      	adds	r1, r0, #4
 8002842:	6800      	ldr	r0, [r0, #0]
 8002844:	6019      	str	r1, [r3, #0]
 8002846:	0615      	lsls	r5, r2, #24
 8002848:	d521      	bpl.n	800288e <_printf_i+0x122>
 800284a:	07d3      	lsls	r3, r2, #31
 800284c:	d502      	bpl.n	8002854 <_printf_i+0xe8>
 800284e:	2320      	movs	r3, #32
 8002850:	431a      	orrs	r2, r3
 8002852:	6022      	str	r2, [r4, #0]
 8002854:	2710      	movs	r7, #16
 8002856:	2800      	cmp	r0, #0
 8002858:	d103      	bne.n	8002862 <_printf_i+0xf6>
 800285a:	2320      	movs	r3, #32
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	439a      	bics	r2, r3
 8002860:	6022      	str	r2, [r4, #0]
 8002862:	0023      	movs	r3, r4
 8002864:	2200      	movs	r2, #0
 8002866:	3343      	adds	r3, #67	; 0x43
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	6863      	ldr	r3, [r4, #4]
 800286c:	60a3      	str	r3, [r4, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db58      	blt.n	8002924 <_printf_i+0x1b8>
 8002872:	2204      	movs	r2, #4
 8002874:	6821      	ldr	r1, [r4, #0]
 8002876:	4391      	bics	r1, r2
 8002878:	6021      	str	r1, [r4, #0]
 800287a:	2800      	cmp	r0, #0
 800287c:	d154      	bne.n	8002928 <_printf_i+0x1bc>
 800287e:	9d02      	ldr	r5, [sp, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05a      	beq.n	800293a <_printf_i+0x1ce>
 8002884:	0025      	movs	r5, r4
 8002886:	7833      	ldrb	r3, [r6, #0]
 8002888:	3542      	adds	r5, #66	; 0x42
 800288a:	702b      	strb	r3, [r5, #0]
 800288c:	e055      	b.n	800293a <_printf_i+0x1ce>
 800288e:	0655      	lsls	r5, r2, #25
 8002890:	d5db      	bpl.n	800284a <_printf_i+0xde>
 8002892:	b280      	uxth	r0, r0
 8002894:	e7d9      	b.n	800284a <_printf_i+0xde>
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	680d      	ldr	r5, [r1, #0]
 800289a:	1d10      	adds	r0, r2, #4
 800289c:	6949      	ldr	r1, [r1, #20]
 800289e:	6018      	str	r0, [r3, #0]
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	062e      	lsls	r6, r5, #24
 80028a4:	d501      	bpl.n	80028aa <_printf_i+0x13e>
 80028a6:	6019      	str	r1, [r3, #0]
 80028a8:	e002      	b.n	80028b0 <_printf_i+0x144>
 80028aa:	066d      	lsls	r5, r5, #25
 80028ac:	d5fb      	bpl.n	80028a6 <_printf_i+0x13a>
 80028ae:	8019      	strh	r1, [r3, #0]
 80028b0:	2300      	movs	r3, #0
 80028b2:	9d02      	ldr	r5, [sp, #8]
 80028b4:	6123      	str	r3, [r4, #16]
 80028b6:	e04f      	b.n	8002958 <_printf_i+0x1ec>
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	1d11      	adds	r1, r2, #4
 80028bc:	6019      	str	r1, [r3, #0]
 80028be:	6815      	ldr	r5, [r2, #0]
 80028c0:	2100      	movs	r1, #0
 80028c2:	6862      	ldr	r2, [r4, #4]
 80028c4:	0028      	movs	r0, r5
 80028c6:	f000 fb79 	bl	8002fbc <memchr>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d001      	beq.n	80028d2 <_printf_i+0x166>
 80028ce:	1b40      	subs	r0, r0, r5
 80028d0:	6060      	str	r0, [r4, #4]
 80028d2:	6863      	ldr	r3, [r4, #4]
 80028d4:	6123      	str	r3, [r4, #16]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9a02      	ldr	r2, [sp, #8]
 80028da:	7013      	strb	r3, [r2, #0]
 80028dc:	e03c      	b.n	8002958 <_printf_i+0x1ec>
 80028de:	6923      	ldr	r3, [r4, #16]
 80028e0:	002a      	movs	r2, r5
 80028e2:	9904      	ldr	r1, [sp, #16]
 80028e4:	9803      	ldr	r0, [sp, #12]
 80028e6:	9d05      	ldr	r5, [sp, #20]
 80028e8:	47a8      	blx	r5
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	d03e      	beq.n	800296c <_printf_i+0x200>
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	079b      	lsls	r3, r3, #30
 80028f2:	d415      	bmi.n	8002920 <_printf_i+0x1b4>
 80028f4:	9b07      	ldr	r3, [sp, #28]
 80028f6:	68e0      	ldr	r0, [r4, #12]
 80028f8:	4298      	cmp	r0, r3
 80028fa:	da39      	bge.n	8002970 <_printf_i+0x204>
 80028fc:	0018      	movs	r0, r3
 80028fe:	e037      	b.n	8002970 <_printf_i+0x204>
 8002900:	0022      	movs	r2, r4
 8002902:	2301      	movs	r3, #1
 8002904:	3219      	adds	r2, #25
 8002906:	9904      	ldr	r1, [sp, #16]
 8002908:	9803      	ldr	r0, [sp, #12]
 800290a:	9e05      	ldr	r6, [sp, #20]
 800290c:	47b0      	blx	r6
 800290e:	1c43      	adds	r3, r0, #1
 8002910:	d02c      	beq.n	800296c <_printf_i+0x200>
 8002912:	3501      	adds	r5, #1
 8002914:	68e3      	ldr	r3, [r4, #12]
 8002916:	9a07      	ldr	r2, [sp, #28]
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	42ab      	cmp	r3, r5
 800291c:	dcf0      	bgt.n	8002900 <_printf_i+0x194>
 800291e:	e7e9      	b.n	80028f4 <_printf_i+0x188>
 8002920:	2500      	movs	r5, #0
 8002922:	e7f7      	b.n	8002914 <_printf_i+0x1a8>
 8002924:	2800      	cmp	r0, #0
 8002926:	d0ad      	beq.n	8002884 <_printf_i+0x118>
 8002928:	9d02      	ldr	r5, [sp, #8]
 800292a:	0039      	movs	r1, r7
 800292c:	f7fd fc84 	bl	8000238 <__aeabi_uidivmod>
 8002930:	5c73      	ldrb	r3, [r6, r1]
 8002932:	3d01      	subs	r5, #1
 8002934:	702b      	strb	r3, [r5, #0]
 8002936:	2800      	cmp	r0, #0
 8002938:	d1f7      	bne.n	800292a <_printf_i+0x1be>
 800293a:	2f08      	cmp	r7, #8
 800293c:	d109      	bne.n	8002952 <_printf_i+0x1e6>
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	07db      	lsls	r3, r3, #31
 8002942:	d506      	bpl.n	8002952 <_printf_i+0x1e6>
 8002944:	6863      	ldr	r3, [r4, #4]
 8002946:	6922      	ldr	r2, [r4, #16]
 8002948:	4293      	cmp	r3, r2
 800294a:	dc02      	bgt.n	8002952 <_printf_i+0x1e6>
 800294c:	2330      	movs	r3, #48	; 0x30
 800294e:	3d01      	subs	r5, #1
 8002950:	702b      	strb	r3, [r5, #0]
 8002952:	9b02      	ldr	r3, [sp, #8]
 8002954:	1b5b      	subs	r3, r3, r5
 8002956:	6123      	str	r3, [r4, #16]
 8002958:	9b05      	ldr	r3, [sp, #20]
 800295a:	aa07      	add	r2, sp, #28
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	0021      	movs	r1, r4
 8002960:	9b04      	ldr	r3, [sp, #16]
 8002962:	9803      	ldr	r0, [sp, #12]
 8002964:	f7ff fe94 	bl	8002690 <_printf_common>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d1b8      	bne.n	80028de <_printf_i+0x172>
 800296c:	2001      	movs	r0, #1
 800296e:	4240      	negs	r0, r0
 8002970:	b009      	add	sp, #36	; 0x24
 8002972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002974:	080032ad 	.word	0x080032ad
 8002978:	080032be 	.word	0x080032be

0800297c <_scanf_chars>:
 800297c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800297e:	0015      	movs	r5, r2
 8002980:	688a      	ldr	r2, [r1, #8]
 8002982:	9001      	str	r0, [sp, #4]
 8002984:	000c      	movs	r4, r1
 8002986:	2a00      	cmp	r2, #0
 8002988:	d104      	bne.n	8002994 <_scanf_chars+0x18>
 800298a:	698a      	ldr	r2, [r1, #24]
 800298c:	2a00      	cmp	r2, #0
 800298e:	d117      	bne.n	80029c0 <_scanf_chars+0x44>
 8002990:	3201      	adds	r2, #1
 8002992:	60a2      	str	r2, [r4, #8]
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	06d2      	lsls	r2, r2, #27
 8002998:	d403      	bmi.n	80029a2 <_scanf_chars+0x26>
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	1d11      	adds	r1, r2, #4
 800299e:	6019      	str	r1, [r3, #0]
 80029a0:	6817      	ldr	r7, [r2, #0]
 80029a2:	2600      	movs	r6, #0
 80029a4:	69a3      	ldr	r3, [r4, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01f      	beq.n	80029ea <_scanf_chars+0x6e>
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10b      	bne.n	80029c6 <_scanf_chars+0x4a>
 80029ae:	682b      	ldr	r3, [r5, #0]
 80029b0:	6962      	ldr	r2, [r4, #20]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d117      	bne.n	80029ea <_scanf_chars+0x6e>
 80029ba:	2e00      	cmp	r6, #0
 80029bc:	d133      	bne.n	8002a26 <_scanf_chars+0xaa>
 80029be:	e009      	b.n	80029d4 <_scanf_chars+0x58>
 80029c0:	2201      	movs	r2, #1
 80029c2:	4252      	negs	r2, r2
 80029c4:	e7e5      	b.n	8002992 <_scanf_chars+0x16>
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d006      	beq.n	80029d8 <_scanf_chars+0x5c>
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d12b      	bne.n	8002a26 <_scanf_chars+0xaa>
 80029ce:	69a3      	ldr	r3, [r4, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d128      	bne.n	8002a26 <_scanf_chars+0xaa>
 80029d4:	2001      	movs	r0, #1
 80029d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029d8:	f000 fad0 	bl	8002f7c <__locale_ctype_ptr>
 80029dc:	2208      	movs	r2, #8
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	18c0      	adds	r0, r0, r3
 80029e4:	7843      	ldrb	r3, [r0, #1]
 80029e6:	4213      	tst	r3, r2
 80029e8:	d1ef      	bne.n	80029ca <_scanf_chars+0x4e>
 80029ea:	2210      	movs	r2, #16
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	3601      	adds	r6, #1
 80029f0:	4213      	tst	r3, r2
 80029f2:	d103      	bne.n	80029fc <_scanf_chars+0x80>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	703b      	strb	r3, [r7, #0]
 80029fa:	3701      	adds	r7, #1
 80029fc:	682a      	ldr	r2, [r5, #0]
 80029fe:	686b      	ldr	r3, [r5, #4]
 8002a00:	3201      	adds	r2, #1
 8002a02:	602a      	str	r2, [r5, #0]
 8002a04:	68a2      	ldr	r2, [r4, #8]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	606b      	str	r3, [r5, #4]
 8002a0c:	60a2      	str	r2, [r4, #8]
 8002a0e:	2a00      	cmp	r2, #0
 8002a10:	d009      	beq.n	8002a26 <_scanf_chars+0xaa>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dcc6      	bgt.n	80029a4 <_scanf_chars+0x28>
 8002a16:	23c0      	movs	r3, #192	; 0xc0
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	58e3      	ldr	r3, [r4, r3]
 8002a1c:	0029      	movs	r1, r5
 8002a1e:	9801      	ldr	r0, [sp, #4]
 8002a20:	4798      	blx	r3
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d0be      	beq.n	80029a4 <_scanf_chars+0x28>
 8002a26:	2310      	movs	r3, #16
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d106      	bne.n	8002a3c <_scanf_chars+0xc0>
 8002a2e:	68e2      	ldr	r2, [r4, #12]
 8002a30:	3201      	adds	r2, #1
 8002a32:	60e2      	str	r2, [r4, #12]
 8002a34:	69a2      	ldr	r2, [r4, #24]
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	d000      	beq.n	8002a3c <_scanf_chars+0xc0>
 8002a3a:	703b      	strb	r3, [r7, #0]
 8002a3c:	6923      	ldr	r3, [r4, #16]
 8002a3e:	2000      	movs	r0, #0
 8002a40:	199e      	adds	r6, r3, r6
 8002a42:	6126      	str	r6, [r4, #16]
 8002a44:	e7c7      	b.n	80029d6 <_scanf_chars+0x5a>
	...

08002a48 <_scanf_i>:
 8002a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4a:	000c      	movs	r4, r1
 8002a4c:	b08b      	sub	sp, #44	; 0x2c
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	4b78      	ldr	r3, [pc, #480]	; (8002c34 <_scanf_i+0x1ec>)
 8002a52:	9004      	str	r0, [sp, #16]
 8002a54:	0016      	movs	r6, r2
 8002a56:	aa07      	add	r2, sp, #28
 8002a58:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002a5a:	c223      	stmia	r2!, {r0, r1, r5}
 8002a5c:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <_scanf_i+0x1f0>)
 8002a5e:	9305      	str	r3, [sp, #20]
 8002a60:	69a3      	ldr	r3, [r4, #24]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d101      	bne.n	8002a6a <_scanf_i+0x22>
 8002a66:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <_scanf_i+0x1f4>)
 8002a68:	9305      	str	r3, [sp, #20]
 8002a6a:	22ae      	movs	r2, #174	; 0xae
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	68a3      	ldr	r3, [r4, #8]
 8002a70:	0052      	lsls	r2, r2, #1
 8002a72:	1e59      	subs	r1, r3, #1
 8002a74:	9003      	str	r0, [sp, #12]
 8002a76:	4291      	cmp	r1, r2
 8002a78:	d905      	bls.n	8002a86 <_scanf_i+0x3e>
 8002a7a:	3b5e      	subs	r3, #94	; 0x5e
 8002a7c:	3bff      	subs	r3, #255	; 0xff
 8002a7e:	9303      	str	r3, [sp, #12]
 8002a80:	235e      	movs	r3, #94	; 0x5e
 8002a82:	33ff      	adds	r3, #255	; 0xff
 8002a84:	60a3      	str	r3, [r4, #8]
 8002a86:	0023      	movs	r3, r4
 8002a88:	331c      	adds	r3, #28
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	23d0      	movs	r3, #208	; 0xd0
 8002a8e:	2700      	movs	r7, #0
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	4313      	orrs	r3, r2
 8002a96:	6023      	str	r3, [r4, #0]
 8002a98:	9b01      	ldr	r3, [sp, #4]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	6833      	ldr	r3, [r6, #0]
 8002a9e:	a807      	add	r0, sp, #28
 8002aa0:	7819      	ldrb	r1, [r3, #0]
 8002aa2:	00bb      	lsls	r3, r7, #2
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	5818      	ldr	r0, [r3, r0]
 8002aa8:	f000 fa88 	bl	8002fbc <memchr>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d02b      	beq.n	8002b08 <_scanf_i+0xc0>
 8002ab0:	2f01      	cmp	r7, #1
 8002ab2:	d162      	bne.n	8002b7a <_scanf_i+0x132>
 8002ab4:	6863      	ldr	r3, [r4, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <_scanf_i+0x80>
 8002aba:	3308      	adds	r3, #8
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	6063      	str	r3, [r4, #4]
 8002ac0:	33f9      	adds	r3, #249	; 0xf9
 8002ac2:	33ff      	adds	r3, #255	; 0xff
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	6023      	str	r3, [r4, #0]
 8002ac8:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <_scanf_i+0x1f8>)
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	4013      	ands	r3, r2
 8002ace:	6023      	str	r3, [r4, #0]
 8002ad0:	68a3      	ldr	r3, [r4, #8]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	60a2      	str	r2, [r4, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <_scanf_i+0xc0>
 8002ada:	6833      	ldr	r3, [r6, #0]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	6032      	str	r2, [r6, #0]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	9a00      	ldr	r2, [sp, #0]
 8002ae4:	7013      	strb	r3, [r2, #0]
 8002ae6:	6873      	ldr	r3, [r6, #4]
 8002ae8:	1c55      	adds	r5, r2, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	6073      	str	r3, [r6, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	dc09      	bgt.n	8002b06 <_scanf_i+0xbe>
 8002af2:	23c0      	movs	r3, #192	; 0xc0
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	58e3      	ldr	r3, [r4, r3]
 8002af8:	0031      	movs	r1, r6
 8002afa:	9804      	ldr	r0, [sp, #16]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4798      	blx	r3
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d000      	beq.n	8002b06 <_scanf_i+0xbe>
 8002b04:	e080      	b.n	8002c08 <_scanf_i+0x1c0>
 8002b06:	9500      	str	r5, [sp, #0]
 8002b08:	3701      	adds	r7, #1
 8002b0a:	2f03      	cmp	r7, #3
 8002b0c:	d1c6      	bne.n	8002a9c <_scanf_i+0x54>
 8002b0e:	6863      	ldr	r3, [r4, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <_scanf_i+0xd0>
 8002b14:	330a      	adds	r3, #10
 8002b16:	6063      	str	r3, [r4, #4]
 8002b18:	2110      	movs	r1, #16
 8002b1a:	2700      	movs	r7, #0
 8002b1c:	6863      	ldr	r3, [r4, #4]
 8002b1e:	6960      	ldr	r0, [r4, #20]
 8002b20:	1ac9      	subs	r1, r1, r3
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <_scanf_i+0x1fc>)
 8002b24:	18c9      	adds	r1, r1, r3
 8002b26:	f000 f891 	bl	8002c4c <__sccl>
 8002b2a:	9d00      	ldr	r5, [sp, #0]
 8002b2c:	68a3      	ldr	r3, [r4, #8]
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d041      	beq.n	8002bba <_scanf_i+0x172>
 8002b36:	6831      	ldr	r1, [r6, #0]
 8002b38:	6963      	ldr	r3, [r4, #20]
 8002b3a:	7808      	ldrb	r0, [r1, #0]
 8002b3c:	5c1b      	ldrb	r3, [r3, r0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03b      	beq.n	8002bba <_scanf_i+0x172>
 8002b42:	2830      	cmp	r0, #48	; 0x30
 8002b44:	d129      	bne.n	8002b9a <_scanf_i+0x152>
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	421a      	tst	r2, r3
 8002b4c:	d025      	beq.n	8002b9a <_scanf_i+0x152>
 8002b4e:	9b03      	ldr	r3, [sp, #12]
 8002b50:	3701      	adds	r7, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <_scanf_i+0x11a>
 8002b56:	001a      	movs	r2, r3
 8002b58:	9b00      	ldr	r3, [sp, #0]
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	9203      	str	r2, [sp, #12]
 8002b60:	60a3      	str	r3, [r4, #8]
 8002b62:	6873      	ldr	r3, [r6, #4]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	6073      	str	r3, [r6, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	dd1d      	ble.n	8002ba8 <_scanf_i+0x160>
 8002b6c:	6833      	ldr	r3, [r6, #0]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	6033      	str	r3, [r6, #0]
 8002b72:	68a3      	ldr	r3, [r4, #8]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60a3      	str	r3, [r4, #8]
 8002b78:	e7d8      	b.n	8002b2c <_scanf_i+0xe4>
 8002b7a:	2f02      	cmp	r7, #2
 8002b7c:	d1a8      	bne.n	8002ad0 <_scanf_i+0x88>
 8002b7e:	21c0      	movs	r1, #192	; 0xc0
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	00c9      	lsls	r1, r1, #3
 8002b86:	4011      	ands	r1, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4299      	cmp	r1, r3
 8002b8c:	d1bf      	bne.n	8002b0e <_scanf_i+0xc6>
 8002b8e:	3bf1      	subs	r3, #241	; 0xf1
 8002b90:	3bff      	subs	r3, #255	; 0xff
 8002b92:	6063      	str	r3, [r4, #4]
 8002b94:	33f0      	adds	r3, #240	; 0xf0
 8002b96:	4313      	orrs	r3, r2
 8002b98:	e799      	b.n	8002ace <_scanf_i+0x86>
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <_scanf_i+0x200>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	6023      	str	r3, [r4, #0]
 8002ba0:	780b      	ldrb	r3, [r1, #0]
 8002ba2:	702b      	strb	r3, [r5, #0]
 8002ba4:	3501      	adds	r5, #1
 8002ba6:	e7dc      	b.n	8002b62 <_scanf_i+0x11a>
 8002ba8:	23c0      	movs	r3, #192	; 0xc0
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	58e3      	ldr	r3, [r4, r3]
 8002bae:	0031      	movs	r1, r6
 8002bb0:	9804      	ldr	r0, [sp, #16]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4798      	blx	r3
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d0db      	beq.n	8002b72 <_scanf_i+0x12a>
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	05db      	lsls	r3, r3, #23
 8002bbe:	d50e      	bpl.n	8002bde <_scanf_i+0x196>
 8002bc0:	9b01      	ldr	r3, [sp, #4]
 8002bc2:	429d      	cmp	r5, r3
 8002bc4:	d907      	bls.n	8002bd6 <_scanf_i+0x18e>
 8002bc6:	23be      	movs	r3, #190	; 0xbe
 8002bc8:	3d01      	subs	r5, #1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	7829      	ldrb	r1, [r5, #0]
 8002bce:	58e3      	ldr	r3, [r4, r3]
 8002bd0:	0032      	movs	r2, r6
 8002bd2:	9804      	ldr	r0, [sp, #16]
 8002bd4:	4798      	blx	r3
 8002bd6:	9b01      	ldr	r3, [sp, #4]
 8002bd8:	2001      	movs	r0, #1
 8002bda:	429d      	cmp	r5, r3
 8002bdc:	d027      	beq.n	8002c2e <_scanf_i+0x1e6>
 8002bde:	2210      	movs	r2, #16
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	401a      	ands	r2, r3
 8002be4:	d11c      	bne.n	8002c20 <_scanf_i+0x1d8>
 8002be6:	702a      	strb	r2, [r5, #0]
 8002be8:	6863      	ldr	r3, [r4, #4]
 8002bea:	9901      	ldr	r1, [sp, #4]
 8002bec:	9804      	ldr	r0, [sp, #16]
 8002bee:	9e05      	ldr	r6, [sp, #20]
 8002bf0:	47b0      	blx	r6
 8002bf2:	9b02      	ldr	r3, [sp, #8]
 8002bf4:	6821      	ldr	r1, [r4, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	068a      	lsls	r2, r1, #26
 8002bfa:	d507      	bpl.n	8002c0c <_scanf_i+0x1c4>
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	9902      	ldr	r1, [sp, #8]
 8002c00:	600a      	str	r2, [r1, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6018      	str	r0, [r3, #0]
 8002c06:	e008      	b.n	8002c1a <_scanf_i+0x1d2>
 8002c08:	2700      	movs	r7, #0
 8002c0a:	e7d6      	b.n	8002bba <_scanf_i+0x172>
 8002c0c:	1d1a      	adds	r2, r3, #4
 8002c0e:	07ce      	lsls	r6, r1, #31
 8002c10:	d5f5      	bpl.n	8002bfe <_scanf_i+0x1b6>
 8002c12:	9902      	ldr	r1, [sp, #8]
 8002c14:	600a      	str	r2, [r1, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	8018      	strh	r0, [r3, #0]
 8002c1a:	68e3      	ldr	r3, [r4, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60e3      	str	r3, [r4, #12]
 8002c20:	2000      	movs	r0, #0
 8002c22:	9b01      	ldr	r3, [sp, #4]
 8002c24:	1aed      	subs	r5, r5, r3
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	19ef      	adds	r7, r5, r7
 8002c2a:	19df      	adds	r7, r3, r7
 8002c2c:	6127      	str	r7, [r4, #16]
 8002c2e:	b00b      	add	sp, #44	; 0x2c
 8002c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	0800321c 	.word	0x0800321c
 8002c38:	08002ed9 	.word	0x08002ed9
 8002c3c:	08002db1 	.word	0x08002db1
 8002c40:	fffffaff 	.word	0xfffffaff
 8002c44:	080032cf 	.word	0x080032cf
 8002c48:	fffff6ff 	.word	0xfffff6ff

08002c4c <__sccl>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	780b      	ldrb	r3, [r1, #0]
 8002c50:	0005      	movs	r5, r0
 8002c52:	2b5e      	cmp	r3, #94	; 0x5e
 8002c54:	d018      	beq.n	8002c88 <__sccl+0x3c>
 8002c56:	1c4a      	adds	r2, r1, #1
 8002c58:	2100      	movs	r1, #0
 8002c5a:	0028      	movs	r0, r5
 8002c5c:	1c6c      	adds	r4, r5, #1
 8002c5e:	34ff      	adds	r4, #255	; 0xff
 8002c60:	7001      	strb	r1, [r0, #0]
 8002c62:	3001      	adds	r0, #1
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d1fb      	bne.n	8002c60 <__sccl+0x14>
 8002c68:	1e50      	subs	r0, r2, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <__sccl+0x3a>
 8002c6e:	2001      	movs	r0, #1
 8002c70:	4041      	eors	r1, r0
 8002c72:	54e9      	strb	r1, [r5, r3]
 8002c74:	7814      	ldrb	r4, [r2, #0]
 8002c76:	1c50      	adds	r0, r2, #1
 8002c78:	2c2d      	cmp	r4, #45	; 0x2d
 8002c7a:	d00c      	beq.n	8002c96 <__sccl+0x4a>
 8002c7c:	2c5d      	cmp	r4, #93	; 0x5d
 8002c7e:	d002      	beq.n	8002c86 <__sccl+0x3a>
 8002c80:	2c00      	cmp	r4, #0
 8002c82:	d105      	bne.n	8002c90 <__sccl+0x44>
 8002c84:	0010      	movs	r0, r2
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	1c8a      	adds	r2, r1, #2
 8002c8a:	784b      	ldrb	r3, [r1, #1]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	e7e4      	b.n	8002c5a <__sccl+0xe>
 8002c90:	0023      	movs	r3, r4
 8002c92:	0002      	movs	r2, r0
 8002c94:	e7ed      	b.n	8002c72 <__sccl+0x26>
 8002c96:	7856      	ldrb	r6, [r2, #1]
 8002c98:	2e5d      	cmp	r6, #93	; 0x5d
 8002c9a:	d0f9      	beq.n	8002c90 <__sccl+0x44>
 8002c9c:	42b3      	cmp	r3, r6
 8002c9e:	dcf7      	bgt.n	8002c90 <__sccl+0x44>
 8002ca0:	3202      	adds	r2, #2
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	54e9      	strb	r1, [r5, r3]
 8002ca6:	429e      	cmp	r6, r3
 8002ca8:	dcfb      	bgt.n	8002ca2 <__sccl+0x56>
 8002caa:	e7e3      	b.n	8002c74 <__sccl+0x28>

08002cac <_strtol_l.isra.0>:
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	001f      	movs	r7, r3
 8002cb0:	000e      	movs	r6, r1
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	9005      	str	r0, [sp, #20]
 8002cb6:	9101      	str	r1, [sp, #4]
 8002cb8:	9202      	str	r2, [sp, #8]
 8002cba:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002cbc:	7834      	ldrb	r4, [r6, #0]
 8002cbe:	f000 f959 	bl	8002f74 <__locale_ctype_ptr_l>
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	1900      	adds	r0, r0, r4
 8002cc6:	7843      	ldrb	r3, [r0, #1]
 8002cc8:	1c75      	adds	r5, r6, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d136      	bne.n	8002d3c <_strtol_l.isra.0+0x90>
 8002cce:	2c2d      	cmp	r4, #45	; 0x2d
 8002cd0:	d136      	bne.n	8002d40 <_strtol_l.isra.0+0x94>
 8002cd2:	1cb5      	adds	r5, r6, #2
 8002cd4:	7874      	ldrb	r4, [r6, #1]
 8002cd6:	2601      	movs	r6, #1
 8002cd8:	2f00      	cmp	r7, #0
 8002cda:	d062      	beq.n	8002da2 <_strtol_l.isra.0+0xf6>
 8002cdc:	2f10      	cmp	r7, #16
 8002cde:	d109      	bne.n	8002cf4 <_strtol_l.isra.0+0x48>
 8002ce0:	2c30      	cmp	r4, #48	; 0x30
 8002ce2:	d107      	bne.n	8002cf4 <_strtol_l.isra.0+0x48>
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	782b      	ldrb	r3, [r5, #0]
 8002ce8:	4393      	bics	r3, r2
 8002cea:	2b58      	cmp	r3, #88	; 0x58
 8002cec:	d154      	bne.n	8002d98 <_strtol_l.isra.0+0xec>
 8002cee:	2710      	movs	r7, #16
 8002cf0:	786c      	ldrb	r4, [r5, #1]
 8002cf2:	3502      	adds	r5, #2
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <_strtol_l.isra.0+0x100>)
 8002cf6:	0039      	movs	r1, r7
 8002cf8:	18f3      	adds	r3, r6, r3
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	f7fd fa9b 	bl	8000238 <__aeabi_uidivmod>
 8002d02:	9104      	str	r1, [sp, #16]
 8002d04:	2101      	movs	r1, #1
 8002d06:	2300      	movs	r3, #0
 8002d08:	4249      	negs	r1, r1
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	468c      	mov	ip, r1
 8002d0e:	0018      	movs	r0, r3
 8002d10:	0021      	movs	r1, r4
 8002d12:	3930      	subs	r1, #48	; 0x30
 8002d14:	2909      	cmp	r1, #9
 8002d16:	d81a      	bhi.n	8002d4e <_strtol_l.isra.0+0xa2>
 8002d18:	000c      	movs	r4, r1
 8002d1a:	42a7      	cmp	r7, r4
 8002d1c:	dd23      	ble.n	8002d66 <_strtol_l.isra.0+0xba>
 8002d1e:	1c59      	adds	r1, r3, #1
 8002d20:	d009      	beq.n	8002d36 <_strtol_l.isra.0+0x8a>
 8002d22:	4663      	mov	r3, ip
 8002d24:	4282      	cmp	r2, r0
 8002d26:	d306      	bcc.n	8002d36 <_strtol_l.isra.0+0x8a>
 8002d28:	d102      	bne.n	8002d30 <_strtol_l.isra.0+0x84>
 8002d2a:	9904      	ldr	r1, [sp, #16]
 8002d2c:	42a1      	cmp	r1, r4
 8002d2e:	db02      	blt.n	8002d36 <_strtol_l.isra.0+0x8a>
 8002d30:	2301      	movs	r3, #1
 8002d32:	4378      	muls	r0, r7
 8002d34:	1820      	adds	r0, r4, r0
 8002d36:	782c      	ldrb	r4, [r5, #0]
 8002d38:	3501      	adds	r5, #1
 8002d3a:	e7e9      	b.n	8002d10 <_strtol_l.isra.0+0x64>
 8002d3c:	002e      	movs	r6, r5
 8002d3e:	e7bc      	b.n	8002cba <_strtol_l.isra.0+0xe>
 8002d40:	2c2b      	cmp	r4, #43	; 0x2b
 8002d42:	d001      	beq.n	8002d48 <_strtol_l.isra.0+0x9c>
 8002d44:	001e      	movs	r6, r3
 8002d46:	e7c7      	b.n	8002cd8 <_strtol_l.isra.0+0x2c>
 8002d48:	1cb5      	adds	r5, r6, #2
 8002d4a:	7874      	ldrb	r4, [r6, #1]
 8002d4c:	e7fa      	b.n	8002d44 <_strtol_l.isra.0+0x98>
 8002d4e:	0021      	movs	r1, r4
 8002d50:	3941      	subs	r1, #65	; 0x41
 8002d52:	2919      	cmp	r1, #25
 8002d54:	d801      	bhi.n	8002d5a <_strtol_l.isra.0+0xae>
 8002d56:	3c37      	subs	r4, #55	; 0x37
 8002d58:	e7df      	b.n	8002d1a <_strtol_l.isra.0+0x6e>
 8002d5a:	0021      	movs	r1, r4
 8002d5c:	3961      	subs	r1, #97	; 0x61
 8002d5e:	2919      	cmp	r1, #25
 8002d60:	d801      	bhi.n	8002d66 <_strtol_l.isra.0+0xba>
 8002d62:	3c57      	subs	r4, #87	; 0x57
 8002d64:	e7d9      	b.n	8002d1a <_strtol_l.isra.0+0x6e>
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	d108      	bne.n	8002d7c <_strtol_l.isra.0+0xd0>
 8002d6a:	9a05      	ldr	r2, [sp, #20]
 8002d6c:	3323      	adds	r3, #35	; 0x23
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	9b02      	ldr	r3, [sp, #8]
 8002d72:	9803      	ldr	r0, [sp, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <_strtol_l.isra.0+0xe0>
 8002d78:	b007      	add	sp, #28
 8002d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d7c:	2e00      	cmp	r6, #0
 8002d7e:	d000      	beq.n	8002d82 <_strtol_l.isra.0+0xd6>
 8002d80:	4240      	negs	r0, r0
 8002d82:	9a02      	ldr	r2, [sp, #8]
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d0f7      	beq.n	8002d78 <_strtol_l.isra.0+0xcc>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <_strtol_l.isra.0+0xe4>
 8002d8c:	1e6b      	subs	r3, r5, #1
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	9a01      	ldr	r2, [sp, #4]
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e7ef      	b.n	8002d78 <_strtol_l.isra.0+0xcc>
 8002d98:	2430      	movs	r4, #48	; 0x30
 8002d9a:	2f00      	cmp	r7, #0
 8002d9c:	d1aa      	bne.n	8002cf4 <_strtol_l.isra.0+0x48>
 8002d9e:	2708      	movs	r7, #8
 8002da0:	e7a8      	b.n	8002cf4 <_strtol_l.isra.0+0x48>
 8002da2:	2c30      	cmp	r4, #48	; 0x30
 8002da4:	d09e      	beq.n	8002ce4 <_strtol_l.isra.0+0x38>
 8002da6:	270a      	movs	r7, #10
 8002da8:	e7a4      	b.n	8002cf4 <_strtol_l.isra.0+0x48>
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	7fffffff 	.word	0x7fffffff

08002db0 <_strtol_r>:
 8002db0:	b513      	push	{r0, r1, r4, lr}
 8002db2:	4c05      	ldr	r4, [pc, #20]	; (8002dc8 <_strtol_r+0x18>)
 8002db4:	6824      	ldr	r4, [r4, #0]
 8002db6:	6a24      	ldr	r4, [r4, #32]
 8002db8:	2c00      	cmp	r4, #0
 8002dba:	d100      	bne.n	8002dbe <_strtol_r+0xe>
 8002dbc:	4c03      	ldr	r4, [pc, #12]	; (8002dcc <_strtol_r+0x1c>)
 8002dbe:	9400      	str	r4, [sp, #0]
 8002dc0:	f7ff ff74 	bl	8002cac <_strtol_l.isra.0>
 8002dc4:	bd16      	pop	{r1, r2, r4, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	20000014 	.word	0x20000014
 8002dcc:	20000078 	.word	0x20000078

08002dd0 <_strtoul_l.isra.0>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	001f      	movs	r7, r3
 8002dd4:	000e      	movs	r6, r1
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	9003      	str	r0, [sp, #12]
 8002dda:	9101      	str	r1, [sp, #4]
 8002ddc:	9202      	str	r2, [sp, #8]
 8002dde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002de0:	7834      	ldrb	r4, [r6, #0]
 8002de2:	f000 f8c7 	bl	8002f74 <__locale_ctype_ptr_l>
 8002de6:	2208      	movs	r2, #8
 8002de8:	1900      	adds	r0, r0, r4
 8002dea:	7843      	ldrb	r3, [r0, #1]
 8002dec:	1c75      	adds	r5, r6, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	d138      	bne.n	8002e64 <_strtoul_l.isra.0+0x94>
 8002df2:	2c2d      	cmp	r4, #45	; 0x2d
 8002df4:	d138      	bne.n	8002e68 <_strtoul_l.isra.0+0x98>
 8002df6:	7874      	ldrb	r4, [r6, #1]
 8002df8:	1cb5      	adds	r5, r6, #2
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2f00      	cmp	r7, #0
 8002e00:	d065      	beq.n	8002ece <_strtoul_l.isra.0+0xfe>
 8002e02:	2f10      	cmp	r7, #16
 8002e04:	d109      	bne.n	8002e1a <_strtoul_l.isra.0+0x4a>
 8002e06:	2c30      	cmp	r4, #48	; 0x30
 8002e08:	d107      	bne.n	8002e1a <_strtoul_l.isra.0+0x4a>
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	782b      	ldrb	r3, [r5, #0]
 8002e0e:	4393      	bics	r3, r2
 8002e10:	2b58      	cmp	r3, #88	; 0x58
 8002e12:	d157      	bne.n	8002ec4 <_strtoul_l.isra.0+0xf4>
 8002e14:	2710      	movs	r7, #16
 8002e16:	786c      	ldrb	r4, [r5, #1]
 8002e18:	3502      	adds	r5, #2
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	0039      	movs	r1, r7
 8002e1e:	4240      	negs	r0, r0
 8002e20:	f7fd f984 	bl	800012c <__udivsi3>
 8002e24:	0006      	movs	r6, r0
 8002e26:	2001      	movs	r0, #1
 8002e28:	0039      	movs	r1, r7
 8002e2a:	4240      	negs	r0, r0
 8002e2c:	f7fd fa04 	bl	8000238 <__aeabi_uidivmod>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2201      	movs	r2, #1
 8002e34:	468c      	mov	ip, r1
 8002e36:	0018      	movs	r0, r3
 8002e38:	4252      	negs	r2, r2
 8002e3a:	0021      	movs	r1, r4
 8002e3c:	3930      	subs	r1, #48	; 0x30
 8002e3e:	2909      	cmp	r1, #9
 8002e40:	d817      	bhi.n	8002e72 <_strtoul_l.isra.0+0xa2>
 8002e42:	000c      	movs	r4, r1
 8002e44:	42a7      	cmp	r7, r4
 8002e46:	dd22      	ble.n	8002e8e <_strtoul_l.isra.0+0xbe>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db1e      	blt.n	8002e8a <_strtoul_l.isra.0+0xba>
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	4286      	cmp	r6, r0
 8002e50:	d305      	bcc.n	8002e5e <_strtoul_l.isra.0+0x8e>
 8002e52:	d101      	bne.n	8002e58 <_strtoul_l.isra.0+0x88>
 8002e54:	45a4      	cmp	ip, r4
 8002e56:	db02      	blt.n	8002e5e <_strtoul_l.isra.0+0x8e>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	4378      	muls	r0, r7
 8002e5c:	1820      	adds	r0, r4, r0
 8002e5e:	782c      	ldrb	r4, [r5, #0]
 8002e60:	3501      	adds	r5, #1
 8002e62:	e7ea      	b.n	8002e3a <_strtoul_l.isra.0+0x6a>
 8002e64:	002e      	movs	r6, r5
 8002e66:	e7ba      	b.n	8002dde <_strtoul_l.isra.0+0xe>
 8002e68:	2c2b      	cmp	r4, #43	; 0x2b
 8002e6a:	d1c7      	bne.n	8002dfc <_strtoul_l.isra.0+0x2c>
 8002e6c:	1cb5      	adds	r5, r6, #2
 8002e6e:	7874      	ldrb	r4, [r6, #1]
 8002e70:	e7c4      	b.n	8002dfc <_strtoul_l.isra.0+0x2c>
 8002e72:	0021      	movs	r1, r4
 8002e74:	3941      	subs	r1, #65	; 0x41
 8002e76:	2919      	cmp	r1, #25
 8002e78:	d801      	bhi.n	8002e7e <_strtoul_l.isra.0+0xae>
 8002e7a:	3c37      	subs	r4, #55	; 0x37
 8002e7c:	e7e2      	b.n	8002e44 <_strtoul_l.isra.0+0x74>
 8002e7e:	0021      	movs	r1, r4
 8002e80:	3961      	subs	r1, #97	; 0x61
 8002e82:	2919      	cmp	r1, #25
 8002e84:	d803      	bhi.n	8002e8e <_strtoul_l.isra.0+0xbe>
 8002e86:	3c57      	subs	r4, #87	; 0x57
 8002e88:	e7dc      	b.n	8002e44 <_strtoul_l.isra.0+0x74>
 8002e8a:	0013      	movs	r3, r2
 8002e8c:	e7e7      	b.n	8002e5e <_strtoul_l.isra.0+0x8e>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	da09      	bge.n	8002ea6 <_strtoul_l.isra.0+0xd6>
 8002e92:	2322      	movs	r3, #34	; 0x22
 8002e94:	2001      	movs	r0, #1
 8002e96:	9a03      	ldr	r2, [sp, #12]
 8002e98:	4240      	negs	r0, r0
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	9b02      	ldr	r3, [sp, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <_strtoul_l.isra.0+0xe8>
 8002ea2:	b005      	add	sp, #20
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea6:	9a00      	ldr	r2, [sp, #0]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d000      	beq.n	8002eae <_strtoul_l.isra.0+0xde>
 8002eac:	4240      	negs	r0, r0
 8002eae:	9a02      	ldr	r2, [sp, #8]
 8002eb0:	2a00      	cmp	r2, #0
 8002eb2:	d0f6      	beq.n	8002ea2 <_strtoul_l.isra.0+0xd2>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <_strtoul_l.isra.0+0xec>
 8002eb8:	1e6b      	subs	r3, r5, #1
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	9b02      	ldr	r3, [sp, #8]
 8002ebe:	9a01      	ldr	r2, [sp, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e7ee      	b.n	8002ea2 <_strtoul_l.isra.0+0xd2>
 8002ec4:	2430      	movs	r4, #48	; 0x30
 8002ec6:	2f00      	cmp	r7, #0
 8002ec8:	d1a7      	bne.n	8002e1a <_strtoul_l.isra.0+0x4a>
 8002eca:	2708      	movs	r7, #8
 8002ecc:	e7a5      	b.n	8002e1a <_strtoul_l.isra.0+0x4a>
 8002ece:	2c30      	cmp	r4, #48	; 0x30
 8002ed0:	d09b      	beq.n	8002e0a <_strtoul_l.isra.0+0x3a>
 8002ed2:	270a      	movs	r7, #10
 8002ed4:	e7a1      	b.n	8002e1a <_strtoul_l.isra.0+0x4a>
	...

08002ed8 <_strtoul_r>:
 8002ed8:	b513      	push	{r0, r1, r4, lr}
 8002eda:	4c05      	ldr	r4, [pc, #20]	; (8002ef0 <_strtoul_r+0x18>)
 8002edc:	6824      	ldr	r4, [r4, #0]
 8002ede:	6a24      	ldr	r4, [r4, #32]
 8002ee0:	2c00      	cmp	r4, #0
 8002ee2:	d100      	bne.n	8002ee6 <_strtoul_r+0xe>
 8002ee4:	4c03      	ldr	r4, [pc, #12]	; (8002ef4 <_strtoul_r+0x1c>)
 8002ee6:	9400      	str	r4, [sp, #0]
 8002ee8:	f7ff ff72 	bl	8002dd0 <_strtoul_l.isra.0>
 8002eec:	bd16      	pop	{r1, r2, r4, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20000014 	.word	0x20000014
 8002ef4:	20000078 	.word	0x20000078

08002ef8 <__submore>:
 8002ef8:	000b      	movs	r3, r1
 8002efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002efc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8002efe:	3344      	adds	r3, #68	; 0x44
 8002f00:	000c      	movs	r4, r1
 8002f02:	429d      	cmp	r5, r3
 8002f04:	d11c      	bne.n	8002f40 <__submore+0x48>
 8002f06:	2680      	movs	r6, #128	; 0x80
 8002f08:	00f6      	lsls	r6, r6, #3
 8002f0a:	0031      	movs	r1, r6
 8002f0c:	f000 f8be 	bl	800308c <_malloc_r>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d102      	bne.n	8002f1a <__submore+0x22>
 8002f14:	2001      	movs	r0, #1
 8002f16:	4240      	negs	r0, r0
 8002f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f1a:	0023      	movs	r3, r4
 8002f1c:	6360      	str	r0, [r4, #52]	; 0x34
 8002f1e:	63a6      	str	r6, [r4, #56]	; 0x38
 8002f20:	3346      	adds	r3, #70	; 0x46
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <__submore+0x70>)
 8002f26:	54c2      	strb	r2, [r0, r3]
 8002f28:	0023      	movs	r3, r4
 8002f2a:	3345      	adds	r3, #69	; 0x45
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <__submore+0x74>)
 8002f30:	54c2      	strb	r2, [r0, r3]
 8002f32:	782a      	ldrb	r2, [r5, #0]
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <__submore+0x78>)
 8002f36:	54c2      	strb	r2, [r0, r3]
 8002f38:	18c0      	adds	r0, r0, r3
 8002f3a:	6020      	str	r0, [r4, #0]
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	e7eb      	b.n	8002f18 <__submore+0x20>
 8002f40:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8002f42:	0029      	movs	r1, r5
 8002f44:	0073      	lsls	r3, r6, #1
 8002f46:	001a      	movs	r2, r3
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	f000 f8fd 	bl	8003148 <_realloc_r>
 8002f4e:	1e05      	subs	r5, r0, #0
 8002f50:	d0e0      	beq.n	8002f14 <__submore+0x1c>
 8002f52:	1987      	adds	r7, r0, r6
 8002f54:	0001      	movs	r1, r0
 8002f56:	0032      	movs	r2, r6
 8002f58:	0038      	movs	r0, r7
 8002f5a:	f7ff f813 	bl	8001f84 <memcpy>
 8002f5e:	9b01      	ldr	r3, [sp, #4]
 8002f60:	6027      	str	r7, [r4, #0]
 8002f62:	6365      	str	r5, [r4, #52]	; 0x34
 8002f64:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f66:	e7e9      	b.n	8002f3c <__submore+0x44>
 8002f68:	000003ff 	.word	0x000003ff
 8002f6c:	000003fe 	.word	0x000003fe
 8002f70:	000003fd 	.word	0x000003fd

08002f74 <__locale_ctype_ptr_l>:
 8002f74:	30ec      	adds	r0, #236	; 0xec
 8002f76:	6800      	ldr	r0, [r0, #0]
 8002f78:	4770      	bx	lr
	...

08002f7c <__locale_ctype_ptr>:
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__locale_ctype_ptr+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d100      	bne.n	8002f88 <__locale_ctype_ptr+0xc>
 8002f86:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <__locale_ctype_ptr+0x18>)
 8002f88:	33ec      	adds	r3, #236	; 0xec
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	4770      	bx	lr
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000014 	.word	0x20000014
 8002f94:	20000078 	.word	0x20000078

08002f98 <__ascii_mbtowc>:
 8002f98:	b082      	sub	sp, #8
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d100      	bne.n	8002fa0 <__ascii_mbtowc+0x8>
 8002f9e:	a901      	add	r1, sp, #4
 8002fa0:	1e10      	subs	r0, r2, #0
 8002fa2:	d006      	beq.n	8002fb2 <__ascii_mbtowc+0x1a>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <__ascii_mbtowc+0x1e>
 8002fa8:	7813      	ldrb	r3, [r2, #0]
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	7810      	ldrb	r0, [r2, #0]
 8002fae:	1e43      	subs	r3, r0, #1
 8002fb0:	4198      	sbcs	r0, r3
 8002fb2:	b002      	add	sp, #8
 8002fb4:	4770      	bx	lr
 8002fb6:	2002      	movs	r0, #2
 8002fb8:	4240      	negs	r0, r0
 8002fba:	e7fa      	b.n	8002fb2 <__ascii_mbtowc+0x1a>

08002fbc <memchr>:
 8002fbc:	b2c9      	uxtb	r1, r1
 8002fbe:	1882      	adds	r2, r0, r2
 8002fc0:	4290      	cmp	r0, r2
 8002fc2:	d101      	bne.n	8002fc8 <memchr+0xc>
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	4770      	bx	lr
 8002fc8:	7803      	ldrb	r3, [r0, #0]
 8002fca:	428b      	cmp	r3, r1
 8002fcc:	d0fb      	beq.n	8002fc6 <memchr+0xa>
 8002fce:	3001      	adds	r0, #1
 8002fd0:	e7f6      	b.n	8002fc0 <memchr+0x4>

08002fd2 <memmove>:
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	4288      	cmp	r0, r1
 8002fd6:	d902      	bls.n	8002fde <memmove+0xc>
 8002fd8:	188b      	adds	r3, r1, r2
 8002fda:	4298      	cmp	r0, r3
 8002fdc:	d303      	bcc.n	8002fe6 <memmove+0x14>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e007      	b.n	8002ff2 <memmove+0x20>
 8002fe2:	5c8b      	ldrb	r3, [r1, r2]
 8002fe4:	5483      	strb	r3, [r0, r2]
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	d2fb      	bcs.n	8002fe2 <memmove+0x10>
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	5ccc      	ldrb	r4, [r1, r3]
 8002fee:	54c4      	strb	r4, [r0, r3]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d1fa      	bne.n	8002fec <memmove+0x1a>
 8002ff6:	e7f8      	b.n	8002fea <memmove+0x18>

08002ff8 <_free_r>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	0005      	movs	r5, r0
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d010      	beq.n	8003022 <_free_r+0x2a>
 8003000:	1f0c      	subs	r4, r1, #4
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	da00      	bge.n	800300a <_free_r+0x12>
 8003008:	18e4      	adds	r4, r4, r3
 800300a:	0028      	movs	r0, r5
 800300c:	f000 f8e0 	bl	80031d0 <__malloc_lock>
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <_free_r+0x90>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <_free_r+0x2c>
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	6014      	str	r4, [r2, #0]
 800301c:	0028      	movs	r0, r5
 800301e:	f000 f8d8 	bl	80031d2 <__malloc_unlock>
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	42a3      	cmp	r3, r4
 8003026:	d909      	bls.n	800303c <_free_r+0x44>
 8003028:	6821      	ldr	r1, [r4, #0]
 800302a:	1860      	adds	r0, r4, r1
 800302c:	4283      	cmp	r3, r0
 800302e:	d1f3      	bne.n	8003018 <_free_r+0x20>
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	1841      	adds	r1, r0, r1
 8003036:	6021      	str	r1, [r4, #0]
 8003038:	e7ee      	b.n	8003018 <_free_r+0x20>
 800303a:	0013      	movs	r3, r2
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	2a00      	cmp	r2, #0
 8003040:	d001      	beq.n	8003046 <_free_r+0x4e>
 8003042:	42a2      	cmp	r2, r4
 8003044:	d9f9      	bls.n	800303a <_free_r+0x42>
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	1858      	adds	r0, r3, r1
 800304a:	42a0      	cmp	r0, r4
 800304c:	d10b      	bne.n	8003066 <_free_r+0x6e>
 800304e:	6820      	ldr	r0, [r4, #0]
 8003050:	1809      	adds	r1, r1, r0
 8003052:	1858      	adds	r0, r3, r1
 8003054:	6019      	str	r1, [r3, #0]
 8003056:	4282      	cmp	r2, r0
 8003058:	d1e0      	bne.n	800301c <_free_r+0x24>
 800305a:	6810      	ldr	r0, [r2, #0]
 800305c:	6852      	ldr	r2, [r2, #4]
 800305e:	1841      	adds	r1, r0, r1
 8003060:	6019      	str	r1, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	e7da      	b.n	800301c <_free_r+0x24>
 8003066:	42a0      	cmp	r0, r4
 8003068:	d902      	bls.n	8003070 <_free_r+0x78>
 800306a:	230c      	movs	r3, #12
 800306c:	602b      	str	r3, [r5, #0]
 800306e:	e7d5      	b.n	800301c <_free_r+0x24>
 8003070:	6821      	ldr	r1, [r4, #0]
 8003072:	1860      	adds	r0, r4, r1
 8003074:	4282      	cmp	r2, r0
 8003076:	d103      	bne.n	8003080 <_free_r+0x88>
 8003078:	6810      	ldr	r0, [r2, #0]
 800307a:	6852      	ldr	r2, [r2, #4]
 800307c:	1841      	adds	r1, r0, r1
 800307e:	6021      	str	r1, [r4, #0]
 8003080:	6062      	str	r2, [r4, #4]
 8003082:	605c      	str	r4, [r3, #4]
 8003084:	e7ca      	b.n	800301c <_free_r+0x24>
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	20000204 	.word	0x20000204

0800308c <_malloc_r>:
 800308c:	2303      	movs	r3, #3
 800308e:	b570      	push	{r4, r5, r6, lr}
 8003090:	1ccd      	adds	r5, r1, #3
 8003092:	439d      	bics	r5, r3
 8003094:	3508      	adds	r5, #8
 8003096:	0006      	movs	r6, r0
 8003098:	2d0c      	cmp	r5, #12
 800309a:	d21e      	bcs.n	80030da <_malloc_r+0x4e>
 800309c:	250c      	movs	r5, #12
 800309e:	42a9      	cmp	r1, r5
 80030a0:	d81d      	bhi.n	80030de <_malloc_r+0x52>
 80030a2:	0030      	movs	r0, r6
 80030a4:	f000 f894 	bl	80031d0 <__malloc_lock>
 80030a8:	4a25      	ldr	r2, [pc, #148]	; (8003140 <_malloc_r+0xb4>)
 80030aa:	6814      	ldr	r4, [r2, #0]
 80030ac:	0021      	movs	r1, r4
 80030ae:	2900      	cmp	r1, #0
 80030b0:	d119      	bne.n	80030e6 <_malloc_r+0x5a>
 80030b2:	4c24      	ldr	r4, [pc, #144]	; (8003144 <_malloc_r+0xb8>)
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <_malloc_r+0x36>
 80030ba:	0030      	movs	r0, r6
 80030bc:	f000 f86a 	bl	8003194 <_sbrk_r>
 80030c0:	6020      	str	r0, [r4, #0]
 80030c2:	0029      	movs	r1, r5
 80030c4:	0030      	movs	r0, r6
 80030c6:	f000 f865 	bl	8003194 <_sbrk_r>
 80030ca:	1c43      	adds	r3, r0, #1
 80030cc:	d12b      	bne.n	8003126 <_malloc_r+0x9a>
 80030ce:	230c      	movs	r3, #12
 80030d0:	0030      	movs	r0, r6
 80030d2:	6033      	str	r3, [r6, #0]
 80030d4:	f000 f87d 	bl	80031d2 <__malloc_unlock>
 80030d8:	e003      	b.n	80030e2 <_malloc_r+0x56>
 80030da:	2d00      	cmp	r5, #0
 80030dc:	dadf      	bge.n	800309e <_malloc_r+0x12>
 80030de:	230c      	movs	r3, #12
 80030e0:	6033      	str	r3, [r6, #0]
 80030e2:	2000      	movs	r0, #0
 80030e4:	bd70      	pop	{r4, r5, r6, pc}
 80030e6:	680b      	ldr	r3, [r1, #0]
 80030e8:	1b5b      	subs	r3, r3, r5
 80030ea:	d419      	bmi.n	8003120 <_malloc_r+0x94>
 80030ec:	2b0b      	cmp	r3, #11
 80030ee:	d903      	bls.n	80030f8 <_malloc_r+0x6c>
 80030f0:	600b      	str	r3, [r1, #0]
 80030f2:	18cc      	adds	r4, r1, r3
 80030f4:	6025      	str	r5, [r4, #0]
 80030f6:	e003      	b.n	8003100 <_malloc_r+0x74>
 80030f8:	684b      	ldr	r3, [r1, #4]
 80030fa:	428c      	cmp	r4, r1
 80030fc:	d10d      	bne.n	800311a <_malloc_r+0x8e>
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	0030      	movs	r0, r6
 8003102:	f000 f866 	bl	80031d2 <__malloc_unlock>
 8003106:	0020      	movs	r0, r4
 8003108:	2207      	movs	r2, #7
 800310a:	300b      	adds	r0, #11
 800310c:	1d23      	adds	r3, r4, #4
 800310e:	4390      	bics	r0, r2
 8003110:	1ac3      	subs	r3, r0, r3
 8003112:	d0e7      	beq.n	80030e4 <_malloc_r+0x58>
 8003114:	425a      	negs	r2, r3
 8003116:	50e2      	str	r2, [r4, r3]
 8003118:	e7e4      	b.n	80030e4 <_malloc_r+0x58>
 800311a:	6063      	str	r3, [r4, #4]
 800311c:	000c      	movs	r4, r1
 800311e:	e7ef      	b.n	8003100 <_malloc_r+0x74>
 8003120:	000c      	movs	r4, r1
 8003122:	6849      	ldr	r1, [r1, #4]
 8003124:	e7c3      	b.n	80030ae <_malloc_r+0x22>
 8003126:	2303      	movs	r3, #3
 8003128:	1cc4      	adds	r4, r0, #3
 800312a:	439c      	bics	r4, r3
 800312c:	42a0      	cmp	r0, r4
 800312e:	d0e1      	beq.n	80030f4 <_malloc_r+0x68>
 8003130:	1a21      	subs	r1, r4, r0
 8003132:	0030      	movs	r0, r6
 8003134:	f000 f82e 	bl	8003194 <_sbrk_r>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d1db      	bne.n	80030f4 <_malloc_r+0x68>
 800313c:	e7c7      	b.n	80030ce <_malloc_r+0x42>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	20000204 	.word	0x20000204
 8003144:	20000208 	.word	0x20000208

08003148 <_realloc_r>:
 8003148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314a:	0007      	movs	r7, r0
 800314c:	000d      	movs	r5, r1
 800314e:	0016      	movs	r6, r2
 8003150:	2900      	cmp	r1, #0
 8003152:	d105      	bne.n	8003160 <_realloc_r+0x18>
 8003154:	0011      	movs	r1, r2
 8003156:	f7ff ff99 	bl	800308c <_malloc_r>
 800315a:	0004      	movs	r4, r0
 800315c:	0020      	movs	r0, r4
 800315e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003160:	2a00      	cmp	r2, #0
 8003162:	d103      	bne.n	800316c <_realloc_r+0x24>
 8003164:	f7ff ff48 	bl	8002ff8 <_free_r>
 8003168:	0034      	movs	r4, r6
 800316a:	e7f7      	b.n	800315c <_realloc_r+0x14>
 800316c:	f000 f832 	bl	80031d4 <_malloc_usable_size_r>
 8003170:	002c      	movs	r4, r5
 8003172:	42b0      	cmp	r0, r6
 8003174:	d2f2      	bcs.n	800315c <_realloc_r+0x14>
 8003176:	0031      	movs	r1, r6
 8003178:	0038      	movs	r0, r7
 800317a:	f7ff ff87 	bl	800308c <_malloc_r>
 800317e:	1e04      	subs	r4, r0, #0
 8003180:	d0ec      	beq.n	800315c <_realloc_r+0x14>
 8003182:	0029      	movs	r1, r5
 8003184:	0032      	movs	r2, r6
 8003186:	f7fe fefd 	bl	8001f84 <memcpy>
 800318a:	0029      	movs	r1, r5
 800318c:	0038      	movs	r0, r7
 800318e:	f7ff ff33 	bl	8002ff8 <_free_r>
 8003192:	e7e3      	b.n	800315c <_realloc_r+0x14>

08003194 <_sbrk_r>:
 8003194:	2300      	movs	r3, #0
 8003196:	b570      	push	{r4, r5, r6, lr}
 8003198:	4c06      	ldr	r4, [pc, #24]	; (80031b4 <_sbrk_r+0x20>)
 800319a:	0005      	movs	r5, r0
 800319c:	0008      	movs	r0, r1
 800319e:	6023      	str	r3, [r4, #0]
 80031a0:	f7fd fa32 	bl	8000608 <_sbrk>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d103      	bne.n	80031b0 <_sbrk_r+0x1c>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d000      	beq.n	80031b0 <_sbrk_r+0x1c>
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	20000310 	.word	0x20000310

080031b8 <__ascii_wctomb>:
 80031b8:	1e0b      	subs	r3, r1, #0
 80031ba:	d004      	beq.n	80031c6 <__ascii_wctomb+0xe>
 80031bc:	2aff      	cmp	r2, #255	; 0xff
 80031be:	d904      	bls.n	80031ca <__ascii_wctomb+0x12>
 80031c0:	238a      	movs	r3, #138	; 0x8a
 80031c2:	6003      	str	r3, [r0, #0]
 80031c4:	3b8b      	subs	r3, #139	; 0x8b
 80031c6:	0018      	movs	r0, r3
 80031c8:	4770      	bx	lr
 80031ca:	700a      	strb	r2, [r1, #0]
 80031cc:	2301      	movs	r3, #1
 80031ce:	e7fa      	b.n	80031c6 <__ascii_wctomb+0xe>

080031d0 <__malloc_lock>:
 80031d0:	4770      	bx	lr

080031d2 <__malloc_unlock>:
 80031d2:	4770      	bx	lr

080031d4 <_malloc_usable_size_r>:
 80031d4:	1f0b      	subs	r3, r1, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1f18      	subs	r0, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da01      	bge.n	80031e2 <_malloc_usable_size_r+0xe>
 80031de:	580b      	ldr	r3, [r1, r0]
 80031e0:	18c0      	adds	r0, r0, r3
 80031e2:	4770      	bx	lr

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
